
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000af2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00002d6c  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000154d  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000022  00000000  00000000  00004e3d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 28 02 	call	0x450	; 0x450 <main>
  8e:	0c 94 77 05 	jmp	0xaee	; 0xaee <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
  96:	81 34       	cpi	r24, 0x41	; 65
  98:	31 f1       	breq	.+76     	; 0xe6 <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
  9a:	82 34       	cpi	r24, 0x42	; 66
  9c:	59 f4       	brne	.+22     	; 0xb4 <toggle+0x1e>
      PORTB ^= (1<<bit);
  9e:	25 b1       	in	r18, 0x05	; 5
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	06 2e       	mov	r0, r22
  a6:	01 c0       	rjmp	.+2      	; 0xaa <toggle+0x14>
  a8:	88 0f       	add	r24, r24
  aa:	0a 94       	dec	r0
  ac:	ea f7       	brpl	.-6      	; 0xa8 <toggle+0x12>
  ae:	28 27       	eor	r18, r24
  b0:	25 b9       	out	0x05, r18	; 5
  b2:	08 95       	ret
    }else if (port == 'C'){
  b4:	83 34       	cpi	r24, 0x43	; 67
  b6:	59 f4       	brne	.+22     	; 0xce <toggle+0x38>
      PORTC ^= (1<<bit);
  b8:	28 b1       	in	r18, 0x08	; 8
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	06 2e       	mov	r0, r22
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <toggle+0x2e>
  c2:	88 0f       	add	r24, r24
  c4:	0a 94       	dec	r0
  c6:	ea f7       	brpl	.-6      	; 0xc2 <toggle+0x2c>
  c8:	28 27       	eor	r18, r24
  ca:	28 b9       	out	0x08, r18	; 8
  cc:	08 95       	ret
    }else if (port == 'D'){
  ce:	84 34       	cpi	r24, 0x44	; 68
  d0:	51 f4       	brne	.+20     	; 0xe6 <toggle+0x50>
      PORTD ^= (1<<bit);
  d2:	2b b1       	in	r18, 0x0b	; 11
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	06 2e       	mov	r0, r22
  da:	01 c0       	rjmp	.+2      	; 0xde <toggle+0x48>
  dc:	88 0f       	add	r24, r24
  de:	0a 94       	dec	r0
  e0:	ea f7       	brpl	.-6      	; 0xdc <toggle+0x46>
  e2:	28 27       	eor	r18, r24
  e4:	2b b9       	out	0x0b, r18	; 11
  e6:	08 95       	ret

000000e8 <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
  e8:	81 34       	cpi	r24, 0x41	; 65
  ea:	31 f1       	breq	.+76     	; 0x138 <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
  ec:	82 34       	cpi	r24, 0x42	; 66
  ee:	59 f4       	brne	.+22     	; 0x106 <pin_hi+0x1e>
      PORTB |= (1<<bit);
  f0:	25 b1       	in	r18, 0x05	; 5
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	06 2e       	mov	r0, r22
  f8:	01 c0       	rjmp	.+2      	; 0xfc <pin_hi+0x14>
  fa:	88 0f       	add	r24, r24
  fc:	0a 94       	dec	r0
  fe:	ea f7       	brpl	.-6      	; 0xfa <pin_hi+0x12>
 100:	28 2b       	or	r18, r24
 102:	25 b9       	out	0x05, r18	; 5
 104:	08 95       	ret
    }else if (port == 'C'){
 106:	83 34       	cpi	r24, 0x43	; 67
 108:	59 f4       	brne	.+22     	; 0x120 <pin_hi+0x38>
      PORTC |= (1<<bit);
 10a:	28 b1       	in	r18, 0x08	; 8
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	06 2e       	mov	r0, r22
 112:	01 c0       	rjmp	.+2      	; 0x116 <pin_hi+0x2e>
 114:	88 0f       	add	r24, r24
 116:	0a 94       	dec	r0
 118:	ea f7       	brpl	.-6      	; 0x114 <pin_hi+0x2c>
 11a:	28 2b       	or	r18, r24
 11c:	28 b9       	out	0x08, r18	; 8
 11e:	08 95       	ret
    }else if (port == 'D'){
 120:	84 34       	cpi	r24, 0x44	; 68
 122:	51 f4       	brne	.+20     	; 0x138 <pin_hi+0x50>
      PORTD |= (1<<bit);
 124:	2b b1       	in	r18, 0x0b	; 11
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	06 2e       	mov	r0, r22
 12c:	01 c0       	rjmp	.+2      	; 0x130 <pin_hi+0x48>
 12e:	88 0f       	add	r24, r24
 130:	0a 94       	dec	r0
 132:	ea f7       	brpl	.-6      	; 0x12e <pin_hi+0x46>
 134:	28 2b       	or	r18, r24
 136:	2b b9       	out	0x0b, r18	; 11
 138:	08 95       	ret

0000013a <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 13a:	81 34       	cpi	r24, 0x41	; 65
 13c:	49 f1       	breq	.+82     	; 0x190 <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 13e:	82 34       	cpi	r24, 0x42	; 66
 140:	61 f4       	brne	.+24     	; 0x15a <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 142:	25 b1       	in	r18, 0x05	; 5
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	06 2e       	mov	r0, r22
 14a:	01 c0       	rjmp	.+2      	; 0x14e <pin_lo+0x14>
 14c:	88 0f       	add	r24, r24
 14e:	0a 94       	dec	r0
 150:	ea f7       	brpl	.-6      	; 0x14c <pin_lo+0x12>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 b9       	out	0x05, r24	; 5
 158:	08 95       	ret
    }else if (port == 'C'){
 15a:	83 34       	cpi	r24, 0x43	; 67
 15c:	61 f4       	brne	.+24     	; 0x176 <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 15e:	28 b1       	in	r18, 0x08	; 8
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	06 2e       	mov	r0, r22
 166:	01 c0       	rjmp	.+2      	; 0x16a <pin_lo+0x30>
 168:	88 0f       	add	r24, r24
 16a:	0a 94       	dec	r0
 16c:	ea f7       	brpl	.-6      	; 0x168 <pin_lo+0x2e>
 16e:	80 95       	com	r24
 170:	82 23       	and	r24, r18
 172:	88 b9       	out	0x08, r24	; 8
 174:	08 95       	ret
    }else if (port == 'D'){
 176:	84 34       	cpi	r24, 0x44	; 68
 178:	59 f4       	brne	.+22     	; 0x190 <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 17a:	2b b1       	in	r18, 0x0b	; 11
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	06 2e       	mov	r0, r22
 182:	01 c0       	rjmp	.+2      	; 0x186 <pin_lo+0x4c>
 184:	88 0f       	add	r24, r24
 186:	0a 94       	dec	r0
 188:	ea f7       	brpl	.-6      	; 0x184 <pin_lo+0x4a>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 192:	81 34       	cpi	r24, 0x41	; 65
 194:	49 f1       	breq	.+82     	; 0x1e8 <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 196:	82 34       	cpi	r24, 0x42	; 66
 198:	61 f4       	brne	.+24     	; 0x1b2 <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 19a:	24 b1       	in	r18, 0x04	; 4
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	06 2e       	mov	r0, r22
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <set_as_input+0x14>
 1a4:	88 0f       	add	r24, r24
 1a6:	0a 94       	dec	r0
 1a8:	ea f7       	brpl	.-6      	; 0x1a4 <set_as_input+0x12>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	84 b9       	out	0x04, r24	; 4
 1b0:	08 95       	ret
    }else if (port == 'C'){
 1b2:	83 34       	cpi	r24, 0x43	; 67
 1b4:	61 f4       	brne	.+24     	; 0x1ce <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 1b6:	27 b1       	in	r18, 0x07	; 7
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	06 2e       	mov	r0, r22
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <set_as_input+0x30>
 1c0:	88 0f       	add	r24, r24
 1c2:	0a 94       	dec	r0
 1c4:	ea f7       	brpl	.-6      	; 0x1c0 <set_as_input+0x2e>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	87 b9       	out	0x07, r24	; 7
 1cc:	08 95       	ret
    }else if (port == 'D'){
 1ce:	84 34       	cpi	r24, 0x44	; 68
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 1d2:	2a b1       	in	r18, 0x0a	; 10
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	06 2e       	mov	r0, r22
 1da:	01 c0       	rjmp	.+2      	; 0x1de <set_as_input+0x4c>
 1dc:	88 0f       	add	r24, r24
 1de:	0a 94       	dec	r0
 1e0:	ea f7       	brpl	.-6      	; 0x1dc <set_as_input+0x4a>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	08 95       	ret

000001ea <set_as_output>:
    }
}

void set_as_output(char port, int bit)
{
    if(port == 'A'){
 1ea:	81 34       	cpi	r24, 0x41	; 65
 1ec:	31 f1       	breq	.+76     	; 0x23a <set_as_output+0x50>
      //DDRA |= (1<<bit);
    }else if (port == 'B'){
 1ee:	82 34       	cpi	r24, 0x42	; 66
 1f0:	59 f4       	brne	.+22     	; 0x208 <set_as_output+0x1e>
      DDRB |= (1<<bit);
 1f2:	24 b1       	in	r18, 0x04	; 4
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	06 2e       	mov	r0, r22
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <set_as_output+0x14>
 1fc:	88 0f       	add	r24, r24
 1fe:	0a 94       	dec	r0
 200:	ea f7       	brpl	.-6      	; 0x1fc <set_as_output+0x12>
 202:	28 2b       	or	r18, r24
 204:	24 b9       	out	0x04, r18	; 4
 206:	08 95       	ret
    }else if (port == 'C'){
 208:	83 34       	cpi	r24, 0x43	; 67
 20a:	59 f4       	brne	.+22     	; 0x222 <set_as_output+0x38>
      DDRC |= (1<<bit);
 20c:	27 b1       	in	r18, 0x07	; 7
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	06 2e       	mov	r0, r22
 214:	01 c0       	rjmp	.+2      	; 0x218 <set_as_output+0x2e>
 216:	88 0f       	add	r24, r24
 218:	0a 94       	dec	r0
 21a:	ea f7       	brpl	.-6      	; 0x216 <set_as_output+0x2c>
 21c:	28 2b       	or	r18, r24
 21e:	27 b9       	out	0x07, r18	; 7
 220:	08 95       	ret
    }else if (port == 'D'){
 222:	84 34       	cpi	r24, 0x44	; 68
 224:	51 f4       	brne	.+20     	; 0x23a <set_as_output+0x50>
      DDRD |= (1<<bit);
 226:	2a b1       	in	r18, 0x0a	; 10
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	06 2e       	mov	r0, r22
 22e:	01 c0       	rjmp	.+2      	; 0x232 <set_as_output+0x48>
 230:	88 0f       	add	r24, r24
 232:	0a 94       	dec	r0
 234:	ea f7       	brpl	.-6      	; 0x230 <set_as_output+0x46>
 236:	28 2b       	or	r18, r24
 238:	2a b9       	out	0x0a, r18	; 10
 23a:	08 95       	ret

0000023c <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 23c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	80 93 c2 00 	sts	0x00C2, r24
 25c:	08 95       	ret

0000025e <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 25e:	90 91 c0 00 	lds	r25, 0x00C0
 262:	95 ff       	sbrs	r25, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <transmitByte>
  UDR0 = data;                                            /* send data */
 266:	80 93 c6 00 	sts	0x00C6, r24
 26a:	08 95       	ret

0000026c <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 26c:	80 91 c0 00 	lds	r24, 0x00C0
 270:	87 ff       	sbrs	r24, 7
 272:	fc cf       	rjmp	.-8      	; 0x26c <receiveByte>
  return UDR0;                                /* return register value */
 274:	80 91 c6 00 	lds	r24, 0x00C6
}
 278:	08 95       	ret

0000027a <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
  uint8_t i = 0;
 282:	10 e0       	ldi	r17, 0x00	; 0
  while (myString[i]) {
 284:	03 c0       	rjmp	.+6      	; 0x28c <printString+0x12>
    transmitByte(myString[i]);
 286:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
    i++;
 28a:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 28c:	fe 01       	movw	r30, r28
 28e:	e1 0f       	add	r30, r17
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	81 11       	cpse	r24, r1
 296:	f7 cf       	rjmp	.-18     	; 0x286 <printString+0xc>
    transmitByte(myString[i]);
    i++;
  }
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <readString>:

void readString(char myString[], uint8_t maxLength) {
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	8c 01       	movw	r16, r24
  char response;
  uint8_t i;
  i = 0;
 2b2:	d1 2c       	mov	r13, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 2b4:	c6 2f       	mov	r28, r22
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	21 97       	sbiw	r28, 0x01	; 1
 2ba:	12 c0       	rjmp	.+36     	; 0x2e0 <readString+0x40>
    response = receiveByte();
 2bc:	0e 94 36 01 	call	0x26c	; 0x26c <receiveByte>
 2c0:	c8 2e       	mov	r12, r24
    transmitByte(response);                                    /* echo */
 2c2:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	c8 12       	cpse	r12, r24
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <readString+0x36>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 2cc:	f8 01       	movw	r30, r16
 2ce:	ed 0d       	add	r30, r13
 2d0:	f1 1d       	adc	r31, r1
 2d2:	10 82       	st	Z, r1
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <readString+0x4c>
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 2d6:	f8 01       	movw	r30, r16
 2d8:	ee 0d       	add	r30, r14
 2da:	ff 1d       	adc	r31, r15
 2dc:	c0 82       	st	Z, r12
      i++;
 2de:	d3 94       	inc	r13

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 2e0:	ed 2c       	mov	r14, r13
 2e2:	f1 2c       	mov	r15, r1
 2e4:	ec 16       	cp	r14, r28
 2e6:	fd 06       	cpc	r15, r29
 2e8:	4c f3       	brlt	.-46     	; 0x2bc <readString+0x1c>
 2ea:	f0 cf       	rjmp	.-32     	; 0x2cc <readString+0x2c>
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <printByte>:

void printByte(uint8_t byte) {
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 302:	64 e6       	ldi	r22, 0x64	; 100
 304:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivmodqi4>
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 30e:	2a e0       	ldi	r18, 0x0A	; 10
 310:	8c 2f       	mov	r24, r28
 312:	62 2f       	mov	r22, r18
 314:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivmodqi4>
 318:	c9 2f       	mov	r28, r25
 31a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivmodqi4>
 31e:	89 2f       	mov	r24, r25
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 326:	8c 2f       	mov	r24, r28
 328:	80 5d       	subi	r24, 0xD0	; 208
}
 32a:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 32c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

00000330 <printWord>:
}

void printWord(uint16_t word) {
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 33a:	60 e1       	ldi	r22, 0x10	; 16
 33c:	77 e2       	ldi	r23, 0x27	; 39
 33e:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 342:	86 2f       	mov	r24, r22
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 34a:	ce 01       	movw	r24, r28
 34c:	68 ee       	ldi	r22, 0xE8	; 232
 34e:	73 e0       	ldi	r23, 0x03	; 3
 350:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 354:	cb 01       	movw	r24, r22
 356:	0a e0       	ldi	r16, 0x0A	; 10
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	b8 01       	movw	r22, r16
 35c:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 366:	ce 01       	movw	r24, r28
 368:	64 e6       	ldi	r22, 0x64	; 100
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 370:	cb 01       	movw	r24, r22
 372:	b8 01       	movw	r22, r16
 374:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 378:	80 5d       	subi	r24, 0xD0	; 208
 37a:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 37e:	ce 01       	movw	r24, r28
 380:	b8 01       	movw	r22, r16
 382:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 386:	c8 2f       	mov	r28, r24
 388:	cb 01       	movw	r24, r22
 38a:	b8 01       	movw	r22, r16
 38c:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 396:	8c 2f       	mov	r24, r28
 398:	80 5d       	subi	r24, 0xD0	; 208
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 3a2:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

000003a6 <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	1f 92       	push	r1
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 3b4:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	01 2e       	mov	r0, r17
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <printBinaryByte+0x1c>
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <printBinaryByte+0x18>
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <printBinaryByte+0x28>
      transmitByte('1');
 3ca:	81 e3       	ldi	r24, 0x31	; 49
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 3ce:	80 e3       	ldi	r24, 0x30	; 48
 3d0:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 3d4:	11 50       	subi	r17, 0x01	; 1
 3d6:	78 f7       	brcc	.-34     	; 0x3b6 <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 3e2:	8a 30       	cpi	r24, 0x0A	; 10
 3e4:	10 f4       	brcc	.+4      	; 0x3ea <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 3ea:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 3ec:	08 95       	ret

000003ee <printHexByte>:

void printHexByte(uint8_t byte) {
 3ee:	cf 93       	push	r28
 3f0:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nibbleToHexCharacter>
 3fa:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nibbleToHexCharacter>
}
 406:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 408:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

0000040c <getNumber>:
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	d0 e3       	ldi	r29, 0x30	; 48
 416:	c0 e3       	ldi	r28, 0x30	; 48
 418:	00 e3       	ldi	r16, 0x30	; 48
 41a:	03 c0       	rjmp	.+6      	; 0x422 <getNumber+0x16>
 41c:	d1 2f       	mov	r29, r17
 41e:	c8 2f       	mov	r28, r24
 420:	09 2f       	mov	r16, r25
 422:	0e 94 36 01 	call	0x26c	; 0x26c <receiveByte>
 426:	18 2f       	mov	r17, r24
 428:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
 42c:	9c 2f       	mov	r25, r28
 42e:	8d 2f       	mov	r24, r29
 430:	1d 30       	cpi	r17, 0x0D	; 13
 432:	a1 f7       	brne	.-24     	; 0x41c <getNumber+0x10>
 434:	80 5d       	subi	r24, 0xD0	; 208
 436:	94 e6       	ldi	r25, 0x64	; 100
 438:	09 9f       	mul	r16, r25
 43a:	80 0d       	add	r24, r0
 43c:	11 24       	eor	r1, r1
 43e:	9a e0       	ldi	r25, 0x0A	; 10
 440:	c9 9f       	mul	r28, r25
 442:	80 0d       	add	r24, r0
 444:	11 24       	eor	r1, r1
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <main>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	af 97       	sbiw	r28, 0x2f	; 47
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	0e 94 1e 01 	call	0x23c	; 0x23c <initUSART>
 468:	2f e7       	ldi	r18, 0x7F	; 127
 46a:	8a e1       	ldi	r24, 0x1A	; 26
 46c:	96 e0       	ldi	r25, 0x06	; 6
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <main+0x1e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <main+0x28>
 478:	00 00       	nop
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
 482:	60 e2       	ldi	r22, 0x20	; 32
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 50 01 	call	0x2a0	; 0x2a0 <readString>
 48c:	80 91 7c 00 	lds	r24, 0x007C
 490:	80 64       	ori	r24, 0x40	; 64
 492:	80 93 7c 00 	sts	0x007C, r24
 496:	80 91 7a 00 	lds	r24, 0x007A
 49a:	84 60       	ori	r24, 0x04	; 4
 49c:	80 93 7a 00 	sts	0x007A, r24
 4a0:	80 91 7a 00 	lds	r24, 0x007A
 4a4:	80 68       	ori	r24, 0x80	; 128
 4a6:	80 93 7a 00 	sts	0x007A, r24
 4aa:	8a e1       	ldi	r24, 0x1A	; 26
 4ac:	e8 2e       	mov	r14, r24
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	f8 2e       	mov	r15, r24
 4b2:	8e 01       	movw	r16, r28
 4b4:	0f 5d       	subi	r16, 0xDF	; 223
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	80 91 7a 00 	lds	r24, 0x007A
 4bc:	80 64       	ori	r24, 0x40	; 64
 4be:	80 93 7a 00 	sts	0x007A, r24
 4c2:	80 91 7a 00 	lds	r24, 0x007A
 4c6:	86 fd       	sbrc	r24, 6
 4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <main+0x72>
 4ca:	80 91 78 00 	lds	r24, 0x0078
 4ce:	90 91 79 00 	lds	r25, 0x0079
 4d2:	9f 93       	push	r25
 4d4:	8f 93       	push	r24
 4d6:	ff 92       	push	r15
 4d8:	ef 92       	push	r14
 4da:	1f 93       	push	r17
 4dc:	0f 93       	push	r16
 4de:	0e 94 9f 02 	call	0x53e	; 0x53e <sprintf>
 4e2:	c8 01       	movw	r24, r16
 4e4:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
 4e8:	87 e1       	ldi	r24, 0x17	; 23
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	dd cf       	rjmp	.-70     	; 0x4b8 <main+0x68>

000004fe <__udivmodqi4>:
 4fe:	99 1b       	sub	r25, r25
 500:	79 e0       	ldi	r23, 0x09	; 9
 502:	04 c0       	rjmp	.+8      	; 0x50c <__udivmodqi4_ep>

00000504 <__udivmodqi4_loop>:
 504:	99 1f       	adc	r25, r25
 506:	96 17       	cp	r25, r22
 508:	08 f0       	brcs	.+2      	; 0x50c <__udivmodqi4_ep>
 50a:	96 1b       	sub	r25, r22

0000050c <__udivmodqi4_ep>:
 50c:	88 1f       	adc	r24, r24
 50e:	7a 95       	dec	r23
 510:	c9 f7       	brne	.-14     	; 0x504 <__udivmodqi4_loop>
 512:	80 95       	com	r24
 514:	08 95       	ret

00000516 <__udivmodhi4>:
 516:	aa 1b       	sub	r26, r26
 518:	bb 1b       	sub	r27, r27
 51a:	51 e1       	ldi	r21, 0x11	; 17
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__udivmodhi4_ep>

0000051e <__udivmodhi4_loop>:
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	a6 17       	cp	r26, r22
 524:	b7 07       	cpc	r27, r23
 526:	10 f0       	brcs	.+4      	; 0x52c <__udivmodhi4_ep>
 528:	a6 1b       	sub	r26, r22
 52a:	b7 0b       	sbc	r27, r23

0000052c <__udivmodhi4_ep>:
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	5a 95       	dec	r21
 532:	a9 f7       	brne	.-22     	; 0x51e <__udivmodhi4_loop>
 534:	80 95       	com	r24
 536:	90 95       	com	r25
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	08 95       	ret

0000053e <sprintf>:
 53e:	a0 e1       	ldi	r26, 0x10	; 16
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e5 ea       	ldi	r30, 0xA5	; 165
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__prologue_saves__+0x1c>
 54a:	0f 89       	ldd	r16, Y+23	; 0x17
 54c:	18 8d       	ldd	r17, Y+24	; 0x18
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	8c 83       	std	Y+4, r24	; 0x04
 552:	1a 83       	std	Y+2, r17	; 0x02
 554:	09 83       	std	Y+1, r16	; 0x01
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	9f e7       	ldi	r25, 0x7F	; 127
 55a:	9e 83       	std	Y+6, r25	; 0x06
 55c:	8d 83       	std	Y+5, r24	; 0x05
 55e:	ae 01       	movw	r20, r28
 560:	45 5e       	subi	r20, 0xE5	; 229
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	58 8b       	std	Y+16, r21	; 0x10
 566:	4f 87       	std	Y+15, r20	; 0x0f
 568:	69 8d       	ldd	r22, Y+25	; 0x19
 56a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	0e 94 c3 02 	call	0x586	; 0x586 <vfprintf>
 574:	ef 81       	ldd	r30, Y+7	; 0x07
 576:	f8 85       	ldd	r31, Y+8	; 0x08
 578:	e0 0f       	add	r30, r16
 57a:	f1 1f       	adc	r31, r17
 57c:	10 82       	st	Z, r1
 57e:	60 96       	adiw	r28, 0x10	; 16
 580:	e4 e0       	ldi	r30, 0x04	; 4
 582:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__epilogue_restores__+0x1c>

00000586 <vfprintf>:
 586:	ac e0       	ldi	r26, 0x0C	; 12
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e9 ec       	ldi	r30, 0xC9	; 201
 58c:	f2 e0       	ldi	r31, 0x02	; 2
 58e:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__prologue_saves__>
 592:	7c 01       	movw	r14, r24
 594:	6b 01       	movw	r12, r22
 596:	8a 01       	movw	r16, r20
 598:	fc 01       	movw	r30, r24
 59a:	17 82       	std	Z+7, r1	; 0x07
 59c:	16 82       	std	Z+6, r1	; 0x06
 59e:	83 81       	ldd	r24, Z+3	; 0x03
 5a0:	81 ff       	sbrs	r24, 1
 5a2:	c7 c1       	rjmp	.+910    	; 0x932 <__stack+0x33>
 5a4:	88 24       	eor	r8, r8
 5a6:	83 94       	inc	r8
 5a8:	91 2c       	mov	r9, r1
 5aa:	8c 0e       	add	r8, r28
 5ac:	9d 1e       	adc	r9, r29
 5ae:	f7 01       	movw	r30, r14
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	f6 01       	movw	r30, r12
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	6f 01       	movw	r12, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x3e>
 5c2:	b3 c1       	rjmp	.+870    	; 0x92a <__stack+0x2b>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x50>
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	6f 01       	movw	r12, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <vfprintf+0x5a>
 5d6:	b7 01       	movw	r22, r14
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 5de:	e7 cf       	rjmp	.-50     	; 0x5ae <vfprintf+0x28>
 5e0:	71 2c       	mov	r7, r1
 5e2:	31 2c       	mov	r3, r1
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	20 32       	cpi	r18, 0x20	; 32
 5e8:	a8 f4       	brcc	.+42     	; 0x614 <vfprintf+0x8e>
 5ea:	8b 32       	cpi	r24, 0x2B	; 43
 5ec:	61 f0       	breq	.+24     	; 0x606 <vfprintf+0x80>
 5ee:	28 f4       	brcc	.+10     	; 0x5fa <vfprintf+0x74>
 5f0:	80 32       	cpi	r24, 0x20	; 32
 5f2:	51 f0       	breq	.+20     	; 0x608 <vfprintf+0x82>
 5f4:	83 32       	cpi	r24, 0x23	; 35
 5f6:	71 f4       	brne	.+28     	; 0x614 <vfprintf+0x8e>
 5f8:	0b c0       	rjmp	.+22     	; 0x610 <vfprintf+0x8a>
 5fa:	8d 32       	cpi	r24, 0x2D	; 45
 5fc:	39 f0       	breq	.+14     	; 0x60c <vfprintf+0x86>
 5fe:	80 33       	cpi	r24, 0x30	; 48
 600:	49 f4       	brne	.+18     	; 0x614 <vfprintf+0x8e>
 602:	21 60       	ori	r18, 0x01	; 1
 604:	28 c0       	rjmp	.+80     	; 0x656 <vfprintf+0xd0>
 606:	22 60       	ori	r18, 0x02	; 2
 608:	24 60       	ori	r18, 0x04	; 4
 60a:	25 c0       	rjmp	.+74     	; 0x656 <vfprintf+0xd0>
 60c:	28 60       	ori	r18, 0x08	; 8
 60e:	23 c0       	rjmp	.+70     	; 0x656 <vfprintf+0xd0>
 610:	20 61       	ori	r18, 0x10	; 16
 612:	21 c0       	rjmp	.+66     	; 0x656 <vfprintf+0xd0>
 614:	27 fd       	sbrc	r18, 7
 616:	27 c0       	rjmp	.+78     	; 0x666 <vfprintf+0xe0>
 618:	38 2f       	mov	r19, r24
 61a:	30 53       	subi	r19, 0x30	; 48
 61c:	3a 30       	cpi	r19, 0x0A	; 10
 61e:	78 f4       	brcc	.+30     	; 0x63e <vfprintf+0xb8>
 620:	26 ff       	sbrs	r18, 6
 622:	06 c0       	rjmp	.+12     	; 0x630 <vfprintf+0xaa>
 624:	fa e0       	ldi	r31, 0x0A	; 10
 626:	7f 9e       	mul	r7, r31
 628:	30 0d       	add	r19, r0
 62a:	11 24       	eor	r1, r1
 62c:	73 2e       	mov	r7, r19
 62e:	13 c0       	rjmp	.+38     	; 0x656 <vfprintf+0xd0>
 630:	8a e0       	ldi	r24, 0x0A	; 10
 632:	38 9e       	mul	r3, r24
 634:	30 0d       	add	r19, r0
 636:	11 24       	eor	r1, r1
 638:	33 2e       	mov	r3, r19
 63a:	20 62       	ori	r18, 0x20	; 32
 63c:	0c c0       	rjmp	.+24     	; 0x656 <vfprintf+0xd0>
 63e:	8e 32       	cpi	r24, 0x2E	; 46
 640:	21 f4       	brne	.+8      	; 0x64a <vfprintf+0xc4>
 642:	26 fd       	sbrc	r18, 6
 644:	72 c1       	rjmp	.+740    	; 0x92a <__stack+0x2b>
 646:	20 64       	ori	r18, 0x40	; 64
 648:	06 c0       	rjmp	.+12     	; 0x656 <vfprintf+0xd0>
 64a:	8c 36       	cpi	r24, 0x6C	; 108
 64c:	11 f4       	brne	.+4      	; 0x652 <vfprintf+0xcc>
 64e:	20 68       	ori	r18, 0x80	; 128
 650:	02 c0       	rjmp	.+4      	; 0x656 <vfprintf+0xd0>
 652:	88 36       	cpi	r24, 0x68	; 104
 654:	41 f4       	brne	.+16     	; 0x666 <vfprintf+0xe0>
 656:	f6 01       	movw	r30, r12
 658:	93 fd       	sbrc	r25, 3
 65a:	85 91       	lpm	r24, Z+
 65c:	93 ff       	sbrs	r25, 3
 65e:	81 91       	ld	r24, Z+
 660:	6f 01       	movw	r12, r30
 662:	81 11       	cpse	r24, r1
 664:	c0 cf       	rjmp	.-128    	; 0x5e6 <vfprintf+0x60>
 666:	98 2f       	mov	r25, r24
 668:	95 54       	subi	r25, 0x45	; 69
 66a:	93 30       	cpi	r25, 0x03	; 3
 66c:	18 f0       	brcs	.+6      	; 0x674 <vfprintf+0xee>
 66e:	90 52       	subi	r25, 0x20	; 32
 670:	93 30       	cpi	r25, 0x03	; 3
 672:	28 f4       	brcc	.+10     	; 0x67e <vfprintf+0xf8>
 674:	0c 5f       	subi	r16, 0xFC	; 252
 676:	1f 4f       	sbci	r17, 0xFF	; 255
 678:	ff e3       	ldi	r31, 0x3F	; 63
 67a:	f9 83       	std	Y+1, r31	; 0x01
 67c:	0d c0       	rjmp	.+26     	; 0x698 <vfprintf+0x112>
 67e:	83 36       	cpi	r24, 0x63	; 99
 680:	31 f0       	breq	.+12     	; 0x68e <vfprintf+0x108>
 682:	83 37       	cpi	r24, 0x73	; 115
 684:	71 f0       	breq	.+28     	; 0x6a2 <vfprintf+0x11c>
 686:	83 35       	cpi	r24, 0x53	; 83
 688:	09 f0       	breq	.+2      	; 0x68c <vfprintf+0x106>
 68a:	5e c0       	rjmp	.+188    	; 0x748 <vfprintf+0x1c2>
 68c:	23 c0       	rjmp	.+70     	; 0x6d4 <vfprintf+0x14e>
 68e:	f8 01       	movw	r30, r16
 690:	80 81       	ld	r24, Z
 692:	89 83       	std	Y+1, r24	; 0x01
 694:	0e 5f       	subi	r16, 0xFE	; 254
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	66 24       	eor	r6, r6
 69a:	63 94       	inc	r6
 69c:	71 2c       	mov	r7, r1
 69e:	54 01       	movw	r10, r8
 6a0:	15 c0       	rjmp	.+42     	; 0x6cc <vfprintf+0x146>
 6a2:	28 01       	movw	r4, r16
 6a4:	f2 e0       	ldi	r31, 0x02	; 2
 6a6:	4f 0e       	add	r4, r31
 6a8:	51 1c       	adc	r5, r1
 6aa:	f8 01       	movw	r30, r16
 6ac:	a0 80       	ld	r10, Z
 6ae:	b1 80       	ldd	r11, Z+1	; 0x01
 6b0:	26 ff       	sbrs	r18, 6
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <vfprintf+0x134>
 6b4:	67 2d       	mov	r22, r7
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <vfprintf+0x138>
 6ba:	6f ef       	ldi	r22, 0xFF	; 255
 6bc:	7f ef       	ldi	r23, 0xFF	; 255
 6be:	c5 01       	movw	r24, r10
 6c0:	2c 87       	std	Y+12, r18	; 0x0c
 6c2:	0e 94 ab 04 	call	0x956	; 0x956 <strnlen>
 6c6:	3c 01       	movw	r6, r24
 6c8:	82 01       	movw	r16, r4
 6ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 6cc:	6f e7       	ldi	r22, 0x7F	; 127
 6ce:	26 2e       	mov	r2, r22
 6d0:	22 22       	and	r2, r18
 6d2:	18 c0       	rjmp	.+48     	; 0x704 <vfprintf+0x17e>
 6d4:	28 01       	movw	r4, r16
 6d6:	f2 e0       	ldi	r31, 0x02	; 2
 6d8:	4f 0e       	add	r4, r31
 6da:	51 1c       	adc	r5, r1
 6dc:	f8 01       	movw	r30, r16
 6de:	a0 80       	ld	r10, Z
 6e0:	b1 80       	ldd	r11, Z+1	; 0x01
 6e2:	26 ff       	sbrs	r18, 6
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <vfprintf+0x166>
 6e6:	67 2d       	mov	r22, r7
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0x16a>
 6ec:	6f ef       	ldi	r22, 0xFF	; 255
 6ee:	7f ef       	ldi	r23, 0xFF	; 255
 6f0:	c5 01       	movw	r24, r10
 6f2:	2c 87       	std	Y+12, r18	; 0x0c
 6f4:	0e 94 a0 04 	call	0x940	; 0x940 <strnlen_P>
 6f8:	3c 01       	movw	r6, r24
 6fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 6fc:	50 e8       	ldi	r21, 0x80	; 128
 6fe:	25 2e       	mov	r2, r21
 700:	22 2a       	or	r2, r18
 702:	82 01       	movw	r16, r4
 704:	23 fc       	sbrc	r2, 3
 706:	1c c0       	rjmp	.+56     	; 0x740 <vfprintf+0x1ba>
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0x190>
 70a:	b7 01       	movw	r22, r14
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 714:	3a 94       	dec	r3
 716:	83 2d       	mov	r24, r3
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	68 16       	cp	r6, r24
 71c:	79 06       	cpc	r7, r25
 71e:	a8 f3       	brcs	.-22     	; 0x70a <vfprintf+0x184>
 720:	0f c0       	rjmp	.+30     	; 0x740 <vfprintf+0x1ba>
 722:	f5 01       	movw	r30, r10
 724:	27 fc       	sbrc	r2, 7
 726:	85 91       	lpm	r24, Z+
 728:	27 fe       	sbrs	r2, 7
 72a:	81 91       	ld	r24, Z+
 72c:	5f 01       	movw	r10, r30
 72e:	b7 01       	movw	r22, r14
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 736:	31 10       	cpse	r3, r1
 738:	3a 94       	dec	r3
 73a:	f1 e0       	ldi	r31, 0x01	; 1
 73c:	6f 1a       	sub	r6, r31
 73e:	71 08       	sbc	r7, r1
 740:	61 14       	cp	r6, r1
 742:	71 04       	cpc	r7, r1
 744:	71 f7       	brne	.-36     	; 0x722 <vfprintf+0x19c>
 746:	ee c0       	rjmp	.+476    	; 0x924 <__stack+0x25>
 748:	84 36       	cpi	r24, 0x64	; 100
 74a:	11 f0       	breq	.+4      	; 0x750 <vfprintf+0x1ca>
 74c:	89 36       	cpi	r24, 0x69	; 105
 74e:	41 f5       	brne	.+80     	; 0x7a0 <vfprintf+0x21a>
 750:	f8 01       	movw	r30, r16
 752:	27 ff       	sbrs	r18, 7
 754:	07 c0       	rjmp	.+14     	; 0x764 <vfprintf+0x1de>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	0c 5f       	subi	r16, 0xFC	; 252
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	08 c0       	rjmp	.+16     	; 0x774 <vfprintf+0x1ee>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	88 27       	eor	r24, r24
 76a:	77 fd       	sbrc	r23, 7
 76c:	80 95       	com	r24
 76e:	98 2f       	mov	r25, r24
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	4f e6       	ldi	r20, 0x6F	; 111
 776:	64 2e       	mov	r6, r20
 778:	62 22       	and	r6, r18
 77a:	97 ff       	sbrs	r25, 7
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x20a>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	f0 e8       	ldi	r31, 0x80	; 128
 78e:	6f 2a       	or	r6, r31
 790:	2a e0       	ldi	r18, 0x0A	; 10
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	a4 01       	movw	r20, r8
 796:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__ultoa_invert>
 79a:	a8 2e       	mov	r10, r24
 79c:	a8 18       	sub	r10, r8
 79e:	44 c0       	rjmp	.+136    	; 0x828 <vfprintf+0x2a2>
 7a0:	85 37       	cpi	r24, 0x75	; 117
 7a2:	31 f4       	brne	.+12     	; 0x7b0 <vfprintf+0x22a>
 7a4:	3f ee       	ldi	r19, 0xEF	; 239
 7a6:	b3 2e       	mov	r11, r19
 7a8:	b2 22       	and	r11, r18
 7aa:	2a e0       	ldi	r18, 0x0A	; 10
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	24 c0       	rjmp	.+72     	; 0x7f8 <vfprintf+0x272>
 7b0:	99 ef       	ldi	r25, 0xF9	; 249
 7b2:	b9 2e       	mov	r11, r25
 7b4:	b2 22       	and	r11, r18
 7b6:	8f 36       	cpi	r24, 0x6F	; 111
 7b8:	b9 f0       	breq	.+46     	; 0x7e8 <vfprintf+0x262>
 7ba:	20 f4       	brcc	.+8      	; 0x7c4 <vfprintf+0x23e>
 7bc:	88 35       	cpi	r24, 0x58	; 88
 7be:	09 f0       	breq	.+2      	; 0x7c2 <vfprintf+0x23c>
 7c0:	b4 c0       	rjmp	.+360    	; 0x92a <__stack+0x2b>
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <vfprintf+0x258>
 7c4:	80 37       	cpi	r24, 0x70	; 112
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <vfprintf+0x24a>
 7c8:	88 37       	cpi	r24, 0x78	; 120
 7ca:	09 f0       	breq	.+2      	; 0x7ce <vfprintf+0x248>
 7cc:	ae c0       	rjmp	.+348    	; 0x92a <__stack+0x2b>
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x24e>
 7d0:	20 e1       	ldi	r18, 0x10	; 16
 7d2:	b2 2a       	or	r11, r18
 7d4:	b4 fe       	sbrs	r11, 4
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <vfprintf+0x268>
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	b8 2a       	or	r11, r24
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <vfprintf+0x268>
 7de:	24 ff       	sbrs	r18, 4
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x26e>
 7e2:	e6 e0       	ldi	r30, 0x06	; 6
 7e4:	be 2a       	or	r11, r30
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x26e>
 7e8:	28 e0       	ldi	r18, 0x08	; 8
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <vfprintf+0x272>
 7ee:	20 e1       	ldi	r18, 0x10	; 16
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x272>
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	32 e0       	ldi	r19, 0x02	; 2
 7f8:	f8 01       	movw	r30, r16
 7fa:	b7 fe       	sbrs	r11, 7
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <vfprintf+0x286>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x292>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	a4 01       	movw	r20, r8
 81a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__ultoa_invert>
 81e:	a8 2e       	mov	r10, r24
 820:	a8 18       	sub	r10, r8
 822:	8f e7       	ldi	r24, 0x7F	; 127
 824:	68 2e       	mov	r6, r24
 826:	6b 20       	and	r6, r11
 828:	66 fe       	sbrs	r6, 6
 82a:	0b c0       	rjmp	.+22     	; 0x842 <vfprintf+0x2bc>
 82c:	36 2d       	mov	r19, r6
 82e:	3e 7f       	andi	r19, 0xFE	; 254
 830:	a7 14       	cp	r10, r7
 832:	50 f4       	brcc	.+20     	; 0x848 <vfprintf+0x2c2>
 834:	64 fe       	sbrs	r6, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <vfprintf+0x2c6>
 838:	62 fc       	sbrc	r6, 2
 83a:	08 c0       	rjmp	.+16     	; 0x84c <vfprintf+0x2c6>
 83c:	36 2d       	mov	r19, r6
 83e:	3e 7e       	andi	r19, 0xEE	; 238
 840:	05 c0       	rjmp	.+10     	; 0x84c <vfprintf+0x2c6>
 842:	ba 2c       	mov	r11, r10
 844:	36 2d       	mov	r19, r6
 846:	03 c0       	rjmp	.+6      	; 0x84e <vfprintf+0x2c8>
 848:	ba 2c       	mov	r11, r10
 84a:	01 c0       	rjmp	.+2      	; 0x84e <vfprintf+0x2c8>
 84c:	b7 2c       	mov	r11, r7
 84e:	34 ff       	sbrs	r19, 4
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x2e6>
 852:	fe 01       	movw	r30, r28
 854:	ea 0d       	add	r30, r10
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	80 33       	cpi	r24, 0x30	; 48
 85c:	11 f4       	brne	.+4      	; 0x862 <vfprintf+0x2dc>
 85e:	39 7e       	andi	r19, 0xE9	; 233
 860:	09 c0       	rjmp	.+18     	; 0x874 <vfprintf+0x2ee>
 862:	32 ff       	sbrs	r19, 2
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x2ec>
 866:	b3 94       	inc	r11
 868:	b3 94       	inc	r11
 86a:	04 c0       	rjmp	.+8      	; 0x874 <vfprintf+0x2ee>
 86c:	83 2f       	mov	r24, r19
 86e:	86 78       	andi	r24, 0x86	; 134
 870:	09 f0       	breq	.+2      	; 0x874 <vfprintf+0x2ee>
 872:	b3 94       	inc	r11
 874:	33 fd       	sbrc	r19, 3
 876:	14 c0       	rjmp	.+40     	; 0x8a0 <vfprintf+0x31a>
 878:	30 ff       	sbrs	r19, 0
 87a:	0f c0       	rjmp	.+30     	; 0x89a <vfprintf+0x314>
 87c:	7a 2c       	mov	r7, r10
 87e:	b3 14       	cp	r11, r3
 880:	60 f4       	brcc	.+24     	; 0x89a <vfprintf+0x314>
 882:	73 0c       	add	r7, r3
 884:	7b 18       	sub	r7, r11
 886:	b3 2c       	mov	r11, r3
 888:	08 c0       	rjmp	.+16     	; 0x89a <vfprintf+0x314>
 88a:	b7 01       	movw	r22, r14
 88c:	80 e2       	ldi	r24, 0x20	; 32
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	3c 87       	std	Y+12, r19	; 0x0c
 892:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 896:	b3 94       	inc	r11
 898:	3c 85       	ldd	r19, Y+12	; 0x0c
 89a:	b3 14       	cp	r11, r3
 89c:	b0 f3       	brcs	.-20     	; 0x88a <vfprintf+0x304>
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <vfprintf+0x322>
 8a0:	b3 14       	cp	r11, r3
 8a2:	10 f4       	brcc	.+4      	; 0x8a8 <vfprintf+0x322>
 8a4:	3b 18       	sub	r3, r11
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <vfprintf+0x324>
 8a8:	31 2c       	mov	r3, r1
 8aa:	34 ff       	sbrs	r19, 4
 8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <vfprintf+0x34c>
 8ae:	b7 01       	movw	r22, r14
 8b0:	80 e3       	ldi	r24, 0x30	; 48
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	3c 87       	std	Y+12, r19	; 0x0c
 8b6:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8ba:	3c 85       	ldd	r19, Y+12	; 0x0c
 8bc:	32 ff       	sbrs	r19, 2
 8be:	1e c0       	rjmp	.+60     	; 0x8fc <vfprintf+0x376>
 8c0:	31 ff       	sbrs	r19, 1
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x344>
 8c4:	88 e5       	ldi	r24, 0x58	; 88
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x348>
 8ca:	88 e7       	ldi	r24, 0x78	; 120
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	b7 01       	movw	r22, r14
 8d0:	0c c0       	rjmp	.+24     	; 0x8ea <vfprintf+0x364>
 8d2:	83 2f       	mov	r24, r19
 8d4:	86 78       	andi	r24, 0x86	; 134
 8d6:	91 f0       	breq	.+36     	; 0x8fc <vfprintf+0x376>
 8d8:	31 fd       	sbrc	r19, 1
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x35a>
 8dc:	80 e2       	ldi	r24, 0x20	; 32
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <vfprintf+0x35c>
 8e0:	8b e2       	ldi	r24, 0x2B	; 43
 8e2:	37 fd       	sbrc	r19, 7
 8e4:	8d e2       	ldi	r24, 0x2D	; 45
 8e6:	b7 01       	movw	r22, r14
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x376>
 8f0:	b7 01       	movw	r22, r14
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8fa:	7a 94       	dec	r7
 8fc:	a7 14       	cp	r10, r7
 8fe:	c0 f3       	brcs	.-16     	; 0x8f0 <vfprintf+0x36a>
 900:	aa 94       	dec	r10
 902:	f4 01       	movw	r30, r8
 904:	ea 0d       	add	r30, r10
 906:	f1 1d       	adc	r31, r1
 908:	b7 01       	movw	r22, r14
 90a:	80 81       	ld	r24, Z
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 912:	a1 10       	cpse	r10, r1
 914:	f5 cf       	rjmp	.-22     	; 0x900 <__stack+0x1>
 916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0x25>
 918:	b7 01       	movw	r22, r14
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 922:	3a 94       	dec	r3
 924:	31 10       	cpse	r3, r1
 926:	f8 cf       	rjmp	.-16     	; 0x918 <__stack+0x19>
 928:	42 ce       	rjmp	.-892    	; 0x5ae <vfprintf+0x28>
 92a:	f7 01       	movw	r30, r14
 92c:	26 81       	ldd	r18, Z+6	; 0x06
 92e:	37 81       	ldd	r19, Z+7	; 0x07
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	3f ef       	ldi	r19, 0xFF	; 255
 936:	c9 01       	movw	r24, r18
 938:	2c 96       	adiw	r28, 0x0c	; 12
 93a:	e2 e1       	ldi	r30, 0x12	; 18
 93c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__epilogue_restores__>

00000940 <strnlen_P>:
 940:	fc 01       	movw	r30, r24
 942:	05 90       	lpm	r0, Z+
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 10       	cpse	r0, r1
 94a:	d8 f7       	brcc	.-10     	; 0x942 <strnlen_P+0x2>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	8e 0f       	add	r24, r30
 952:	9f 1f       	adc	r25, r31
 954:	08 95       	ret

00000956 <strnlen>:
 956:	fc 01       	movw	r30, r24
 958:	61 50       	subi	r22, 0x01	; 1
 95a:	70 40       	sbci	r23, 0x00	; 0
 95c:	01 90       	ld	r0, Z+
 95e:	01 10       	cpse	r0, r1
 960:	d8 f7       	brcc	.-10     	; 0x958 <strnlen+0x2>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	8e 0f       	add	r24, r30
 968:	9f 1f       	adc	r25, r31
 96a:	08 95       	ret

0000096c <fputc>:
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	8c 01       	movw	r16, r24
 976:	eb 01       	movw	r28, r22
 978:	8b 81       	ldd	r24, Y+3	; 0x03
 97a:	81 fd       	sbrc	r24, 1
 97c:	03 c0       	rjmp	.+6      	; 0x984 <fputc+0x18>
 97e:	0f ef       	ldi	r16, 0xFF	; 255
 980:	1f ef       	ldi	r17, 0xFF	; 255
 982:	1a c0       	rjmp	.+52     	; 0x9b8 <fputc+0x4c>
 984:	82 ff       	sbrs	r24, 2
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <fputc+0x36>
 988:	2e 81       	ldd	r18, Y+6	; 0x06
 98a:	3f 81       	ldd	r19, Y+7	; 0x07
 98c:	8c 81       	ldd	r24, Y+4	; 0x04
 98e:	9d 81       	ldd	r25, Y+5	; 0x05
 990:	28 17       	cp	r18, r24
 992:	39 07       	cpc	r19, r25
 994:	64 f4       	brge	.+24     	; 0x9ae <fputc+0x42>
 996:	e8 81       	ld	r30, Y
 998:	f9 81       	ldd	r31, Y+1	; 0x01
 99a:	01 93       	st	Z+, r16
 99c:	f9 83       	std	Y+1, r31	; 0x01
 99e:	e8 83       	st	Y, r30
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <fputc+0x42>
 9a2:	e8 85       	ldd	r30, Y+8	; 0x08
 9a4:	f9 85       	ldd	r31, Y+9	; 0x09
 9a6:	80 2f       	mov	r24, r16
 9a8:	09 95       	icall
 9aa:	89 2b       	or	r24, r25
 9ac:	41 f7       	brne	.-48     	; 0x97e <fputc+0x12>
 9ae:	8e 81       	ldd	r24, Y+6	; 0x06
 9b0:	9f 81       	ldd	r25, Y+7	; 0x07
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	9f 83       	std	Y+7, r25	; 0x07
 9b6:	8e 83       	std	Y+6, r24	; 0x06
 9b8:	c8 01       	movw	r24, r16
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <__ultoa_invert>:
 9c4:	fa 01       	movw	r30, r20
 9c6:	aa 27       	eor	r26, r26
 9c8:	28 30       	cpi	r18, 0x08	; 8
 9ca:	51 f1       	breq	.+84     	; 0xa20 <__ultoa_invert+0x5c>
 9cc:	20 31       	cpi	r18, 0x10	; 16
 9ce:	81 f1       	breq	.+96     	; 0xa30 <__ultoa_invert+0x6c>
 9d0:	e8 94       	clt
 9d2:	6f 93       	push	r22
 9d4:	6e 7f       	andi	r22, 0xFE	; 254
 9d6:	6e 5f       	subi	r22, 0xFE	; 254
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	af 4f       	sbci	r26, 0xFF	; 255
 9e0:	b1 e0       	ldi	r27, 0x01	; 1
 9e2:	3e d0       	rcall	.+124    	; 0xa60 <__ultoa_invert+0x9c>
 9e4:	b4 e0       	ldi	r27, 0x04	; 4
 9e6:	3c d0       	rcall	.+120    	; 0xa60 <__ultoa_invert+0x9c>
 9e8:	67 0f       	add	r22, r23
 9ea:	78 1f       	adc	r23, r24
 9ec:	89 1f       	adc	r24, r25
 9ee:	9a 1f       	adc	r25, r26
 9f0:	a1 1d       	adc	r26, r1
 9f2:	68 0f       	add	r22, r24
 9f4:	79 1f       	adc	r23, r25
 9f6:	8a 1f       	adc	r24, r26
 9f8:	91 1d       	adc	r25, r1
 9fa:	a1 1d       	adc	r26, r1
 9fc:	6a 0f       	add	r22, r26
 9fe:	71 1d       	adc	r23, r1
 a00:	81 1d       	adc	r24, r1
 a02:	91 1d       	adc	r25, r1
 a04:	a1 1d       	adc	r26, r1
 a06:	20 d0       	rcall	.+64     	; 0xa48 <__ultoa_invert+0x84>
 a08:	09 f4       	brne	.+2      	; 0xa0c <__ultoa_invert+0x48>
 a0a:	68 94       	set
 a0c:	3f 91       	pop	r19
 a0e:	2a e0       	ldi	r18, 0x0A	; 10
 a10:	26 9f       	mul	r18, r22
 a12:	11 24       	eor	r1, r1
 a14:	30 19       	sub	r19, r0
 a16:	30 5d       	subi	r19, 0xD0	; 208
 a18:	31 93       	st	Z+, r19
 a1a:	de f6       	brtc	.-74     	; 0x9d2 <__ultoa_invert+0xe>
 a1c:	cf 01       	movw	r24, r30
 a1e:	08 95       	ret
 a20:	46 2f       	mov	r20, r22
 a22:	47 70       	andi	r20, 0x07	; 7
 a24:	40 5d       	subi	r20, 0xD0	; 208
 a26:	41 93       	st	Z+, r20
 a28:	b3 e0       	ldi	r27, 0x03	; 3
 a2a:	0f d0       	rcall	.+30     	; 0xa4a <__ultoa_invert+0x86>
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__ultoa_invert+0x5c>
 a2e:	f6 cf       	rjmp	.-20     	; 0xa1c <__ultoa_invert+0x58>
 a30:	46 2f       	mov	r20, r22
 a32:	4f 70       	andi	r20, 0x0F	; 15
 a34:	40 5d       	subi	r20, 0xD0	; 208
 a36:	4a 33       	cpi	r20, 0x3A	; 58
 a38:	18 f0       	brcs	.+6      	; 0xa40 <__ultoa_invert+0x7c>
 a3a:	49 5d       	subi	r20, 0xD9	; 217
 a3c:	31 fd       	sbrc	r19, 1
 a3e:	40 52       	subi	r20, 0x20	; 32
 a40:	41 93       	st	Z+, r20
 a42:	02 d0       	rcall	.+4      	; 0xa48 <__ultoa_invert+0x84>
 a44:	a9 f7       	brne	.-22     	; 0xa30 <__ultoa_invert+0x6c>
 a46:	ea cf       	rjmp	.-44     	; 0xa1c <__ultoa_invert+0x58>
 a48:	b4 e0       	ldi	r27, 0x04	; 4
 a4a:	a6 95       	lsr	r26
 a4c:	97 95       	ror	r25
 a4e:	87 95       	ror	r24
 a50:	77 95       	ror	r23
 a52:	67 95       	ror	r22
 a54:	ba 95       	dec	r27
 a56:	c9 f7       	brne	.-14     	; 0xa4a <__ultoa_invert+0x86>
 a58:	00 97       	sbiw	r24, 0x00	; 0
 a5a:	61 05       	cpc	r22, r1
 a5c:	71 05       	cpc	r23, r1
 a5e:	08 95       	ret
 a60:	9b 01       	movw	r18, r22
 a62:	ac 01       	movw	r20, r24
 a64:	0a 2e       	mov	r0, r26
 a66:	06 94       	lsr	r0
 a68:	57 95       	ror	r21
 a6a:	47 95       	ror	r20
 a6c:	37 95       	ror	r19
 a6e:	27 95       	ror	r18
 a70:	ba 95       	dec	r27
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__ultoa_invert+0xa2>
 a74:	62 0f       	add	r22, r18
 a76:	73 1f       	adc	r23, r19
 a78:	84 1f       	adc	r24, r20
 a7a:	95 1f       	adc	r25, r21
 a7c:	a0 1d       	adc	r26, r0
 a7e:	08 95       	ret

00000a80 <__prologue_saves__>:
 a80:	2f 92       	push	r2
 a82:	3f 92       	push	r3
 a84:	4f 92       	push	r4
 a86:	5f 92       	push	r5
 a88:	6f 92       	push	r6
 a8a:	7f 92       	push	r7
 a8c:	8f 92       	push	r8
 a8e:	9f 92       	push	r9
 a90:	af 92       	push	r10
 a92:	bf 92       	push	r11
 a94:	cf 92       	push	r12
 a96:	df 92       	push	r13
 a98:	ef 92       	push	r14
 a9a:	ff 92       	push	r15
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
 aa8:	ca 1b       	sub	r28, r26
 aaa:	db 0b       	sbc	r29, r27
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	f8 94       	cli
 ab0:	de bf       	out	0x3e, r29	; 62
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	cd bf       	out	0x3d, r28	; 61
 ab6:	09 94       	ijmp

00000ab8 <__epilogue_restores__>:
 ab8:	2a 88       	ldd	r2, Y+18	; 0x12
 aba:	39 88       	ldd	r3, Y+17	; 0x11
 abc:	48 88       	ldd	r4, Y+16	; 0x10
 abe:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aca:	b9 84       	ldd	r11, Y+9	; 0x09
 acc:	c8 84       	ldd	r12, Y+8	; 0x08
 ace:	df 80       	ldd	r13, Y+7	; 0x07
 ad0:	ee 80       	ldd	r14, Y+6	; 0x06
 ad2:	fd 80       	ldd	r15, Y+5	; 0x05
 ad4:	0c 81       	ldd	r16, Y+4	; 0x04
 ad6:	1b 81       	ldd	r17, Y+3	; 0x03
 ad8:	aa 81       	ldd	r26, Y+2	; 0x02
 ada:	b9 81       	ldd	r27, Y+1	; 0x01
 adc:	ce 0f       	add	r28, r30
 ade:	d1 1d       	adc	r29, r1
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	f8 94       	cli
 ae4:	de bf       	out	0x3e, r29	; 62
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	cd bf       	out	0x3d, r28	; 61
 aea:	ed 01       	movw	r28, r26
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
