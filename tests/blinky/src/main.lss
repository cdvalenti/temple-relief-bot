
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001200  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cd2  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 13 01 	call	0x226	; 0x226 <main>
  78:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
  80:	81 34       	cpi	r24, 0x41	; 65
  82:	31 f1       	breq	.+76     	; 0xd0 <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
  84:	82 34       	cpi	r24, 0x42	; 66
  86:	59 f4       	brne	.+22     	; 0x9e <toggle+0x1e>
      PORTB ^= (1<<bit);
  88:	25 b1       	in	r18, 0x05	; 5
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	06 2e       	mov	r0, r22
  90:	01 c0       	rjmp	.+2      	; 0x94 <toggle+0x14>
  92:	88 0f       	add	r24, r24
  94:	0a 94       	dec	r0
  96:	ea f7       	brpl	.-6      	; 0x92 <toggle+0x12>
  98:	28 27       	eor	r18, r24
  9a:	25 b9       	out	0x05, r18	; 5
  9c:	08 95       	ret
    }else if (port == 'C'){
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	59 f4       	brne	.+22     	; 0xb8 <toggle+0x38>
      PORTC ^= (1<<bit);
  a2:	28 b1       	in	r18, 0x08	; 8
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	06 2e       	mov	r0, r22
  aa:	01 c0       	rjmp	.+2      	; 0xae <toggle+0x2e>
  ac:	88 0f       	add	r24, r24
  ae:	0a 94       	dec	r0
  b0:	ea f7       	brpl	.-6      	; 0xac <toggle+0x2c>
  b2:	28 27       	eor	r18, r24
  b4:	28 b9       	out	0x08, r18	; 8
  b6:	08 95       	ret
    }else if (port == 'D'){
  b8:	84 34       	cpi	r24, 0x44	; 68
  ba:	51 f4       	brne	.+20     	; 0xd0 <toggle+0x50>
      PORTD ^= (1<<bit);
  bc:	2b b1       	in	r18, 0x0b	; 11
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	06 2e       	mov	r0, r22
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <toggle+0x48>
  c6:	88 0f       	add	r24, r24
  c8:	0a 94       	dec	r0
  ca:	ea f7       	brpl	.-6      	; 0xc6 <toggle+0x46>
  cc:	28 27       	eor	r18, r24
  ce:	2b b9       	out	0x0b, r18	; 11
  d0:	08 95       	ret

000000d2 <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
  d2:	81 34       	cpi	r24, 0x41	; 65
  d4:	31 f1       	breq	.+76     	; 0x122 <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
  d6:	82 34       	cpi	r24, 0x42	; 66
  d8:	59 f4       	brne	.+22     	; 0xf0 <pin_hi+0x1e>
      PORTB |= (1<<bit);
  da:	25 b1       	in	r18, 0x05	; 5
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	06 2e       	mov	r0, r22
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <pin_hi+0x14>
  e4:	88 0f       	add	r24, r24
  e6:	0a 94       	dec	r0
  e8:	ea f7       	brpl	.-6      	; 0xe4 <pin_hi+0x12>
  ea:	28 2b       	or	r18, r24
  ec:	25 b9       	out	0x05, r18	; 5
  ee:	08 95       	ret
    }else if (port == 'C'){
  f0:	83 34       	cpi	r24, 0x43	; 67
  f2:	59 f4       	brne	.+22     	; 0x10a <pin_hi+0x38>
      PORTC |= (1<<bit);
  f4:	28 b1       	in	r18, 0x08	; 8
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	06 2e       	mov	r0, r22
  fc:	01 c0       	rjmp	.+2      	; 0x100 <pin_hi+0x2e>
  fe:	88 0f       	add	r24, r24
 100:	0a 94       	dec	r0
 102:	ea f7       	brpl	.-6      	; 0xfe <pin_hi+0x2c>
 104:	28 2b       	or	r18, r24
 106:	28 b9       	out	0x08, r18	; 8
 108:	08 95       	ret
    }else if (port == 'D'){
 10a:	84 34       	cpi	r24, 0x44	; 68
 10c:	51 f4       	brne	.+20     	; 0x122 <pin_hi+0x50>
      PORTD |= (1<<bit);
 10e:	2b b1       	in	r18, 0x0b	; 11
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	06 2e       	mov	r0, r22
 116:	01 c0       	rjmp	.+2      	; 0x11a <pin_hi+0x48>
 118:	88 0f       	add	r24, r24
 11a:	0a 94       	dec	r0
 11c:	ea f7       	brpl	.-6      	; 0x118 <pin_hi+0x46>
 11e:	28 2b       	or	r18, r24
 120:	2b b9       	out	0x0b, r18	; 11
 122:	08 95       	ret

00000124 <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 124:	81 34       	cpi	r24, 0x41	; 65
 126:	49 f1       	breq	.+82     	; 0x17a <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 128:	82 34       	cpi	r24, 0x42	; 66
 12a:	61 f4       	brne	.+24     	; 0x144 <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 12c:	25 b1       	in	r18, 0x05	; 5
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	06 2e       	mov	r0, r22
 134:	01 c0       	rjmp	.+2      	; 0x138 <pin_lo+0x14>
 136:	88 0f       	add	r24, r24
 138:	0a 94       	dec	r0
 13a:	ea f7       	brpl	.-6      	; 0x136 <pin_lo+0x12>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret
    }else if (port == 'C'){
 144:	83 34       	cpi	r24, 0x43	; 67
 146:	61 f4       	brne	.+24     	; 0x160 <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 148:	28 b1       	in	r18, 0x08	; 8
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	06 2e       	mov	r0, r22
 150:	01 c0       	rjmp	.+2      	; 0x154 <pin_lo+0x30>
 152:	88 0f       	add	r24, r24
 154:	0a 94       	dec	r0
 156:	ea f7       	brpl	.-6      	; 0x152 <pin_lo+0x2e>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	08 95       	ret
    }else if (port == 'D'){
 160:	84 34       	cpi	r24, 0x44	; 68
 162:	59 f4       	brne	.+22     	; 0x17a <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 164:	2b b1       	in	r18, 0x0b	; 11
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	06 2e       	mov	r0, r22
 16c:	01 c0       	rjmp	.+2      	; 0x170 <pin_lo+0x4c>
 16e:	88 0f       	add	r24, r24
 170:	0a 94       	dec	r0
 172:	ea f7       	brpl	.-6      	; 0x16e <pin_lo+0x4a>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	08 95       	ret

0000017c <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 17c:	81 34       	cpi	r24, 0x41	; 65
 17e:	49 f1       	breq	.+82     	; 0x1d2 <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	61 f4       	brne	.+24     	; 0x19c <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 184:	24 b1       	in	r18, 0x04	; 4
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	06 2e       	mov	r0, r22
 18c:	01 c0       	rjmp	.+2      	; 0x190 <set_as_input+0x14>
 18e:	88 0f       	add	r24, r24
 190:	0a 94       	dec	r0
 192:	ea f7       	brpl	.-6      	; 0x18e <set_as_input+0x12>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	84 b9       	out	0x04, r24	; 4
 19a:	08 95       	ret
    }else if (port == 'C'){
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	61 f4       	brne	.+24     	; 0x1b8 <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 1a0:	27 b1       	in	r18, 0x07	; 7
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	06 2e       	mov	r0, r22
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <set_as_input+0x30>
 1aa:	88 0f       	add	r24, r24
 1ac:	0a 94       	dec	r0
 1ae:	ea f7       	brpl	.-6      	; 0x1aa <set_as_input+0x2e>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	87 b9       	out	0x07, r24	; 7
 1b6:	08 95       	ret
    }else if (port == 'D'){
 1b8:	84 34       	cpi	r24, 0x44	; 68
 1ba:	59 f4       	brne	.+22     	; 0x1d2 <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 1bc:	2a b1       	in	r18, 0x0a	; 10
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	06 2e       	mov	r0, r22
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <set_as_input+0x4c>
 1c6:	88 0f       	add	r24, r24
 1c8:	0a 94       	dec	r0
 1ca:	ea f7       	brpl	.-6      	; 0x1c6 <set_as_input+0x4a>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8a b9       	out	0x0a, r24	; 10
 1d2:	08 95       	ret

000001d4 <set_as_output>:
 1d4:	81 34       	cpi	r24, 0x41	; 65
 1d6:	31 f1       	breq	.+76     	; 0x224 <set_as_output+0x50>
 1d8:	82 34       	cpi	r24, 0x42	; 66
 1da:	59 f4       	brne	.+22     	; 0x1f2 <set_as_output+0x1e>
 1dc:	24 b1       	in	r18, 0x04	; 4
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	06 2e       	mov	r0, r22
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <set_as_output+0x14>
 1e6:	88 0f       	add	r24, r24
 1e8:	0a 94       	dec	r0
 1ea:	ea f7       	brpl	.-6      	; 0x1e6 <set_as_output+0x12>
 1ec:	28 2b       	or	r18, r24
 1ee:	24 b9       	out	0x04, r18	; 4
 1f0:	08 95       	ret
 1f2:	83 34       	cpi	r24, 0x43	; 67
 1f4:	59 f4       	brne	.+22     	; 0x20c <set_as_output+0x38>
 1f6:	27 b1       	in	r18, 0x07	; 7
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	06 2e       	mov	r0, r22
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <set_as_output+0x2e>
 200:	88 0f       	add	r24, r24
 202:	0a 94       	dec	r0
 204:	ea f7       	brpl	.-6      	; 0x200 <set_as_output+0x2c>
 206:	28 2b       	or	r18, r24
 208:	27 b9       	out	0x07, r18	; 7
 20a:	08 95       	ret
 20c:	84 34       	cpi	r24, 0x44	; 68
 20e:	51 f4       	brne	.+20     	; 0x224 <set_as_output+0x50>
 210:	2a b1       	in	r18, 0x0a	; 10
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	06 2e       	mov	r0, r22
 218:	01 c0       	rjmp	.+2      	; 0x21c <set_as_output+0x48>
 21a:	88 0f       	add	r24, r24
 21c:	0a 94       	dec	r0
 21e:	ea f7       	brpl	.-6      	; 0x21a <set_as_output+0x46>
 220:	28 2b       	or	r18, r24
 222:	2a b9       	out	0x0a, r18	; 10
 224:	08 95       	ret

00000226 <main>:

int main(void)
{
  //Setup the I/O for the LED

  set_as_output('B',4);		//Set PortB Pin4 as an output
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_as_output>

  while(1) { //toggle pin4 every half second
	pin_hi('B', 4);	
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 69 00 	call	0xd2	; 0xd2 <pin_hi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e4       	ldi	r24, 0x4F	; 79
 23c:	93 ec       	ldi	r25, 0xC3	; 195
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x18>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x1e>
 244:	00 00       	nop
	_delay_ms(200);
	pin_lo('B', 4);
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	82 e4       	ldi	r24, 0x42	; 66
 24c:	0e 94 92 00 	call	0x124	; 0x124 <pin_lo>
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	20 e7       	ldi	r18, 0x70	; 112
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x30>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x3a>
 260:	00 00       	nop
	_delay_ms(800);
  toggle('B', 4);
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	82 e4       	ldi	r24, 0x42	; 66
 268:	0e 94 40 00 	call	0x80	; 0x80 <toggle>
 26c:	8f e4       	ldi	r24, 0x4F	; 79
 26e:	93 ec       	ldi	r25, 0xC3	; 195
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x4a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x50>
 276:	00 00       	nop
	_delay_ms(200);
  toggle('B', 4);
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 40 00 	call	0x80	; 0x80 <toggle>
 282:	9f ef       	ldi	r25, 0xFF	; 255
 284:	20 e7       	ldi	r18, 0x70	; 112
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	91 50       	subi	r25, 0x01	; 1
 28a:	20 40       	sbci	r18, 0x00	; 0
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x62>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x6c>
 292:	00 00       	nop
 294:	cd cf       	rjmp	.-102    	; 0x230 <main+0xa>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
