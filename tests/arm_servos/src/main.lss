
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000097a  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00002e20  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f3b  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000475f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 28 02 	call	0x450	; 0x450 <main>
  8e:	0c 94 bb 04 	jmp	0x976	; 0x976 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
  96:	81 34       	cpi	r24, 0x41	; 65
  98:	31 f1       	breq	.+76     	; 0xe6 <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
  9a:	82 34       	cpi	r24, 0x42	; 66
  9c:	59 f4       	brne	.+22     	; 0xb4 <toggle+0x1e>
      PORTB ^= (1<<bit);
  9e:	25 b1       	in	r18, 0x05	; 5
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	06 2e       	mov	r0, r22
  a6:	01 c0       	rjmp	.+2      	; 0xaa <toggle+0x14>
  a8:	88 0f       	add	r24, r24
  aa:	0a 94       	dec	r0
  ac:	ea f7       	brpl	.-6      	; 0xa8 <toggle+0x12>
  ae:	28 27       	eor	r18, r24
  b0:	25 b9       	out	0x05, r18	; 5
  b2:	08 95       	ret
    }else if (port == 'C'){
  b4:	83 34       	cpi	r24, 0x43	; 67
  b6:	59 f4       	brne	.+22     	; 0xce <toggle+0x38>
      PORTC ^= (1<<bit);
  b8:	28 b1       	in	r18, 0x08	; 8
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	06 2e       	mov	r0, r22
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <toggle+0x2e>
  c2:	88 0f       	add	r24, r24
  c4:	0a 94       	dec	r0
  c6:	ea f7       	brpl	.-6      	; 0xc2 <toggle+0x2c>
  c8:	28 27       	eor	r18, r24
  ca:	28 b9       	out	0x08, r18	; 8
  cc:	08 95       	ret
    }else if (port == 'D'){
  ce:	84 34       	cpi	r24, 0x44	; 68
  d0:	51 f4       	brne	.+20     	; 0xe6 <toggle+0x50>
      PORTD ^= (1<<bit);
  d2:	2b b1       	in	r18, 0x0b	; 11
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	06 2e       	mov	r0, r22
  da:	01 c0       	rjmp	.+2      	; 0xde <toggle+0x48>
  dc:	88 0f       	add	r24, r24
  de:	0a 94       	dec	r0
  e0:	ea f7       	brpl	.-6      	; 0xdc <toggle+0x46>
  e2:	28 27       	eor	r18, r24
  e4:	2b b9       	out	0x0b, r18	; 11
  e6:	08 95       	ret

000000e8 <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
  e8:	81 34       	cpi	r24, 0x41	; 65
  ea:	31 f1       	breq	.+76     	; 0x138 <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
  ec:	82 34       	cpi	r24, 0x42	; 66
  ee:	59 f4       	brne	.+22     	; 0x106 <pin_hi+0x1e>
      PORTB |= (1<<bit);
  f0:	25 b1       	in	r18, 0x05	; 5
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	06 2e       	mov	r0, r22
  f8:	01 c0       	rjmp	.+2      	; 0xfc <pin_hi+0x14>
  fa:	88 0f       	add	r24, r24
  fc:	0a 94       	dec	r0
  fe:	ea f7       	brpl	.-6      	; 0xfa <pin_hi+0x12>
 100:	28 2b       	or	r18, r24
 102:	25 b9       	out	0x05, r18	; 5
 104:	08 95       	ret
    }else if (port == 'C'){
 106:	83 34       	cpi	r24, 0x43	; 67
 108:	59 f4       	brne	.+22     	; 0x120 <pin_hi+0x38>
      PORTC |= (1<<bit);
 10a:	28 b1       	in	r18, 0x08	; 8
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	06 2e       	mov	r0, r22
 112:	01 c0       	rjmp	.+2      	; 0x116 <pin_hi+0x2e>
 114:	88 0f       	add	r24, r24
 116:	0a 94       	dec	r0
 118:	ea f7       	brpl	.-6      	; 0x114 <pin_hi+0x2c>
 11a:	28 2b       	or	r18, r24
 11c:	28 b9       	out	0x08, r18	; 8
 11e:	08 95       	ret
    }else if (port == 'D'){
 120:	84 34       	cpi	r24, 0x44	; 68
 122:	51 f4       	brne	.+20     	; 0x138 <pin_hi+0x50>
      PORTD |= (1<<bit);
 124:	2b b1       	in	r18, 0x0b	; 11
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	06 2e       	mov	r0, r22
 12c:	01 c0       	rjmp	.+2      	; 0x130 <pin_hi+0x48>
 12e:	88 0f       	add	r24, r24
 130:	0a 94       	dec	r0
 132:	ea f7       	brpl	.-6      	; 0x12e <pin_hi+0x46>
 134:	28 2b       	or	r18, r24
 136:	2b b9       	out	0x0b, r18	; 11
 138:	08 95       	ret

0000013a <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 13a:	81 34       	cpi	r24, 0x41	; 65
 13c:	49 f1       	breq	.+82     	; 0x190 <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 13e:	82 34       	cpi	r24, 0x42	; 66
 140:	61 f4       	brne	.+24     	; 0x15a <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 142:	25 b1       	in	r18, 0x05	; 5
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	06 2e       	mov	r0, r22
 14a:	01 c0       	rjmp	.+2      	; 0x14e <pin_lo+0x14>
 14c:	88 0f       	add	r24, r24
 14e:	0a 94       	dec	r0
 150:	ea f7       	brpl	.-6      	; 0x14c <pin_lo+0x12>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 b9       	out	0x05, r24	; 5
 158:	08 95       	ret
    }else if (port == 'C'){
 15a:	83 34       	cpi	r24, 0x43	; 67
 15c:	61 f4       	brne	.+24     	; 0x176 <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 15e:	28 b1       	in	r18, 0x08	; 8
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	06 2e       	mov	r0, r22
 166:	01 c0       	rjmp	.+2      	; 0x16a <pin_lo+0x30>
 168:	88 0f       	add	r24, r24
 16a:	0a 94       	dec	r0
 16c:	ea f7       	brpl	.-6      	; 0x168 <pin_lo+0x2e>
 16e:	80 95       	com	r24
 170:	82 23       	and	r24, r18
 172:	88 b9       	out	0x08, r24	; 8
 174:	08 95       	ret
    }else if (port == 'D'){
 176:	84 34       	cpi	r24, 0x44	; 68
 178:	59 f4       	brne	.+22     	; 0x190 <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 17a:	2b b1       	in	r18, 0x0b	; 11
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	06 2e       	mov	r0, r22
 182:	01 c0       	rjmp	.+2      	; 0x186 <pin_lo+0x4c>
 184:	88 0f       	add	r24, r24
 186:	0a 94       	dec	r0
 188:	ea f7       	brpl	.-6      	; 0x184 <pin_lo+0x4a>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 192:	81 34       	cpi	r24, 0x41	; 65
 194:	49 f1       	breq	.+82     	; 0x1e8 <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 196:	82 34       	cpi	r24, 0x42	; 66
 198:	61 f4       	brne	.+24     	; 0x1b2 <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 19a:	24 b1       	in	r18, 0x04	; 4
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	06 2e       	mov	r0, r22
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <set_as_input+0x14>
 1a4:	88 0f       	add	r24, r24
 1a6:	0a 94       	dec	r0
 1a8:	ea f7       	brpl	.-6      	; 0x1a4 <set_as_input+0x12>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	84 b9       	out	0x04, r24	; 4
 1b0:	08 95       	ret
    }else if (port == 'C'){
 1b2:	83 34       	cpi	r24, 0x43	; 67
 1b4:	61 f4       	brne	.+24     	; 0x1ce <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 1b6:	27 b1       	in	r18, 0x07	; 7
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	06 2e       	mov	r0, r22
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <set_as_input+0x30>
 1c0:	88 0f       	add	r24, r24
 1c2:	0a 94       	dec	r0
 1c4:	ea f7       	brpl	.-6      	; 0x1c0 <set_as_input+0x2e>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	87 b9       	out	0x07, r24	; 7
 1cc:	08 95       	ret
    }else if (port == 'D'){
 1ce:	84 34       	cpi	r24, 0x44	; 68
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 1d2:	2a b1       	in	r18, 0x0a	; 10
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	06 2e       	mov	r0, r22
 1da:	01 c0       	rjmp	.+2      	; 0x1de <set_as_input+0x4c>
 1dc:	88 0f       	add	r24, r24
 1de:	0a 94       	dec	r0
 1e0:	ea f7       	brpl	.-6      	; 0x1dc <set_as_input+0x4a>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	08 95       	ret

000001ea <set_as_output>:
    }
}

void set_as_output(char port, int bit)
{
    if(port == 'A'){
 1ea:	81 34       	cpi	r24, 0x41	; 65
 1ec:	31 f1       	breq	.+76     	; 0x23a <set_as_output+0x50>
      //DDRA |= (1<<bit);
    }else if (port == 'B'){
 1ee:	82 34       	cpi	r24, 0x42	; 66
 1f0:	59 f4       	brne	.+22     	; 0x208 <set_as_output+0x1e>
      DDRB |= (1<<bit);
 1f2:	24 b1       	in	r18, 0x04	; 4
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	06 2e       	mov	r0, r22
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <set_as_output+0x14>
 1fc:	88 0f       	add	r24, r24
 1fe:	0a 94       	dec	r0
 200:	ea f7       	brpl	.-6      	; 0x1fc <set_as_output+0x12>
 202:	28 2b       	or	r18, r24
 204:	24 b9       	out	0x04, r18	; 4
 206:	08 95       	ret
    }else if (port == 'C'){
 208:	83 34       	cpi	r24, 0x43	; 67
 20a:	59 f4       	brne	.+22     	; 0x222 <set_as_output+0x38>
      DDRC |= (1<<bit);
 20c:	27 b1       	in	r18, 0x07	; 7
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	06 2e       	mov	r0, r22
 214:	01 c0       	rjmp	.+2      	; 0x218 <set_as_output+0x2e>
 216:	88 0f       	add	r24, r24
 218:	0a 94       	dec	r0
 21a:	ea f7       	brpl	.-6      	; 0x216 <set_as_output+0x2c>
 21c:	28 2b       	or	r18, r24
 21e:	27 b9       	out	0x07, r18	; 7
 220:	08 95       	ret
    }else if (port == 'D'){
 222:	84 34       	cpi	r24, 0x44	; 68
 224:	51 f4       	brne	.+20     	; 0x23a <set_as_output+0x50>
      DDRD |= (1<<bit);
 226:	2a b1       	in	r18, 0x0a	; 10
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	06 2e       	mov	r0, r22
 22e:	01 c0       	rjmp	.+2      	; 0x232 <set_as_output+0x48>
 230:	88 0f       	add	r24, r24
 232:	0a 94       	dec	r0
 234:	ea f7       	brpl	.-6      	; 0x230 <set_as_output+0x46>
 236:	28 2b       	or	r18, r24
 238:	2a b9       	out	0x0a, r18	; 10
 23a:	08 95       	ret

0000023c <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 23c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	80 93 c2 00 	sts	0x00C2, r24
 25c:	08 95       	ret

0000025e <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 25e:	90 91 c0 00 	lds	r25, 0x00C0
 262:	95 ff       	sbrs	r25, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <transmitByte>
  UDR0 = data;                                            /* send data */
 266:	80 93 c6 00 	sts	0x00C6, r24
 26a:	08 95       	ret

0000026c <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 26c:	80 91 c0 00 	lds	r24, 0x00C0
 270:	87 ff       	sbrs	r24, 7
 272:	fc cf       	rjmp	.-8      	; 0x26c <receiveByte>
  return UDR0;                                /* return register value */
 274:	80 91 c6 00 	lds	r24, 0x00C6
}
 278:	08 95       	ret

0000027a <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
  uint8_t i = 0;
 282:	10 e0       	ldi	r17, 0x00	; 0
  while (myString[i]) {
 284:	03 c0       	rjmp	.+6      	; 0x28c <printString+0x12>
    transmitByte(myString[i]);
 286:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
    i++;
 28a:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 28c:	fe 01       	movw	r30, r28
 28e:	e1 0f       	add	r30, r17
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	81 11       	cpse	r24, r1
 296:	f7 cf       	rjmp	.-18     	; 0x286 <printString+0xc>
    transmitByte(myString[i]);
    i++;
  }
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <readString>:

void readString(char myString[], uint8_t maxLength) {
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	8c 01       	movw	r16, r24
  char response;
  uint8_t i;
  i = 0;
 2b2:	d1 2c       	mov	r13, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 2b4:	c6 2f       	mov	r28, r22
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	21 97       	sbiw	r28, 0x01	; 1
 2ba:	12 c0       	rjmp	.+36     	; 0x2e0 <readString+0x40>
    response = receiveByte();
 2bc:	0e 94 36 01 	call	0x26c	; 0x26c <receiveByte>
 2c0:	c8 2e       	mov	r12, r24
    transmitByte(response);                                    /* echo */
 2c2:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	c8 12       	cpse	r12, r24
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <readString+0x36>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 2cc:	f8 01       	movw	r30, r16
 2ce:	ed 0d       	add	r30, r13
 2d0:	f1 1d       	adc	r31, r1
 2d2:	10 82       	st	Z, r1
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <readString+0x4c>
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 2d6:	f8 01       	movw	r30, r16
 2d8:	ee 0d       	add	r30, r14
 2da:	ff 1d       	adc	r31, r15
 2dc:	c0 82       	st	Z, r12
      i++;
 2de:	d3 94       	inc	r13

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 2e0:	ed 2c       	mov	r14, r13
 2e2:	f1 2c       	mov	r15, r1
 2e4:	ec 16       	cp	r14, r28
 2e6:	fd 06       	cpc	r15, r29
 2e8:	4c f3       	brlt	.-46     	; 0x2bc <readString+0x1c>
 2ea:	f0 cf       	rjmp	.-32     	; 0x2cc <readString+0x2c>
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <printByte>:

void printByte(uint8_t byte) {
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 302:	64 e6       	ldi	r22, 0x64	; 100
 304:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__udivmodqi4>
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 30e:	2a e0       	ldi	r18, 0x0A	; 10
 310:	8c 2f       	mov	r24, r28
 312:	62 2f       	mov	r22, r18
 314:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__udivmodqi4>
 318:	c9 2f       	mov	r28, r25
 31a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__udivmodqi4>
 31e:	89 2f       	mov	r24, r25
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 326:	8c 2f       	mov	r24, r28
 328:	80 5d       	subi	r24, 0xD0	; 208
}
 32a:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 32c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

00000330 <printWord>:
}

void printWord(uint16_t word) {
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 33a:	60 e1       	ldi	r22, 0x10	; 16
 33c:	77 e2       	ldi	r23, 0x27	; 39
 33e:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 342:	86 2f       	mov	r24, r22
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 34a:	ce 01       	movw	r24, r28
 34c:	68 ee       	ldi	r22, 0xE8	; 232
 34e:	73 e0       	ldi	r23, 0x03	; 3
 350:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 354:	cb 01       	movw	r24, r22
 356:	0a e0       	ldi	r16, 0x0A	; 10
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	b8 01       	movw	r22, r16
 35c:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 366:	ce 01       	movw	r24, r28
 368:	64 e6       	ldi	r22, 0x64	; 100
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 370:	cb 01       	movw	r24, r22
 372:	b8 01       	movw	r22, r16
 374:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 378:	80 5d       	subi	r24, 0xD0	; 208
 37a:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 37e:	ce 01       	movw	r24, r28
 380:	b8 01       	movw	r22, r16
 382:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 386:	c8 2f       	mov	r28, r24
 388:	cb 01       	movw	r24, r22
 38a:	b8 01       	movw	r22, r16
 38c:	0e 94 85 04 	call	0x90a	; 0x90a <__udivmodhi4>
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 396:	8c 2f       	mov	r24, r28
 398:	80 5d       	subi	r24, 0xD0	; 208
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 3a2:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

000003a6 <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	1f 92       	push	r1
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 3b4:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	01 2e       	mov	r0, r17
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <printBinaryByte+0x1c>
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <printBinaryByte+0x18>
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <printBinaryByte+0x28>
      transmitByte('1');
 3ca:	81 e3       	ldi	r24, 0x31	; 49
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 3ce:	80 e3       	ldi	r24, 0x30	; 48
 3d0:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 3d4:	11 50       	subi	r17, 0x01	; 1
 3d6:	78 f7       	brcc	.-34     	; 0x3b6 <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 3e2:	8a 30       	cpi	r24, 0x0A	; 10
 3e4:	10 f4       	brcc	.+4      	; 0x3ea <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 3ea:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 3ec:	08 95       	ret

000003ee <printHexByte>:

void printHexByte(uint8_t byte) {
 3ee:	cf 93       	push	r28
 3f0:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nibbleToHexCharacter>
 3fa:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nibbleToHexCharacter>
}
 406:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 408:	0c 94 2f 01 	jmp	0x25e	; 0x25e <transmitByte>

0000040c <getNumber>:
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	d0 e3       	ldi	r29, 0x30	; 48
 416:	c0 e3       	ldi	r28, 0x30	; 48
 418:	00 e3       	ldi	r16, 0x30	; 48
 41a:	03 c0       	rjmp	.+6      	; 0x422 <getNumber+0x16>
 41c:	d1 2f       	mov	r29, r17
 41e:	c8 2f       	mov	r28, r24
 420:	09 2f       	mov	r16, r25
 422:	0e 94 36 01 	call	0x26c	; 0x26c <receiveByte>
 426:	18 2f       	mov	r17, r24
 428:	0e 94 2f 01 	call	0x25e	; 0x25e <transmitByte>
 42c:	9c 2f       	mov	r25, r28
 42e:	8d 2f       	mov	r24, r29
 430:	1d 30       	cpi	r17, 0x0D	; 13
 432:	a1 f7       	brne	.-24     	; 0x41c <getNumber+0x10>
 434:	80 5d       	subi	r24, 0xD0	; 208
 436:	94 e6       	ldi	r25, 0x64	; 100
 438:	09 9f       	mul	r16, r25
 43a:	80 0d       	add	r24, r0
 43c:	11 24       	eor	r1, r1
 43e:	9a e0       	ldi	r25, 0x0A	; 10
 440:	c9 9f       	mul	r28, r25
 442:	80 0d       	add	r24, r0
 444:	11 24       	eor	r1, r1
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <main>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	0e 94 1e 01 	call	0x23c	; 0x23c <initUSART>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 3d 01 	call	0x27a	; 0x27a <printString>
 464:	22 9a       	sbi	0x04, 2	; 4
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	82 e4       	ldi	r24, 0x42	; 66
 46c:	0e 94 4b 00 	call	0x96	; 0x96 <toggle>
 470:	8f e4       	ldi	r24, 0x4F	; 79
 472:	93 ec       	ldi	r25, 0xC3	; 195
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <main+0x24>
 478:	00 c0       	rjmp	.+0      	; 0x47a <main+0x2a>
 47a:	00 00       	nop
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	82 e4       	ldi	r24, 0x42	; 66
 482:	0e 94 4b 00 	call	0x96	; 0x96 <toggle>
 486:	ef e4       	ldi	r30, 0x4F	; 79
 488:	f3 ec       	ldi	r31, 0xC3	; 195
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <main+0x3a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x40>
 490:	00 00       	nop
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	82 e4       	ldi	r24, 0x42	; 66
 498:	0e 94 4b 00 	call	0x96	; 0x96 <toggle>
 49c:	8f e4       	ldi	r24, 0x4F	; 79
 49e:	93 ec       	ldi	r25, 0xC3	; 195
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x50>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x56>
 4a6:	00 00       	nop
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	82 e4       	ldi	r24, 0x42	; 66
 4ae:	0e 94 4b 00 	call	0x96	; 0x96 <toggle>
 4b2:	ef e4       	ldi	r30, 0x4F	; 79
 4b4:	f3 ec       	ldi	r31, 0xC3	; 195
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <main+0x66>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <main+0x6c>
 4bc:	00 00       	nop
 4be:	80 91 7c 00 	lds	r24, 0x007C
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	80 93 7c 00 	sts	0x007C, r24
 4c8:	80 91 7a 00 	lds	r24, 0x007A
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	80 93 7a 00 	sts	0x007A, r24
 4d2:	80 91 7a 00 	lds	r24, 0x007A
 4d6:	80 68       	ori	r24, 0x80	; 128
 4d8:	80 93 7a 00 	sts	0x007A, r24
 4dc:	8d b7       	in	r24, 0x3d	; 61
 4de:	9e b7       	in	r25, 0x3e	; 62
 4e0:	80 59       	subi	r24, 0x90	; 144
 4e2:	91 40       	sbci	r25, 0x01	; 1
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	9e bf       	out	0x3e, r25	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	8d bf       	out	0x3d, r24	; 61
 4ee:	0d b7       	in	r16, 0x3d	; 61
 4f0:	1e b7       	in	r17, 0x3e	; 62
 4f2:	0f 5f       	subi	r16, 0xFF	; 255
 4f4:	1f 4f       	sbci	r17, 0xFF	; 255
 4f6:	b0 2e       	mov	r11, r16
 4f8:	a1 2e       	mov	r10, r17
 4fa:	f8 01       	movw	r30, r16
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	8c ed       	ldi	r24, 0xDC	; 220
 500:	95 e0       	ldi	r25, 0x05	; 5
 502:	81 93       	st	Z+, r24
 504:	91 93       	st	Z+, r25
 506:	2f 5f       	subi	r18, 0xFF	; 255
 508:	28 3c       	cpi	r18, 0xC8	; 200
 50a:	d9 f7       	brne	.-10     	; 0x502 <main+0xb2>
 50c:	8c ed       	ldi	r24, 0xDC	; 220
 50e:	95 e0       	ldi	r25, 0x05	; 5
 510:	90 93 89 00 	sts	0x0089, r25
 514:	80 93 88 00 	sts	0x0088, r24
 518:	80 91 80 00 	lds	r24, 0x0080
 51c:	82 60       	ori	r24, 0x02	; 2
 51e:	80 93 80 00 	sts	0x0080, r24
 522:	80 91 81 00 	lds	r24, 0x0081
 526:	88 61       	ori	r24, 0x18	; 24
 528:	80 93 81 00 	sts	0x0081, r24
 52c:	80 91 81 00 	lds	r24, 0x0081
 530:	81 60       	ori	r24, 0x01	; 1
 532:	80 93 81 00 	sts	0x0081, r24
 536:	80 e5       	ldi	r24, 0x50	; 80
 538:	93 ec       	ldi	r25, 0xC3	; 195
 53a:	90 93 87 00 	sts	0x0087, r25
 53e:	80 93 86 00 	sts	0x0086, r24
 542:	80 91 80 00 	lds	r24, 0x0080
 546:	80 68       	ori	r24, 0x80	; 128
 548:	80 93 80 00 	sts	0x0080, r24
 54c:	21 9a       	sbi	0x04, 1	; 4
 54e:	88 ec       	ldi	r24, 0xC8	; 200
 550:	c8 2e       	mov	r12, r24
 552:	d1 2c       	mov	r13, r1
 554:	e1 2c       	mov	r14, r1
 556:	f1 2c       	mov	r15, r1
 558:	80 91 7a 00 	lds	r24, 0x007A
 55c:	80 64       	ori	r24, 0x40	; 64
 55e:	80 93 7a 00 	sts	0x007A, r24
 562:	80 91 7a 00 	lds	r24, 0x007A
 566:	86 fd       	sbrc	r24, 6
 568:	fc cf       	rjmp	.-8      	; 0x562 <main+0x112>
 56a:	60 91 78 00 	lds	r22, 0x0078
 56e:	70 91 79 00 	lds	r23, 0x0079
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 88 03 	call	0x710	; 0x710 <__floatunsisf>
 57a:	21 e7       	ldi	r18, 0x71	; 113
 57c:	3d e3       	ldi	r19, 0x3D	; 61
 57e:	4a ef       	ldi	r20, 0xFA	; 250
 580:	5f e3       	ldi	r21, 0x3F	; 63
 582:	0e 94 16 04 	call	0x82c	; 0x82c <__mulsf3>
 586:	2b 2d       	mov	r18, r11
 588:	3a 2d       	mov	r19, r10
 58a:	a7 ec       	ldi	r26, 0xC7	; 199
 58c:	f9 01       	movw	r30, r18
 58e:	e4 57       	subi	r30, 0x74	; 116
 590:	fe 4f       	sbci	r31, 0xFE	; 254
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	f9 01       	movw	r30, r18
 598:	e2 57       	subi	r30, 0x72	; 114
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	51 83       	std	Z+1, r21	; 0x01
 59e:	40 83       	st	Z, r20
 5a0:	a1 50       	subi	r26, 0x01	; 1
 5a2:	22 50       	subi	r18, 0x02	; 2
 5a4:	31 09       	sbc	r19, r1
 5a6:	a1 11       	cpse	r26, r1
 5a8:	f1 cf       	rjmp	.-30     	; 0x58c <main+0x13c>
 5aa:	20 e0       	ldi	r18, 0x00	; 0
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	4a ef       	ldi	r20, 0xFA	; 250
 5b0:	53 e4       	ldi	r21, 0x43	; 67
 5b2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__addsf3>
 5b6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fixunssfsi>
 5ba:	f8 01       	movw	r30, r16
 5bc:	71 83       	std	Z+1, r23	; 0x01
 5be:	60 83       	st	Z, r22
 5c0:	eb 2d       	mov	r30, r11
 5c2:	fa 2d       	mov	r31, r10
 5c4:	48 ec       	ldi	r20, 0xC8	; 200
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	cb 01       	movw	r24, r22
 5cc:	21 91       	ld	r18, Z+
 5ce:	31 91       	ld	r19, Z+
 5d0:	62 0f       	add	r22, r18
 5d2:	73 1f       	adc	r23, r19
 5d4:	81 1d       	adc	r24, r1
 5d6:	91 1d       	adc	r25, r1
 5d8:	41 50       	subi	r20, 0x01	; 1
 5da:	c1 f7       	brne	.-16     	; 0x5cc <main+0x17c>
 5dc:	a7 01       	movw	r20, r14
 5de:	96 01       	movw	r18, r12
 5e0:	0e 94 99 04 	call	0x932	; 0x932 <__udivmodsi4>
 5e4:	30 93 89 00 	sts	0x0089, r19
 5e8:	20 93 88 00 	sts	0x0088, r18
 5ec:	b5 cf       	rjmp	.-150    	; 0x558 <main+0x108>

000005ee <__subsf3>:
 5ee:	50 58       	subi	r21, 0x80	; 128

000005f0 <__addsf3>:
 5f0:	bb 27       	eor	r27, r27
 5f2:	aa 27       	eor	r26, r26
 5f4:	0e d0       	rcall	.+28     	; 0x612 <__addsf3x>
 5f6:	e0 c0       	rjmp	.+448    	; 0x7b8 <__fp_round>
 5f8:	d1 d0       	rcall	.+418    	; 0x79c <__fp_pscA>
 5fa:	30 f0       	brcs	.+12     	; 0x608 <__addsf3+0x18>
 5fc:	d6 d0       	rcall	.+428    	; 0x7aa <__fp_pscB>
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__addsf3+0x18>
 600:	31 f4       	brne	.+12     	; 0x60e <__addsf3+0x1e>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	11 f4       	brne	.+4      	; 0x60a <__addsf3+0x1a>
 606:	1e f4       	brtc	.+6      	; 0x60e <__addsf3+0x1e>
 608:	c6 c0       	rjmp	.+396    	; 0x796 <__fp_nan>
 60a:	0e f4       	brtc	.+2      	; 0x60e <__addsf3+0x1e>
 60c:	e0 95       	com	r30
 60e:	e7 fb       	bst	r30, 7
 610:	bc c0       	rjmp	.+376    	; 0x78a <__fp_inf>

00000612 <__addsf3x>:
 612:	e9 2f       	mov	r30, r25
 614:	e2 d0       	rcall	.+452    	; 0x7da <__fp_split3>
 616:	80 f3       	brcs	.-32     	; 0x5f8 <__addsf3+0x8>
 618:	ba 17       	cp	r27, r26
 61a:	62 07       	cpc	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	84 07       	cpc	r24, r20
 620:	95 07       	cpc	r25, r21
 622:	18 f0       	brcs	.+6      	; 0x62a <__addsf3x+0x18>
 624:	71 f4       	brne	.+28     	; 0x642 <__addsf3x+0x30>
 626:	9e f5       	brtc	.+102    	; 0x68e <__addsf3x+0x7c>
 628:	fa c0       	rjmp	.+500    	; 0x81e <__fp_zero>
 62a:	0e f4       	brtc	.+2      	; 0x62e <__addsf3x+0x1c>
 62c:	e0 95       	com	r30
 62e:	0b 2e       	mov	r0, r27
 630:	ba 2f       	mov	r27, r26
 632:	a0 2d       	mov	r26, r0
 634:	0b 01       	movw	r0, r22
 636:	b9 01       	movw	r22, r18
 638:	90 01       	movw	r18, r0
 63a:	0c 01       	movw	r0, r24
 63c:	ca 01       	movw	r24, r20
 63e:	a0 01       	movw	r20, r0
 640:	11 24       	eor	r1, r1
 642:	ff 27       	eor	r31, r31
 644:	59 1b       	sub	r21, r25
 646:	99 f0       	breq	.+38     	; 0x66e <__addsf3x+0x5c>
 648:	59 3f       	cpi	r21, 0xF9	; 249
 64a:	50 f4       	brcc	.+20     	; 0x660 <__addsf3x+0x4e>
 64c:	50 3e       	cpi	r21, 0xE0	; 224
 64e:	68 f1       	brcs	.+90     	; 0x6aa <__addsf3x+0x98>
 650:	1a 16       	cp	r1, r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	a2 2f       	mov	r26, r18
 656:	23 2f       	mov	r18, r19
 658:	34 2f       	mov	r19, r20
 65a:	44 27       	eor	r20, r20
 65c:	58 5f       	subi	r21, 0xF8	; 248
 65e:	f3 cf       	rjmp	.-26     	; 0x646 <__addsf3x+0x34>
 660:	46 95       	lsr	r20
 662:	37 95       	ror	r19
 664:	27 95       	ror	r18
 666:	a7 95       	ror	r26
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	53 95       	inc	r21
 66c:	c9 f7       	brne	.-14     	; 0x660 <__addsf3x+0x4e>
 66e:	7e f4       	brtc	.+30     	; 0x68e <__addsf3x+0x7c>
 670:	1f 16       	cp	r1, r31
 672:	ba 0b       	sbc	r27, r26
 674:	62 0b       	sbc	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba f0       	brmi	.+46     	; 0x6aa <__addsf3x+0x98>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	a1 f0       	breq	.+40     	; 0x6a8 <__addsf3x+0x96>
 680:	ff 0f       	add	r31, r31
 682:	bb 1f       	adc	r27, r27
 684:	66 1f       	adc	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	c2 f7       	brpl	.-16     	; 0x67c <__addsf3x+0x6a>
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__addsf3x+0x98>
 68e:	ba 0f       	add	r27, r26
 690:	62 1f       	adc	r22, r18
 692:	73 1f       	adc	r23, r19
 694:	84 1f       	adc	r24, r20
 696:	48 f4       	brcc	.+18     	; 0x6aa <__addsf3x+0x98>
 698:	87 95       	ror	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9e 3f       	cpi	r25, 0xFE	; 254
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0x96>
 6a6:	b3 cf       	rjmp	.-154    	; 0x60e <__addsf3+0x1e>
 6a8:	93 95       	inc	r25
 6aa:	88 0f       	add	r24, r24
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <__addsf3x+0x9e>
 6ae:	99 27       	eor	r25, r25
 6b0:	ee 0f       	add	r30, r30
 6b2:	97 95       	ror	r25
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret

000006b8 <__fixunssfsi>:
 6b8:	98 d0       	rcall	.+304    	; 0x7ea <__fp_splitA>
 6ba:	88 f0       	brcs	.+34     	; 0x6de <__fixunssfsi+0x26>
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	90 f0       	brcs	.+36     	; 0x6e4 <__fixunssfsi+0x2c>
 6c0:	b9 2f       	mov	r27, r25
 6c2:	99 27       	eor	r25, r25
 6c4:	b7 51       	subi	r27, 0x17	; 23
 6c6:	a0 f0       	brcs	.+40     	; 0x6f0 <__fixunssfsi+0x38>
 6c8:	d1 f0       	breq	.+52     	; 0x6fe <__fixunssfsi+0x46>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a f0       	brmi	.+6      	; 0x6da <__fixunssfsi+0x22>
 6d4:	ba 95       	dec	r27
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__fixunssfsi+0x12>
 6d8:	12 c0       	rjmp	.+36     	; 0x6fe <__fixunssfsi+0x46>
 6da:	b1 30       	cpi	r27, 0x01	; 1
 6dc:	81 f0       	breq	.+32     	; 0x6fe <__fixunssfsi+0x46>
 6de:	9f d0       	rcall	.+318    	; 0x81e <__fp_zero>
 6e0:	b1 e0       	ldi	r27, 0x01	; 1
 6e2:	08 95       	ret
 6e4:	9c c0       	rjmp	.+312    	; 0x81e <__fp_zero>
 6e6:	67 2f       	mov	r22, r23
 6e8:	78 2f       	mov	r23, r24
 6ea:	88 27       	eor	r24, r24
 6ec:	b8 5f       	subi	r27, 0xF8	; 248
 6ee:	39 f0       	breq	.+14     	; 0x6fe <__fixunssfsi+0x46>
 6f0:	b9 3f       	cpi	r27, 0xF9	; 249
 6f2:	cc f3       	brlt	.-14     	; 0x6e6 <__fixunssfsi+0x2e>
 6f4:	86 95       	lsr	r24
 6f6:	77 95       	ror	r23
 6f8:	67 95       	ror	r22
 6fa:	b3 95       	inc	r27
 6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__fixunssfsi+0x3c>
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__fixunssfsi+0x56>
 700:	90 95       	com	r25
 702:	80 95       	com	r24
 704:	70 95       	com	r23
 706:	61 95       	neg	r22
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <__floatunsisf>:
 710:	e8 94       	clt
 712:	09 c0       	rjmp	.+18     	; 0x726 <__floatsisf+0x12>

00000714 <__floatsisf>:
 714:	97 fb       	bst	r25, 7
 716:	3e f4       	brtc	.+14     	; 0x726 <__floatsisf+0x12>
 718:	90 95       	com	r25
 71a:	80 95       	com	r24
 71c:	70 95       	com	r23
 71e:	61 95       	neg	r22
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	99 23       	and	r25, r25
 728:	a9 f0       	breq	.+42     	; 0x754 <__floatsisf+0x40>
 72a:	f9 2f       	mov	r31, r25
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	bb 27       	eor	r27, r27
 730:	93 95       	inc	r25
 732:	f6 95       	lsr	r31
 734:	87 95       	ror	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b7 95       	ror	r27
 73c:	f1 11       	cpse	r31, r1
 73e:	f8 cf       	rjmp	.-16     	; 0x730 <__floatsisf+0x1c>
 740:	fa f4       	brpl	.+62     	; 0x780 <__floatsisf+0x6c>
 742:	bb 0f       	add	r27, r27
 744:	11 f4       	brne	.+4      	; 0x74a <__floatsisf+0x36>
 746:	60 ff       	sbrs	r22, 0
 748:	1b c0       	rjmp	.+54     	; 0x780 <__floatsisf+0x6c>
 74a:	6f 5f       	subi	r22, 0xFF	; 255
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	16 c0       	rjmp	.+44     	; 0x780 <__floatsisf+0x6c>
 754:	88 23       	and	r24, r24
 756:	11 f0       	breq	.+4      	; 0x75c <__floatsisf+0x48>
 758:	96 e9       	ldi	r25, 0x96	; 150
 75a:	11 c0       	rjmp	.+34     	; 0x77e <__floatsisf+0x6a>
 75c:	77 23       	and	r23, r23
 75e:	21 f0       	breq	.+8      	; 0x768 <__floatsisf+0x54>
 760:	9e e8       	ldi	r25, 0x8E	; 142
 762:	87 2f       	mov	r24, r23
 764:	76 2f       	mov	r23, r22
 766:	05 c0       	rjmp	.+10     	; 0x772 <__floatsisf+0x5e>
 768:	66 23       	and	r22, r22
 76a:	71 f0       	breq	.+28     	; 0x788 <__floatsisf+0x74>
 76c:	96 e8       	ldi	r25, 0x86	; 134
 76e:	86 2f       	mov	r24, r22
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	2a f0       	brmi	.+10     	; 0x780 <__floatsisf+0x6c>
 776:	9a 95       	dec	r25
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	da f7       	brpl	.-10     	; 0x776 <__floatsisf+0x62>
 780:	88 0f       	add	r24, r24
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret

0000078a <__fp_inf>:
 78a:	97 f9       	bld	r25, 7
 78c:	9f 67       	ori	r25, 0x7F	; 127
 78e:	80 e8       	ldi	r24, 0x80	; 128
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	08 95       	ret

00000796 <__fp_nan>:
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	80 ec       	ldi	r24, 0xC0	; 192
 79a:	08 95       	ret

0000079c <__fp_pscA>:
 79c:	00 24       	eor	r0, r0
 79e:	0a 94       	dec	r0
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	18 06       	cpc	r1, r24
 7a6:	09 06       	cpc	r0, r25
 7a8:	08 95       	ret

000007aa <__fp_pscB>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	14 06       	cpc	r1, r20
 7b4:	05 06       	cpc	r0, r21
 7b6:	08 95       	ret

000007b8 <__fp_round>:
 7b8:	09 2e       	mov	r0, r25
 7ba:	03 94       	inc	r0
 7bc:	00 0c       	add	r0, r0
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__fp_round+0xc>
 7c0:	88 23       	and	r24, r24
 7c2:	52 f0       	brmi	.+20     	; 0x7d8 <__fp_round+0x20>
 7c4:	bb 0f       	add	r27, r27
 7c6:	40 f4       	brcc	.+16     	; 0x7d8 <__fp_round+0x20>
 7c8:	bf 2b       	or	r27, r31
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__fp_round+0x18>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__fp_round+0x20>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	08 95       	ret

000007da <__fp_split3>:
 7da:	57 fd       	sbrc	r21, 7
 7dc:	90 58       	subi	r25, 0x80	; 128
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	59 f0       	breq	.+22     	; 0x7fa <__fp_splitA+0x10>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	71 f0       	breq	.+28     	; 0x804 <__fp_splitA+0x1a>
 7e8:	47 95       	ror	r20

000007ea <__fp_splitA>:
 7ea:	88 0f       	add	r24, r24
 7ec:	97 fb       	bst	r25, 7
 7ee:	99 1f       	adc	r25, r25
 7f0:	61 f0       	breq	.+24     	; 0x80a <__fp_splitA+0x20>
 7f2:	9f 3f       	cpi	r25, 0xFF	; 255
 7f4:	79 f0       	breq	.+30     	; 0x814 <__fp_splitA+0x2a>
 7f6:	87 95       	ror	r24
 7f8:	08 95       	ret
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	55 1f       	adc	r21, r21
 802:	f2 cf       	rjmp	.-28     	; 0x7e8 <__fp_split3+0xe>
 804:	46 95       	lsr	r20
 806:	f1 df       	rcall	.-30     	; 0x7ea <__fp_splitA>
 808:	08 c0       	rjmp	.+16     	; 0x81a <__fp_splitA+0x30>
 80a:	16 16       	cp	r1, r22
 80c:	17 06       	cpc	r1, r23
 80e:	18 06       	cpc	r1, r24
 810:	99 1f       	adc	r25, r25
 812:	f1 cf       	rjmp	.-30     	; 0x7f6 <__fp_splitA+0xc>
 814:	86 95       	lsr	r24
 816:	71 05       	cpc	r23, r1
 818:	61 05       	cpc	r22, r1
 81a:	08 94       	sec
 81c:	08 95       	ret

0000081e <__fp_zero>:
 81e:	e8 94       	clt

00000820 <__fp_szero>:
 820:	bb 27       	eor	r27, r27
 822:	66 27       	eor	r22, r22
 824:	77 27       	eor	r23, r23
 826:	cb 01       	movw	r24, r22
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__mulsf3>:
 82c:	0b d0       	rcall	.+22     	; 0x844 <__mulsf3x>
 82e:	c4 cf       	rjmp	.-120    	; 0x7b8 <__fp_round>
 830:	b5 df       	rcall	.-150    	; 0x79c <__fp_pscA>
 832:	28 f0       	brcs	.+10     	; 0x83e <__mulsf3+0x12>
 834:	ba df       	rcall	.-140    	; 0x7aa <__fp_pscB>
 836:	18 f0       	brcs	.+6      	; 0x83e <__mulsf3+0x12>
 838:	95 23       	and	r25, r21
 83a:	09 f0       	breq	.+2      	; 0x83e <__mulsf3+0x12>
 83c:	a6 cf       	rjmp	.-180    	; 0x78a <__fp_inf>
 83e:	ab cf       	rjmp	.-170    	; 0x796 <__fp_nan>
 840:	11 24       	eor	r1, r1
 842:	ee cf       	rjmp	.-36     	; 0x820 <__fp_szero>

00000844 <__mulsf3x>:
 844:	ca df       	rcall	.-108    	; 0x7da <__fp_split3>
 846:	a0 f3       	brcs	.-24     	; 0x830 <__mulsf3+0x4>

00000848 <__mulsf3_pse>:
 848:	95 9f       	mul	r25, r21
 84a:	d1 f3       	breq	.-12     	; 0x840 <__mulsf3+0x14>
 84c:	95 0f       	add	r25, r21
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	55 1f       	adc	r21, r21
 852:	62 9f       	mul	r22, r18
 854:	f0 01       	movw	r30, r0
 856:	72 9f       	mul	r23, r18
 858:	bb 27       	eor	r27, r27
 85a:	f0 0d       	add	r31, r0
 85c:	b1 1d       	adc	r27, r1
 85e:	63 9f       	mul	r22, r19
 860:	aa 27       	eor	r26, r26
 862:	f0 0d       	add	r31, r0
 864:	b1 1d       	adc	r27, r1
 866:	aa 1f       	adc	r26, r26
 868:	64 9f       	mul	r22, r20
 86a:	66 27       	eor	r22, r22
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	66 1f       	adc	r22, r22
 872:	82 9f       	mul	r24, r18
 874:	22 27       	eor	r18, r18
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	62 1f       	adc	r22, r18
 87c:	73 9f       	mul	r23, r19
 87e:	b0 0d       	add	r27, r0
 880:	a1 1d       	adc	r26, r1
 882:	62 1f       	adc	r22, r18
 884:	83 9f       	mul	r24, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	22 1f       	adc	r18, r18
 88c:	74 9f       	mul	r23, r20
 88e:	33 27       	eor	r19, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	23 1f       	adc	r18, r19
 896:	84 9f       	mul	r24, r20
 898:	60 0d       	add	r22, r0
 89a:	21 1d       	adc	r18, r1
 89c:	82 2f       	mov	r24, r18
 89e:	76 2f       	mov	r23, r22
 8a0:	6a 2f       	mov	r22, r26
 8a2:	11 24       	eor	r1, r1
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	8a f0       	brmi	.+34     	; 0x8cc <__mulsf3_pse+0x84>
 8aa:	e1 f0       	breq	.+56     	; 0x8e4 <__mulsf3_pse+0x9c>
 8ac:	88 23       	and	r24, r24
 8ae:	4a f0       	brmi	.+18     	; 0x8c2 <__mulsf3_pse+0x7a>
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	bb 1f       	adc	r27, r27
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	91 50       	subi	r25, 0x01	; 1
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__mulsf3_pse+0x64>
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	51 05       	cpc	r21, r1
 8c6:	70 f0       	brcs	.+28     	; 0x8e4 <__mulsf3_pse+0x9c>
 8c8:	60 cf       	rjmp	.-320    	; 0x78a <__fp_inf>
 8ca:	aa cf       	rjmp	.-172    	; 0x820 <__fp_szero>
 8cc:	5f 3f       	cpi	r21, 0xFF	; 255
 8ce:	ec f3       	brlt	.-6      	; 0x8ca <__mulsf3_pse+0x82>
 8d0:	98 3e       	cpi	r25, 0xE8	; 232
 8d2:	dc f3       	brlt	.-10     	; 0x8ca <__mulsf3_pse+0x82>
 8d4:	86 95       	lsr	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	b7 95       	ror	r27
 8dc:	f7 95       	ror	r31
 8de:	e7 95       	ror	r30
 8e0:	9f 5f       	subi	r25, 0xFF	; 255
 8e2:	c1 f7       	brne	.-16     	; 0x8d4 <__mulsf3_pse+0x8c>
 8e4:	fe 2b       	or	r31, r30
 8e6:	88 0f       	add	r24, r24
 8e8:	91 1d       	adc	r25, r1
 8ea:	96 95       	lsr	r25
 8ec:	87 95       	ror	r24
 8ee:	97 f9       	bld	r25, 7
 8f0:	08 95       	ret

000008f2 <__udivmodqi4>:
 8f2:	99 1b       	sub	r25, r25
 8f4:	79 e0       	ldi	r23, 0x09	; 9
 8f6:	04 c0       	rjmp	.+8      	; 0x900 <__udivmodqi4_ep>

000008f8 <__udivmodqi4_loop>:
 8f8:	99 1f       	adc	r25, r25
 8fa:	96 17       	cp	r25, r22
 8fc:	08 f0       	brcs	.+2      	; 0x900 <__udivmodqi4_ep>
 8fe:	96 1b       	sub	r25, r22

00000900 <__udivmodqi4_ep>:
 900:	88 1f       	adc	r24, r24
 902:	7a 95       	dec	r23
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__udivmodqi4_loop>
 906:	80 95       	com	r24
 908:	08 95       	ret

0000090a <__udivmodhi4>:
 90a:	aa 1b       	sub	r26, r26
 90c:	bb 1b       	sub	r27, r27
 90e:	51 e1       	ldi	r21, 0x11	; 17
 910:	07 c0       	rjmp	.+14     	; 0x920 <__udivmodhi4_ep>

00000912 <__udivmodhi4_loop>:
 912:	aa 1f       	adc	r26, r26
 914:	bb 1f       	adc	r27, r27
 916:	a6 17       	cp	r26, r22
 918:	b7 07       	cpc	r27, r23
 91a:	10 f0       	brcs	.+4      	; 0x920 <__udivmodhi4_ep>
 91c:	a6 1b       	sub	r26, r22
 91e:	b7 0b       	sbc	r27, r23

00000920 <__udivmodhi4_ep>:
 920:	88 1f       	adc	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	5a 95       	dec	r21
 926:	a9 f7       	brne	.-22     	; 0x912 <__udivmodhi4_loop>
 928:	80 95       	com	r24
 92a:	90 95       	com	r25
 92c:	bc 01       	movw	r22, r24
 92e:	cd 01       	movw	r24, r26
 930:	08 95       	ret

00000932 <__udivmodsi4>:
 932:	a1 e2       	ldi	r26, 0x21	; 33
 934:	1a 2e       	mov	r1, r26
 936:	aa 1b       	sub	r26, r26
 938:	bb 1b       	sub	r27, r27
 93a:	fd 01       	movw	r30, r26
 93c:	0d c0       	rjmp	.+26     	; 0x958 <__udivmodsi4_ep>

0000093e <__udivmodsi4_loop>:
 93e:	aa 1f       	adc	r26, r26
 940:	bb 1f       	adc	r27, r27
 942:	ee 1f       	adc	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	a2 17       	cp	r26, r18
 948:	b3 07       	cpc	r27, r19
 94a:	e4 07       	cpc	r30, r20
 94c:	f5 07       	cpc	r31, r21
 94e:	20 f0       	brcs	.+8      	; 0x958 <__udivmodsi4_ep>
 950:	a2 1b       	sub	r26, r18
 952:	b3 0b       	sbc	r27, r19
 954:	e4 0b       	sbc	r30, r20
 956:	f5 0b       	sbc	r31, r21

00000958 <__udivmodsi4_ep>:
 958:	66 1f       	adc	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	1a 94       	dec	r1
 962:	69 f7       	brne	.-38     	; 0x93e <__udivmodsi4_loop>
 964:	60 95       	com	r22
 966:	70 95       	com	r23
 968:	80 95       	com	r24
 96a:	90 95       	com	r25
 96c:	9b 01       	movw	r18, r22
 96e:	ac 01       	movw	r20, r24
 970:	bd 01       	movw	r22, r26
 972:	cf 01       	movw	r24, r30
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
