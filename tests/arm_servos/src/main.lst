   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  88               		.section	.rodata.str1.1,"aMS",@progbits,1
  89               	.LC0:
  90 0000 5553 4152 		.string	"USART Initialized!\r\n"
  90      5420 496E 
  90      6974 6961 
  90      6C69 7A65 
  90      6421 0D0A 
  91               	.global	__floatunsisf
  92               	.global	__mulsf3
  93               	.global	__addsf3
  94               	.global	__fixunssfsi
  95               		.section	.text.startup,"ax",@progbits
  97               	.global	main
  99               	main:
 100               		.stabd	46,0,0
   1:main.c        **** #define MCU 'atmega328'
   2:main.c        **** #define F_CPU 1000000UL
   3:main.c        **** 
   4:main.c        **** #include <avr/io.h>
   5:main.c        **** #include <avr/interrupt.h>
   6:main.c        **** #include <util/delay.h>
   7:main.c        **** #include "include/easy_atmega328p.h"
   8:main.c        **** #include "include/USART.h"
   9:main.c        **** #include "include/pinDefines.h"
  10:main.c        **** #include <stdio.h>
  11:main.c        **** #include <stdlib.h>
  12:main.c        **** 
  13:main.c        **** static inline void initADC0(void) {
  14:main.c        ****   ADMUX |= (1 << REFS0);                // reference voltage on AVCC
  15:main.c        ****   ADCSRA |= (1 << ADPS2);               // ADC clock prescaler /16
  16:main.c        ****   ADCSRA |= (1 << ADEN);                // enable ADC
  17:main.c        **** }
  18:main.c        **** 
  19:main.c        **** static inline void initTimer1Servo(void) {
  20:main.c        ****                    /* Set up Timer1 (16bit) to give a pulse every 20ms */
  21:main.c        ****                              /* Use Fast PWM mode, counter max in ICR1 */
  22:main.c        ****   TCCR1A |= (1 << WGM11);
  23:main.c        ****   TCCR1B |= (1 << WGM12) | (1 << WGM13);
  24:main.c        ****   TCCR1B |= (1 << CS10);  /* /1 prescaling -- counting in microseconds */
  25:main.c        ****   ICR1 = 50000;                                    /* TOP value = 20ms */
  26:main.c        ****   TCCR1A |= (1 << COM1A1);              /* Direct output on PB1 / OC1A */
  27:main.c        ****   DDRB |= (1 << PB1);                            /* set pin for output */
  28:main.c        **** }
  29:main.c        **** 
  30:main.c        **** int main(void)
  31:main.c        **** {
 102               	.LM0:
 103               	.LFBB1:
 104 0000 CF93      		push r28
 105 0002 DF93      		push r29
 106 0004 CDB7      		in r28,__SP_L__
 107 0006 DEB7      		in r29,__SP_H__
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 2 */
 111               	.L__stack_usage = 2
  32:main.c        ****   //init USART serial connection
  33:main.c        ****   
  34:main.c        ****   initUSART();
 113               	.LM1:
 114 0008 0E94 0000 		call initUSART
  35:main.c        ****   printString("USART Initialized!\r\n");
 116               	.LM2:
 117 000c 80E0      		ldi r24,lo8(.LC0)
 118 000e 90E0      		ldi r25,hi8(.LC0)
 119 0010 0E94 0000 		call printString
  36:main.c        ****   DDRB |= (1 << PB2);
 121               	.LM3:
 122 0014 229A      		sbi 0x4,2
  37:main.c        ****   
  38:main.c        ****   toggle('B', 2);
 124               	.LM4:
 125 0016 62E0      		ldi r22,lo8(2)
 126 0018 70E0      		ldi r23,0
 127 001a 82E4      		ldi r24,lo8(66)
 128 001c 0E94 0000 		call toggle
 129               	.LBB22:
 130               	.LBB23:
 132               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 134               	.LM5:
 135 0020 8FE4      		ldi r24,lo8(-15537)
 136 0022 93EC      		ldi r25,hi8(-15537)
 137 0024 0197      		1: sbiw r24,1
 138 0026 01F4      		brne 1b
 139 0028 00C0      		rjmp .
 140 002a 0000      		nop
 141               	.LBE23:
 142               	.LBE22:
 144               	.Ltext2:
  39:main.c        ****   _delay_ms(200);
  40:main.c        ****   toggle('B', 2);
 146               	.LM6:
 147 002c 62E0      		ldi r22,lo8(2)
 148 002e 70E0      		ldi r23,0
 149 0030 82E4      		ldi r24,lo8(66)
 150 0032 0E94 0000 		call toggle
 151               	.LBB24:
 152               	.LBB25:
 154               	.Ltext3:
 156               	.LM7:
 157 0036 EFE4      		ldi r30,lo8(-15537)
 158 0038 F3EC      		ldi r31,hi8(-15537)
 159 003a 3197      		1: sbiw r30,1
 160 003c 01F4      		brne 1b
 161 003e 00C0      		rjmp .
 162 0040 0000      		nop
 163               	.LBE25:
 164               	.LBE24:
 166               	.Ltext4:
  41:main.c        ****   _delay_ms(200);
  42:main.c        ****   toggle('B', 2);
 168               	.LM8:
 169 0042 62E0      		ldi r22,lo8(2)
 170 0044 70E0      		ldi r23,0
 171 0046 82E4      		ldi r24,lo8(66)
 172 0048 0E94 0000 		call toggle
 173               	.LBB26:
 174               	.LBB27:
 176               	.Ltext5:
 178               	.LM9:
 179 004c 8FE4      		ldi r24,lo8(-15537)
 180 004e 93EC      		ldi r25,hi8(-15537)
 181 0050 0197      		1: sbiw r24,1
 182 0052 01F4      		brne 1b
 183 0054 00C0      		rjmp .
 184 0056 0000      		nop
 185               	.LBE27:
 186               	.LBE26:
 188               	.Ltext6:
  43:main.c        ****   _delay_ms(200);
  44:main.c        ****   toggle('B', 2);
 190               	.LM10:
 191 0058 62E0      		ldi r22,lo8(2)
 192 005a 70E0      		ldi r23,0
 193 005c 82E4      		ldi r24,lo8(66)
 194 005e 0E94 0000 		call toggle
 195               	.LBB28:
 196               	.LBB29:
 198               	.Ltext7:
 200               	.LM11:
 201 0062 EFE4      		ldi r30,lo8(-15537)
 202 0064 F3EC      		ldi r31,hi8(-15537)
 203 0066 3197      		1: sbiw r30,1
 204 0068 01F4      		brne 1b
 205 006a 00C0      		rjmp .
 206 006c 0000      		nop
 207               	.LBE29:
 208               	.LBE28:
 209               	.LBB30:
 210               	.LBB31:
 212               	.Ltext8:
  14:main.c        ****   ADMUX |= (1 << REFS0);                // reference voltage on AVCC
 214               	.LM12:
 215 006e 8091 7C00 		lds r24,124
 216 0072 8064      		ori r24,lo8(64)
 217 0074 8093 7C00 		sts 124,r24
  15:main.c        ****   ADCSRA |= (1 << ADPS2);               // ADC clock prescaler /16
 219               	.LM13:
 220 0078 8091 7A00 		lds r24,122
 221 007c 8460      		ori r24,lo8(4)
 222 007e 8093 7A00 		sts 122,r24
  16:main.c        ****   ADCSRA |= (1 << ADEN);                // enable ADC
 224               	.LM14:
 225 0082 8091 7A00 		lds r24,122
 226 0086 8068      		ori r24,lo8(-128)
 227 0088 8093 7A00 		sts 122,r24
 228               	.LBE31:
 229               	.LBE30:
  45:main.c        ****   _delay_ms(200);
  46:main.c        ****   /*
  47:main.c        ****   _delay_ms(2000);
  48:main.c        ****   printString("Press Enter to continue\r\n");
  49:main.c        ****   char null_string[32];
  50:main.c        ****   readString(null_string, 32);
  51:main.c        ****   */
  52:main.c        ****   uint8_t i;
  53:main.c        ****   uint32_t sum;
  54:main.c        ****   
  55:main.c        ****   //init ADC
  56:main.c        ****   initADC0();
  57:main.c        ****   uint16_t adcValue;
  58:main.c        ****   
  59:main.c        ****   //moving average variables
  60:main.c        ****   uint8_t values = 200;
  61:main.c        ****   uint16_t pulseValue [values];
 231               	.LM15:
 232 008c 8DB7      		in r24,__SP_L__
 233 008e 9EB7      		in r25,__SP_H__
 234 0090 8059      		subi r24,-112
 235 0092 9140      		sbci r25,1
 236 0094 0FB6      		in __tmp_reg__,__SREG__
 237 0096 F894      		cli
 238 0098 9EBF      		out __SP_H__,r25
 239 009a 0FBE      		out __SREG__,__tmp_reg__
 240 009c 8DBF      		out __SP_L__,r24
 241 009e 0DB7      		in r16,__SP_L__
 242 00a0 1EB7      		in r17,__SP_H__
 243 00a2 0F5F      		subi r16,-1
 244 00a4 1F4F      		sbci r17,-1
 245 00a6 B02E      		mov r11,r16
 246 00a8 A12E      		mov r10,r17
 247 00aa F801      		movw r30,r16
  62:main.c        ****   
  63:main.c        ****   for(i=0;i<values;i++){
 249               	.LM16:
 250 00ac 20E0      		ldi r18,0
  64:main.c        **** 	  pulseValue[i] = 1500;
 252               	.LM17:
 253 00ae 8CED      		ldi r24,lo8(-36)
 254 00b0 95E0      		ldi r25,lo8(5)
 255               	.L2:
 257               	.LM18:
 258 00b2 8193      		st Z+,r24
 259 00b4 9193      		st Z+,r25
  63:main.c        ****   for(i=0;i<values;i++){
 261               	.LM19:
 262 00b6 2F5F      		subi r18,lo8(-(1))
 263 00b8 283C      		cpi r18,lo8(-56)
 264 00ba 01F4      		brne .L2
  65:main.c        ****   }
  66:main.c        ****   
  67:main.c        ****   uint16_t avgPulseValue;
  68:main.c        ****   
  69:main.c        ****   float converter;
  70:main.c        ****   //initPWM
  71:main.c        ****   OCR1A = 1500;           /* set it to middle position initially */
 266               	.LM20:
 267 00bc 8CED      		ldi r24,lo8(-36)
 268 00be 95E0      		ldi r25,lo8(5)
 269 00c0 9093 8900 		sts 136+1,r25
 270 00c4 8093 8800 		sts 136,r24
 271               	.LBB32:
 272               	.LBB33:
  22:main.c        ****   TCCR1A |= (1 << WGM11);
 274               	.LM21:
 275 00c8 8091 8000 		lds r24,128
 276 00cc 8260      		ori r24,lo8(2)
 277 00ce 8093 8000 		sts 128,r24
  23:main.c        ****   TCCR1B |= (1 << WGM12) | (1 << WGM13);
 279               	.LM22:
 280 00d2 8091 8100 		lds r24,129
 281 00d6 8861      		ori r24,lo8(24)
 282 00d8 8093 8100 		sts 129,r24
  24:main.c        ****   TCCR1B |= (1 << CS10);  /* /1 prescaling -- counting in microseconds */
 284               	.LM23:
 285 00dc 8091 8100 		lds r24,129
 286 00e0 8160      		ori r24,lo8(1)
 287 00e2 8093 8100 		sts 129,r24
  25:main.c        ****   ICR1 = 50000;                                    /* TOP value = 20ms */
 289               	.LM24:
 290 00e6 80E5      		ldi r24,lo8(80)
 291 00e8 93EC      		ldi r25,lo8(-61)
 292 00ea 9093 8700 		sts 134+1,r25
 293 00ee 8093 8600 		sts 134,r24
  26:main.c        ****   TCCR1A |= (1 << COM1A1);              /* Direct output on PB1 / OC1A */
 295               	.LM25:
 296 00f2 8091 8000 		lds r24,128
 297 00f6 8068      		ori r24,lo8(-128)
 298 00f8 8093 8000 		sts 128,r24
  27:main.c        ****   DDRB |= (1 << PB1);                            /* set pin for output */
 300               	.LM26:
 301 00fc 219A      		sbi 0x4,1
 302               	.LBE33:
 303               	.LBE32:
  72:main.c        ****   initTimer1Servo();
  73:main.c        **** 	
  74:main.c        ****   
  75:main.c        ****   
  76:main.c        ****   while(1) { 
  77:main.c        ****     
  78:main.c        ****     ADCSRA |= (1 << ADSC);                     // start ADC conversion
  79:main.c        ****     loop_until_bit_is_clear(ADCSRA, ADSC);     // wait until done
  80:main.c        ****     
  81:main.c        ****     adcValue = ADC;
  82:main.c        ****     converter = adcValue*1.955;
  83:main.c        ****     
  84:main.c        ****     for(i=values-1;i>0;i--){
  85:main.c        **** 		pulseValue[i] = pulseValue[i-1];
  86:main.c        **** 	}
  87:main.c        **** 	pulseValue[0] = converter + 500;
  88:main.c        ****     
  89:main.c        ****     sum = 0;
  90:main.c        ****     for(i=0;i<values;i++){
  91:main.c        **** 		sum = sum + pulseValue[i];
  92:main.c        **** 	}
  93:main.c        **** 	
  94:main.c        **** 	avgPulseValue = sum/values;
 305               	.LM27:
 306 00fe 88EC      		ldi r24,lo8(-56)
 307 0100 C82E      		mov r12,r24
 308 0102 D12C      		mov r13,__zero_reg__
 309 0104 E12C      		mov r14,__zero_reg__
 310 0106 F12C      		mov r15,__zero_reg__
 311               	.L6:
  78:main.c        ****     ADCSRA |= (1 << ADSC);                     // start ADC conversion
 313               	.LM28:
 314 0108 8091 7A00 		lds r24,122
 315 010c 8064      		ori r24,lo8(64)
 316 010e 8093 7A00 		sts 122,r24
 317               	.L3:
  79:main.c        ****     loop_until_bit_is_clear(ADCSRA, ADSC);     // wait until done
 319               	.LM29:
 320 0112 8091 7A00 		lds r24,122
 321 0116 86FD      		sbrc r24,6
 322 0118 00C0      		rjmp .L3
  81:main.c        ****     adcValue = ADC;
 324               	.LM30:
 325 011a 6091 7800 		lds r22,120
 326 011e 7091 7900 		lds r23,120+1
  82:main.c        ****     converter = adcValue*1.955;
 328               	.LM31:
 329 0122 80E0      		ldi r24,0
 330 0124 90E0      		ldi r25,0
 331 0126 0E94 0000 		call __floatunsisf
 332 012a 21E7      		ldi r18,lo8(113)
 333 012c 3DE3      		ldi r19,lo8(61)
 334 012e 4AEF      		ldi r20,lo8(-6)
 335 0130 5FE3      		ldi r21,lo8(63)
 336 0132 0E94 0000 		call __mulsf3
 337 0136 2B2D      		mov r18,r11
 338 0138 3A2D      		mov r19,r10
  84:main.c        ****     for(i=values-1;i>0;i--){
 340               	.LM32:
 341 013a A7EC      		ldi r26,lo8(-57)
 342               	.L4:
  30:main.c        **** int main(void)
 344               	.LM33:
 345 013c F901      		movw r30,r18
 346 013e E457      		subi r30,116
 347 0140 FE4F      		sbci r31,-2
  85:main.c        **** 		pulseValue[i] = pulseValue[i-1];
 349               	.LM34:
 350 0142 4081      		ld r20,Z
 351 0144 5181      		ldd r21,Z+1
  30:main.c        **** int main(void)
 353               	.LM35:
 354 0146 F901      		movw r30,r18
 355 0148 E257      		subi r30,114
 356 014a FE4F      		sbci r31,-2
  85:main.c        **** 		pulseValue[i] = pulseValue[i-1];
 358               	.LM36:
 359 014c 5183      		std Z+1,r21
 360 014e 4083      		st Z,r20
  84:main.c        ****     for(i=values-1;i>0;i--){
 362               	.LM37:
 363 0150 A150      		subi r26,lo8(-(-1))
 364 0152 2250      		subi r18,2
 365 0154 3109      		sbc r19,__zero_reg__
 366 0156 A111      		cpse r26,__zero_reg__
 367 0158 00C0      		rjmp .L4
  87:main.c        **** 	pulseValue[0] = converter + 500;
 369               	.LM38:
 370 015a 20E0      		ldi r18,0
 371 015c 30E0      		ldi r19,0
 372 015e 4AEF      		ldi r20,lo8(-6)
 373 0160 53E4      		ldi r21,lo8(67)
 374 0162 0E94 0000 		call __addsf3
 375 0166 0E94 0000 		call __fixunssfsi
 376 016a F801      		movw r30,r16
 377 016c 7183      		std Z+1,r23
 378 016e 6083      		st Z,r22
 379 0170 EB2D      		mov r30,r11
 380 0172 FA2D      		mov r31,r10
 381 0174 48EC      		ldi r20,lo8(-56)
  89:main.c        ****     sum = 0;
 383               	.LM39:
 384 0176 60E0      		ldi r22,0
 385 0178 70E0      		ldi r23,0
 386 017a CB01      		movw r24,r22
 387               	.L5:
  91:main.c        **** 		sum = sum + pulseValue[i];
 389               	.LM40:
 390 017c 2191      		ld r18,Z+
 391 017e 3191      		ld r19,Z+
 392 0180 620F      		add r22,r18
 393 0182 731F      		adc r23,r19
 394 0184 811D      		adc r24,__zero_reg__
 395 0186 911D      		adc r25,__zero_reg__
 396 0188 4150      		subi r20,lo8(-(-1))
  90:main.c        ****     for(i=0;i<values;i++){
 398               	.LM41:
 399 018a 01F4      		brne .L5
 401               	.LM42:
 402 018c A701      		movw r20,r14
 403 018e 9601      		movw r18,r12
 404 0190 0E94 0000 		call __udivmodsi4
  95:main.c        **** 	
  96:main.c        ****     //char pulseString[15];
  97:main.c        ****     //sprintf(pulseString, "%d", avgPulseValue);
  98:main.c        ****     
  99:main.c        ****     //printString(pulseString);
 100:main.c        ****     //printString("\r\n");
 101:main.c        ****     
 102:main.c        ****     OCR1A = avgPulseValue;
 406               	.LM43:
 407 0194 3093 8900 		sts 136+1,r19
 408 0198 2093 8800 		sts 136,r18
 103:main.c        ****     //_delay_ms(50);
 104:main.c        ****     
 105:main.c        ****  }
 410               	.LM44:
 411 019c 00C0      		rjmp .L6
 417               	.Lscope1:
 419               		.stabd	78,0,0
 420               		.text
 422               	.Letext0:
 423               		.ident	"GCC: (GNU) 4.7.2"
 424               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cccaW1ll.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccaW1ll.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccaW1ll.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccaW1ll.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccaW1ll.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccaW1ll.s:99     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__floatunsisf
__mulsf3
__addsf3
__fixunssfsi
initUSART
printString
toggle
__udivmodsi4
__do_copy_data
