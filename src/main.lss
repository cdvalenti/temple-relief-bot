
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c64  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00003408  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00001038  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c2 02 	call	0x584	; 0x584 <main>
  78:	0c 94 30 06 	jmp	0xc60	; 0xc60 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
 
}

void initADC(void) {
  //initialize ADC (set ref voltage, prescaler, and enable)
  ADMUX |= (1 << REFS0);                		// reference voltage on AVCC
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1);    // ADC clock prescaler /8
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADEN);               			// enable ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <readADC>:
}

uint16_t readADC(uint8_t channel) {
  //read ADC value from channel (ADC0 to ADC 5)
  ADMUX = (0b11110000 & ADMUX) | channel;
  9c:	90 91 7c 00 	lds	r25, 0x007C
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	98 2b       	or	r25, r24
  a4:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA |= (1 << ADSC);
  a8:	80 91 7a 00 	lds	r24, 0x007A
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 93 7a 00 	sts	0x007A, r24
  loop_until_bit_is_clear(ADCSRA, ADSC);
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	86 fd       	sbrc	r24, 6
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <readADC+0x16>
  return (ADC);
  ba:	20 91 78 00 	lds	r18, 0x0078
  be:	30 91 79 00 	lds	r19, 0x0079
}
  c2:	c9 01       	movw	r24, r18
  c4:	08 95       	ret

000000c6 <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <initValues+0xe>
     *arr = value;
  ca:	fc 01       	movw	r30, r24
  cc:	41 93       	st	Z+, r20
  ce:	51 93       	st	Z+, r21
  d0:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	26 13       	cpse	r18, r22
  d6:	f9 cf       	rjmp	.-14     	; 0xca <initValues+0x4>
     *arr = value;
     arr++;
  }
}
  d8:	08 95       	ret

000000da <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	61 50       	subi	r22, 0x01	; 1
  e2:	71 09       	sbc	r23, r1
  e4:	eb 01       	movw	r28, r22
  e6:	cc 0f       	add	r28, r28
  e8:	dd 1f       	adc	r29, r29
  ea:	c8 0f       	add	r28, r24
  ec:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	07 c0       	rjmp	.+14     	; 0x100 <storeNewADC+0x26>
     *arr = value;
     arr++;
  }
}

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
  f2:	fe 01       	movw	r30, r28
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
    *arr = *(arr-1);
  f4:	32 91       	ld	r19, -Z
  f6:	22 91       	ld	r18, -Z
  f8:	39 83       	std	Y+1, r19	; 0x01
  fa:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
  fc:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
  fe:	ef 01       	movw	r28, r30
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 100:	29 2f       	mov	r18, r25
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	26 17       	cp	r18, r22
 106:	37 07       	cpc	r19, r23
 108:	a4 f3       	brlt	.-24     	; 0xf2 <storeNewADC+0x18>
    *arr = *(arr-1);
    arr--;
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 10a:	84 2f       	mov	r24, r20
 10c:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
 110:	99 83       	std	Y+1, r25	; 0x01
 112:	88 83       	st	Y, r24
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 11a:	fc 01       	movw	r30, r24
 11c:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	07 c0       	rjmp	.+14     	; 0x136 <getAverage+0x1c>
    sum = sum + *arr;
 128:	41 91       	ld	r20, Z+
 12a:	51 91       	ld	r21, Z+
 12c:	64 0f       	add	r22, r20
 12e:	75 1f       	adc	r23, r21
 130:	81 1d       	adc	r24, r1
 132:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	23 13       	cpse	r18, r19
 138:	f7 cf       	rjmp	.-18     	; 0x128 <getAverage+0xe>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__udivmodsi4>
  return avg;
}
 144:	c9 01       	movw	r24, r18
 146:	08 95       	ret

00000148 <initTimer1Servo>:

void initTimer1Servo(void) {
  /* Set up Timer1 (16bit) to give a pulse every 50ms */
  
  //Use Fast PWM mode, counter max in ICR1
  TCCR1A |= (1 << WGM11);
 148:	e0 e8       	ldi	r30, 0x80	; 128
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
  TCCR1B |= (1 << WGM12) | (1 << WGM13);
 152:	a1 e8       	ldi	r26, 0x81	; 129
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	8c 91       	ld	r24, X
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	8c 93       	st	X, r24
  
  // /1 prescaling -- counting in microseconds
  TCCR1B |= (1 << CS10);
 15c:	8c 91       	ld	r24, X
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	8c 93       	st	X, r24
  
  //TOP value = 50ms
  ICR1 = 50000;
 162:	80 e5       	ldi	r24, 0x50	; 80
 164:	93 ec       	ldi	r25, 0xC3	; 195
 166:	90 93 87 00 	sts	0x0087, r25
 16a:	80 93 86 00 	sts	0x0086, r24
  
  //Direct output on PB1 (OC1A) and PB2 (OC1B)
  TCCR1A |= (1 << COM1A1);
 16e:	80 81       	ld	r24, Z
 170:	80 68       	ori	r24, 0x80	; 128
 172:	80 83       	st	Z, r24
  TCCR1A |= (1 << COM1B1);
 174:	80 81       	ld	r24, Z
 176:	80 62       	ori	r24, 0x20	; 32
 178:	80 83       	st	Z, r24
  
  //set pins for output
  DDRB |= (1 << SERVO1);
 17a:	21 9a       	sbi	0x04, 1	; 4
  DDRB |= (1 << SERVO2);
 17c:	22 9a       	sbi	0x04, 2	; 4
 17e:	08 95       	ret

00000180 <initTimer0PWM>:

void initTimer0PWM(void){
  /* Set up Timer0 (8bit) */
  
  //Use Mode 3, FastPWM
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 180:	84 b5       	in	r24, 0x24	; 36
 182:	83 60       	ori	r24, 0x03	; 3
 184:	84 bd       	out	0x24, r24	; 36

  //Clear at match, set at bottom
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
 186:	84 b5       	in	r24, 0x24	; 36
 188:	80 6a       	ori	r24, 0xA0	; 160
 18a:	84 bd       	out	0x24, r24	; 36
  
  // No prescale, gives freq = ~4kHz
  TCCR0B |= (1<<CS00);
 18c:	85 b5       	in	r24, 0x25	; 37
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	85 bd       	out	0x25, r24	; 37
  
  //set pins for output
  DDRD |= (1 << DRIVER1PWM) | (1 << DRIVER2PWM);
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	80 66       	ori	r24, 0x60	; 96
 196:	8a b9       	out	0x0a, r24	; 10
 198:	08 95       	ret

0000019a <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  //set for output
  DDRB |= (1<<DRIVER1A);
 19a:	20 9a       	sbi	0x04, 0	; 4
  DDRB |= (1<<DRIVER1B);
 19c:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2A);
 19e:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2B);
 1a0:	25 9a       	sbi	0x04, 5	; 4
  //init to zero
  pin_lo('B',DRIVER1A);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
  pin_lo('D',DRIVER1B);
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	84 e4       	ldi	r24, 0x44	; 68
 1b2:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
  pin_lo('B',DRIVER2A);
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
  pin_lo('B',DRIVER2B);
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	0c 94 37 01 	jmp	0x26e	; 0x26e <pin_lo>

000001ca <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
 1ca:	81 34       	cpi	r24, 0x41	; 65
 1cc:	31 f1       	breq	.+76     	; 0x21a <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
 1ce:	82 34       	cpi	r24, 0x42	; 66
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <toggle+0x1e>
      PORTB ^= (1<<bit);
 1d2:	25 b1       	in	r18, 0x05	; 5
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	06 2e       	mov	r0, r22
 1da:	01 c0       	rjmp	.+2      	; 0x1de <toggle+0x14>
 1dc:	88 0f       	add	r24, r24
 1de:	0a 94       	dec	r0
 1e0:	ea f7       	brpl	.-6      	; 0x1dc <toggle+0x12>
 1e2:	28 27       	eor	r18, r24
 1e4:	25 b9       	out	0x05, r18	; 5
 1e6:	08 95       	ret
    }else if (port == 'C'){
 1e8:	83 34       	cpi	r24, 0x43	; 67
 1ea:	59 f4       	brne	.+22     	; 0x202 <toggle+0x38>
      PORTC ^= (1<<bit);
 1ec:	28 b1       	in	r18, 0x08	; 8
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	06 2e       	mov	r0, r22
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <toggle+0x2e>
 1f6:	88 0f       	add	r24, r24
 1f8:	0a 94       	dec	r0
 1fa:	ea f7       	brpl	.-6      	; 0x1f6 <toggle+0x2c>
 1fc:	28 27       	eor	r18, r24
 1fe:	28 b9       	out	0x08, r18	; 8
 200:	08 95       	ret
    }else if (port == 'D'){
 202:	84 34       	cpi	r24, 0x44	; 68
 204:	51 f4       	brne	.+20     	; 0x21a <toggle+0x50>
      PORTD ^= (1<<bit);
 206:	2b b1       	in	r18, 0x0b	; 11
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	06 2e       	mov	r0, r22
 20e:	01 c0       	rjmp	.+2      	; 0x212 <toggle+0x48>
 210:	88 0f       	add	r24, r24
 212:	0a 94       	dec	r0
 214:	ea f7       	brpl	.-6      	; 0x210 <toggle+0x46>
 216:	28 27       	eor	r18, r24
 218:	2b b9       	out	0x0b, r18	; 11
 21a:	08 95       	ret

0000021c <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	31 f1       	breq	.+76     	; 0x26c <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
 220:	82 34       	cpi	r24, 0x42	; 66
 222:	59 f4       	brne	.+22     	; 0x23a <pin_hi+0x1e>
      PORTB |= (1<<bit);
 224:	25 b1       	in	r18, 0x05	; 5
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	06 2e       	mov	r0, r22
 22c:	01 c0       	rjmp	.+2      	; 0x230 <pin_hi+0x14>
 22e:	88 0f       	add	r24, r24
 230:	0a 94       	dec	r0
 232:	ea f7       	brpl	.-6      	; 0x22e <pin_hi+0x12>
 234:	28 2b       	or	r18, r24
 236:	25 b9       	out	0x05, r18	; 5
 238:	08 95       	ret
    }else if (port == 'C'){
 23a:	83 34       	cpi	r24, 0x43	; 67
 23c:	59 f4       	brne	.+22     	; 0x254 <pin_hi+0x38>
      PORTC |= (1<<bit);
 23e:	28 b1       	in	r18, 0x08	; 8
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	06 2e       	mov	r0, r22
 246:	01 c0       	rjmp	.+2      	; 0x24a <pin_hi+0x2e>
 248:	88 0f       	add	r24, r24
 24a:	0a 94       	dec	r0
 24c:	ea f7       	brpl	.-6      	; 0x248 <pin_hi+0x2c>
 24e:	28 2b       	or	r18, r24
 250:	28 b9       	out	0x08, r18	; 8
 252:	08 95       	ret
    }else if (port == 'D'){
 254:	84 34       	cpi	r24, 0x44	; 68
 256:	51 f4       	brne	.+20     	; 0x26c <pin_hi+0x50>
      PORTD |= (1<<bit);
 258:	2b b1       	in	r18, 0x0b	; 11
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	06 2e       	mov	r0, r22
 260:	01 c0       	rjmp	.+2      	; 0x264 <pin_hi+0x48>
 262:	88 0f       	add	r24, r24
 264:	0a 94       	dec	r0
 266:	ea f7       	brpl	.-6      	; 0x262 <pin_hi+0x46>
 268:	28 2b       	or	r18, r24
 26a:	2b b9       	out	0x0b, r18	; 11
 26c:	08 95       	ret

0000026e <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 26e:	81 34       	cpi	r24, 0x41	; 65
 270:	49 f1       	breq	.+82     	; 0x2c4 <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 272:	82 34       	cpi	r24, 0x42	; 66
 274:	61 f4       	brne	.+24     	; 0x28e <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 276:	25 b1       	in	r18, 0x05	; 5
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	06 2e       	mov	r0, r22
 27e:	01 c0       	rjmp	.+2      	; 0x282 <pin_lo+0x14>
 280:	88 0f       	add	r24, r24
 282:	0a 94       	dec	r0
 284:	ea f7       	brpl	.-6      	; 0x280 <pin_lo+0x12>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret
    }else if (port == 'C'){
 28e:	83 34       	cpi	r24, 0x43	; 67
 290:	61 f4       	brne	.+24     	; 0x2aa <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 292:	28 b1       	in	r18, 0x08	; 8
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	06 2e       	mov	r0, r22
 29a:	01 c0       	rjmp	.+2      	; 0x29e <pin_lo+0x30>
 29c:	88 0f       	add	r24, r24
 29e:	0a 94       	dec	r0
 2a0:	ea f7       	brpl	.-6      	; 0x29c <pin_lo+0x2e>
 2a2:	80 95       	com	r24
 2a4:	82 23       	and	r24, r18
 2a6:	88 b9       	out	0x08, r24	; 8
 2a8:	08 95       	ret
    }else if (port == 'D'){
 2aa:	84 34       	cpi	r24, 0x44	; 68
 2ac:	59 f4       	brne	.+22     	; 0x2c4 <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 2ae:	2b b1       	in	r18, 0x0b	; 11
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	06 2e       	mov	r0, r22
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <pin_lo+0x4c>
 2b8:	88 0f       	add	r24, r24
 2ba:	0a 94       	dec	r0
 2bc:	ea f7       	brpl	.-6      	; 0x2b8 <pin_lo+0x4a>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	08 95       	ret

000002c6 <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 2c6:	81 34       	cpi	r24, 0x41	; 65
 2c8:	49 f1       	breq	.+82     	; 0x31c <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 2ca:	82 34       	cpi	r24, 0x42	; 66
 2cc:	61 f4       	brne	.+24     	; 0x2e6 <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 2ce:	24 b1       	in	r18, 0x04	; 4
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	06 2e       	mov	r0, r22
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <set_as_input+0x14>
 2d8:	88 0f       	add	r24, r24
 2da:	0a 94       	dec	r0
 2dc:	ea f7       	brpl	.-6      	; 0x2d8 <set_as_input+0x12>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	84 b9       	out	0x04, r24	; 4
 2e4:	08 95       	ret
    }else if (port == 'C'){
 2e6:	83 34       	cpi	r24, 0x43	; 67
 2e8:	61 f4       	brne	.+24     	; 0x302 <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 2ea:	27 b1       	in	r18, 0x07	; 7
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	06 2e       	mov	r0, r22
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <set_as_input+0x30>
 2f4:	88 0f       	add	r24, r24
 2f6:	0a 94       	dec	r0
 2f8:	ea f7       	brpl	.-6      	; 0x2f4 <set_as_input+0x2e>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	87 b9       	out	0x07, r24	; 7
 300:	08 95       	ret
    }else if (port == 'D'){
 302:	84 34       	cpi	r24, 0x44	; 68
 304:	59 f4       	brne	.+22     	; 0x31c <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 306:	2a b1       	in	r18, 0x0a	; 10
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	06 2e       	mov	r0, r22
 30e:	01 c0       	rjmp	.+2      	; 0x312 <set_as_input+0x4c>
 310:	88 0f       	add	r24, r24
 312:	0a 94       	dec	r0
 314:	ea f7       	brpl	.-6      	; 0x310 <set_as_input+0x4a>
 316:	80 95       	com	r24
 318:	82 23       	and	r24, r18
 31a:	8a b9       	out	0x0a, r24	; 10
 31c:	08 95       	ret

0000031e <set_as_output>:
    }
}

void set_as_output(char port, int bit)
{
    if(port == 'A'){
 31e:	81 34       	cpi	r24, 0x41	; 65
 320:	31 f1       	breq	.+76     	; 0x36e <set_as_output+0x50>
      //DDRA |= (1<<bit);
    }else if (port == 'B'){
 322:	82 34       	cpi	r24, 0x42	; 66
 324:	59 f4       	brne	.+22     	; 0x33c <set_as_output+0x1e>
      DDRB |= (1<<bit);
 326:	24 b1       	in	r18, 0x04	; 4
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	01 c0       	rjmp	.+2      	; 0x332 <set_as_output+0x14>
 330:	88 0f       	add	r24, r24
 332:	0a 94       	dec	r0
 334:	ea f7       	brpl	.-6      	; 0x330 <set_as_output+0x12>
 336:	28 2b       	or	r18, r24
 338:	24 b9       	out	0x04, r18	; 4
 33a:	08 95       	ret
    }else if (port == 'C'){
 33c:	83 34       	cpi	r24, 0x43	; 67
 33e:	59 f4       	brne	.+22     	; 0x356 <set_as_output+0x38>
      DDRC |= (1<<bit);
 340:	27 b1       	in	r18, 0x07	; 7
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	06 2e       	mov	r0, r22
 348:	01 c0       	rjmp	.+2      	; 0x34c <set_as_output+0x2e>
 34a:	88 0f       	add	r24, r24
 34c:	0a 94       	dec	r0
 34e:	ea f7       	brpl	.-6      	; 0x34a <set_as_output+0x2c>
 350:	28 2b       	or	r18, r24
 352:	27 b9       	out	0x07, r18	; 7
 354:	08 95       	ret
    }else if (port == 'D'){
 356:	84 34       	cpi	r24, 0x44	; 68
 358:	51 f4       	brne	.+20     	; 0x36e <set_as_output+0x50>
      DDRD |= (1<<bit);
 35a:	2a b1       	in	r18, 0x0a	; 10
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	06 2e       	mov	r0, r22
 362:	01 c0       	rjmp	.+2      	; 0x366 <set_as_output+0x48>
 364:	88 0f       	add	r24, r24
 366:	0a 94       	dec	r0
 368:	ea f7       	brpl	.-6      	; 0x364 <set_as_output+0x46>
 36a:	28 2b       	or	r18, r24
 36c:	2a b9       	out	0x0a, r18	; 10
 36e:	08 95       	ret

00000370 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 370:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 374:	8c e0       	ldi	r24, 0x0C	; 12
 376:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 37a:	e0 ec       	ldi	r30, 0xC0	; 192
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	82 60       	ori	r24, 0x02	; 2
 382:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	80 93 c2 00 	sts	0x00C2, r24
 390:	08 95       	ret

00000392 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 392:	90 91 c0 00 	lds	r25, 0x00C0
 396:	95 ff       	sbrs	r25, 5
 398:	fc cf       	rjmp	.-8      	; 0x392 <transmitByte>
  UDR0 = data;                                            /* send data */
 39a:	80 93 c6 00 	sts	0x00C6, r24
 39e:	08 95       	ret

000003a0 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 3a0:	80 91 c0 00 	lds	r24, 0x00C0
 3a4:	87 ff       	sbrs	r24, 7
 3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <receiveByte>
  return UDR0;                                /* return register value */
 3a8:	80 91 c6 00 	lds	r24, 0x00C6
}
 3ac:	08 95       	ret

000003ae <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
  uint8_t i = 0;
 3b6:	10 e0       	ldi	r17, 0x00	; 0
  while (myString[i]) {
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <printString+0x12>
    transmitByte(myString[i]);
 3ba:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
    i++;
 3be:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 3c0:	fe 01       	movw	r30, r28
 3c2:	e1 0f       	add	r30, r17
 3c4:	f1 1d       	adc	r31, r1
 3c6:	80 81       	ld	r24, Z
 3c8:	81 11       	cpse	r24, r1
 3ca:	f7 cf       	rjmp	.-18     	; 0x3ba <printString+0xc>
    transmitByte(myString[i]);
    i++;
  }
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	08 95       	ret

000003d4 <readString>:

void readString(char myString[], uint8_t maxLength) {
 3d4:	cf 92       	push	r12
 3d6:	df 92       	push	r13
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	8c 01       	movw	r16, r24
  char response;
  uint8_t i;
  i = 0;
 3e6:	d1 2c       	mov	r13, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 3e8:	c6 2f       	mov	r28, r22
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
 3ec:	21 97       	sbiw	r28, 0x01	; 1
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <readString+0x40>
    response = receiveByte();
 3f0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <receiveByte>
 3f4:	c8 2e       	mov	r12, r24
    transmitByte(response);                                    /* echo */
 3f6:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 3fa:	8d e0       	ldi	r24, 0x0D	; 13
 3fc:	c8 12       	cpse	r12, r24
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <readString+0x36>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 400:	f8 01       	movw	r30, r16
 402:	ed 0d       	add	r30, r13
 404:	f1 1d       	adc	r31, r1
 406:	10 82       	st	Z, r1
 408:	0b c0       	rjmp	.+22     	; 0x420 <readString+0x4c>
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 40a:	f8 01       	movw	r30, r16
 40c:	ee 0d       	add	r30, r14
 40e:	ff 1d       	adc	r31, r15
 410:	c0 82       	st	Z, r12
      i++;
 412:	d3 94       	inc	r13

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 414:	ed 2c       	mov	r14, r13
 416:	f1 2c       	mov	r15, r1
 418:	ec 16       	cp	r14, r28
 41a:	fd 06       	cpc	r15, r29
 41c:	4c f3       	brlt	.-46     	; 0x3f0 <readString+0x1c>
 41e:	f0 cf       	rjmp	.-32     	; 0x400 <readString+0x2c>
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	08 95       	ret

00000432 <printByte>:

void printByte(uint8_t byte) {
 432:	cf 93       	push	r28
 434:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 436:	64 e6       	ldi	r22, 0x64	; 100
 438:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodqi4>
 43c:	80 5d       	subi	r24, 0xD0	; 208
 43e:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 442:	2a e0       	ldi	r18, 0x0A	; 10
 444:	8c 2f       	mov	r24, r28
 446:	62 2f       	mov	r22, r18
 448:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodqi4>
 44c:	c9 2f       	mov	r28, r25
 44e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodqi4>
 452:	89 2f       	mov	r24, r25
 454:	80 5d       	subi	r24, 0xD0	; 208
 456:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 45a:	8c 2f       	mov	r24, r28
 45c:	80 5d       	subi	r24, 0xD0	; 208
}
 45e:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 460:	0c 94 c9 01 	jmp	0x392	; 0x392 <transmitByte>

00000464 <printWord>:
}

void printWord(uint16_t word) {
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 46e:	60 e1       	ldi	r22, 0x10	; 16
 470:	77 e2       	ldi	r23, 0x27	; 39
 472:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 476:	86 2f       	mov	r24, r22
 478:	80 5d       	subi	r24, 0xD0	; 208
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 47e:	ce 01       	movw	r24, r28
 480:	68 ee       	ldi	r22, 0xE8	; 232
 482:	73 e0       	ldi	r23, 0x03	; 3
 484:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 488:	cb 01       	movw	r24, r22
 48a:	0a e0       	ldi	r16, 0x0A	; 10
 48c:	10 e0       	ldi	r17, 0x00	; 0
 48e:	b8 01       	movw	r22, r16
 490:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 494:	80 5d       	subi	r24, 0xD0	; 208
 496:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 49a:	ce 01       	movw	r24, r28
 49c:	64 e6       	ldi	r22, 0x64	; 100
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 4a4:	cb 01       	movw	r24, r22
 4a6:	b8 01       	movw	r22, r16
 4a8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 4ac:	80 5d       	subi	r24, 0xD0	; 208
 4ae:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 4b2:	ce 01       	movw	r24, r28
 4b4:	b8 01       	movw	r22, r16
 4b6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 4ba:	c8 2f       	mov	r28, r24
 4bc:	cb 01       	movw	r24, r22
 4be:	b8 01       	movw	r22, r16
 4c0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__udivmodhi4>
 4c4:	80 5d       	subi	r24, 0xD0	; 208
 4c6:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 4ca:	8c 2f       	mov	r24, r28
 4cc:	80 5d       	subi	r24, 0xD0	; 208
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 4d6:	0c 94 c9 01 	jmp	0x392	; 0x392 <transmitByte>

000004da <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	1f 92       	push	r1
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 4e8:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	01 2e       	mov	r0, r17
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <printBinaryByte+0x1c>
 4f2:	95 95       	asr	r25
 4f4:	87 95       	ror	r24
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <printBinaryByte+0x18>
 4fa:	80 ff       	sbrs	r24, 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <printBinaryByte+0x28>
      transmitByte('1');
 4fe:	81 e3       	ldi	r24, 0x31	; 49
 500:	01 c0       	rjmp	.+2      	; 0x504 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 502:	80 e3       	ldi	r24, 0x30	; 48
 504:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 508:	11 50       	subi	r17, 0x01	; 1
 50a:	78 f7       	brcc	.-34     	; 0x4ea <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 50c:	0f 90       	pop	r0
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	08 95       	ret

00000516 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 516:	8a 30       	cpi	r24, 0x0A	; 10
 518:	10 f4       	brcc	.+4      	; 0x51e <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 51e:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 520:	08 95       	ret

00000522 <printHexByte>:

void printHexByte(uint8_t byte) {
 522:	cf 93       	push	r28
 524:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 526:	82 95       	swap	r24
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	0e 94 8b 02 	call	0x516	; 0x516 <nibbleToHexCharacter>
 52e:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 532:	8c 2f       	mov	r24, r28
 534:	8f 70       	andi	r24, 0x0F	; 15
 536:	0e 94 8b 02 	call	0x516	; 0x516 <nibbleToHexCharacter>
}
 53a:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 53c:	0c 94 c9 01 	jmp	0x392	; 0x392 <transmitByte>

00000540 <getNumber>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	d0 e3       	ldi	r29, 0x30	; 48
 54a:	c0 e3       	ldi	r28, 0x30	; 48
 54c:	00 e3       	ldi	r16, 0x30	; 48
 54e:	03 c0       	rjmp	.+6      	; 0x556 <getNumber+0x16>
 550:	d1 2f       	mov	r29, r17
 552:	c8 2f       	mov	r28, r24
 554:	09 2f       	mov	r16, r25
 556:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <receiveByte>
 55a:	18 2f       	mov	r17, r24
 55c:	0e 94 c9 01 	call	0x392	; 0x392 <transmitByte>
 560:	9c 2f       	mov	r25, r28
 562:	8d 2f       	mov	r24, r29
 564:	1d 30       	cpi	r17, 0x0D	; 13
 566:	a1 f7       	brne	.-24     	; 0x550 <getNumber+0x10>
 568:	80 5d       	subi	r24, 0xD0	; 208
 56a:	94 e6       	ldi	r25, 0x64	; 100
 56c:	09 9f       	mul	r16, r25
 56e:	80 0d       	add	r24, r0
 570:	11 24       	eor	r1, r1
 572:	9a e0       	ldi	r25, 0x0A	; 10
 574:	c9 9f       	mul	r28, r25
 576:	80 0d       	add	r24, r0
 578:	11 24       	eor	r1, r1
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	08 95       	ret

00000584 <main>:
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	c8 5a       	subi	r28, 0xA8	; 168
 58e:	d1 40       	sbci	r29, 0x01	; 1
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
 59e:	0e 94 a4 00 	call	0x148	; 0x148 <initTimer1Servo>
 5a2:	0e 94 cd 00 	call	0x19a	; 0x19a <initMotorDriverIO>
 5a6:	0e 94 c0 00 	call	0x180	; 0x180 <initTimer0PWM>
 5aa:	5e 01       	movw	r10, r28
 5ac:	83 ed       	ldi	r24, 0xD3	; 211
 5ae:	a8 1a       	sub	r10, r24
 5b0:	8e ef       	ldi	r24, 0xFE	; 254
 5b2:	b8 0a       	sbc	r11, r24
 5b4:	4f ef       	ldi	r20, 0xFF	; 255
 5b6:	51 e0       	ldi	r21, 0x01	; 1
 5b8:	6e e1       	ldi	r22, 0x1E	; 30
 5ba:	c5 01       	movw	r24, r10
 5bc:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 5c0:	6e 01       	movw	r12, r28
 5c2:	87 e9       	ldi	r24, 0x97	; 151
 5c4:	c8 1a       	sub	r12, r24
 5c6:	8e ef       	ldi	r24, 0xFE	; 254
 5c8:	d8 0a       	sbc	r13, r24
 5ca:	4f ef       	ldi	r20, 0xFF	; 255
 5cc:	51 e0       	ldi	r21, 0x01	; 1
 5ce:	6e e1       	ldi	r22, 0x1E	; 30
 5d0:	c6 01       	movw	r24, r12
 5d2:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	6b e4       	ldi	r22, 0x4B	; 75
 5dc:	ee 24       	eor	r14, r14
 5de:	e3 94       	inc	r14
 5e0:	f1 2c       	mov	r15, r1
 5e2:	ec 0e       	add	r14, r28
 5e4:	fd 1e       	adc	r15, r29
 5e6:	c7 01       	movw	r24, r14
 5e8:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 5ec:	8e 01       	movw	r16, r28
 5ee:	09 56       	subi	r16, 0x69	; 105
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	6b e4       	ldi	r22, 0x4B	; 75
 5f8:	c8 01       	movw	r24, r16
 5fa:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 5fe:	cb 55       	subi	r28, 0x5B	; 91
 600:	de 4f       	sbci	r29, 0xFE	; 254
 602:	a8 82       	st	Y, r10
 604:	c5 5a       	subi	r28, 0xA5	; 165
 606:	d1 40       	sbci	r29, 0x01	; 1
 608:	ca 55       	subi	r28, 0x5A	; 90
 60a:	de 4f       	sbci	r29, 0xFE	; 254
 60c:	b8 82       	st	Y, r11
 60e:	c6 5a       	subi	r28, 0xA6	; 166
 610:	d1 40       	sbci	r29, 0x01	; 1
 612:	9c 2c       	mov	r9, r12
 614:	8d 2c       	mov	r8, r13
 616:	7e 2c       	mov	r7, r14
 618:	6f 2c       	mov	r6, r15
 61a:	50 2e       	mov	r5, r16
 61c:	41 2e       	mov	r4, r17
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	6e e1       	ldi	r22, 0x1E	; 30
 622:	cb 55       	subi	r28, 0x5B	; 91
 624:	de 4f       	sbci	r29, 0xFE	; 254
 626:	88 81       	ld	r24, Y
 628:	c5 5a       	subi	r28, 0xA5	; 165
 62a:	d1 40       	sbci	r29, 0x01	; 1
 62c:	ca 55       	subi	r28, 0x5A	; 90
 62e:	de 4f       	sbci	r29, 0xFE	; 254
 630:	98 81       	ld	r25, Y
 632:	c6 5a       	subi	r28, 0xA6	; 166
 634:	d1 40       	sbci	r29, 0x01	; 1
 636:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 63a:	6e e1       	ldi	r22, 0x1E	; 30
 63c:	cb 55       	subi	r28, 0x5B	; 91
 63e:	de 4f       	sbci	r29, 0xFE	; 254
 640:	88 81       	ld	r24, Y
 642:	c5 5a       	subi	r28, 0xA5	; 165
 644:	d1 40       	sbci	r29, 0x01	; 1
 646:	ca 55       	subi	r28, 0x5A	; 90
 648:	de 4f       	sbci	r29, 0xFE	; 254
 64a:	98 81       	ld	r25, Y
 64c:	c6 5a       	subi	r28, 0xA6	; 166
 64e:	d1 40       	sbci	r29, 0x01	; 1
 650:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 654:	7c 01       	movw	r14, r24
 656:	41 e0       	ldi	r20, 0x01	; 1
 658:	6e e1       	ldi	r22, 0x1E	; 30
 65a:	89 2d       	mov	r24, r9
 65c:	98 2d       	mov	r25, r8
 65e:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 662:	6e e1       	ldi	r22, 0x1E	; 30
 664:	89 2d       	mov	r24, r9
 666:	98 2d       	mov	r25, r8
 668:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 66c:	8c 01       	movw	r16, r24
 66e:	42 e0       	ldi	r20, 0x02	; 2
 670:	6b e4       	ldi	r22, 0x4B	; 75
 672:	87 2d       	mov	r24, r7
 674:	96 2d       	mov	r25, r6
 676:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 67a:	6b e4       	ldi	r22, 0x4B	; 75
 67c:	87 2d       	mov	r24, r7
 67e:	96 2d       	mov	r25, r6
 680:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 684:	5c 01       	movw	r10, r24
 686:	43 e0       	ldi	r20, 0x03	; 3
 688:	6b e4       	ldi	r22, 0x4B	; 75
 68a:	85 2d       	mov	r24, r5
 68c:	94 2d       	mov	r25, r4
 68e:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 692:	6b e4       	ldi	r22, 0x4B	; 75
 694:	85 2d       	mov	r24, r5
 696:	94 2d       	mov	r25, r4
 698:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 69c:	6c 01       	movw	r12, r24
 69e:	c8 01       	movw	r24, r16
 6a0:	8f 5a       	subi	r24, 0xAF	; 175
 6a2:	91 40       	sbci	r25, 0x01	; 1
 6a4:	85 36       	cpi	r24, 0x65	; 101
 6a6:	91 05       	cpc	r25, r1
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <main+0x14c>
 6aa:	0f 5f       	subi	r16, 0xFF	; 255
 6ac:	11 40       	sbci	r17, 0x01	; 1
 6ae:	c8 01       	movw	r24, r16
 6b0:	17 fd       	sbrc	r17, 7
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	95 95       	asr	r25
 6b6:	87 95       	ror	r24
 6b8:	17 01       	movw	r2, r14
 6ba:	28 1a       	sub	r2, r24
 6bc:	39 0a       	sbc	r3, r25
 6be:	17 ff       	sbrs	r17, 7
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <main+0x142>
 6c2:	0f 5f       	subi	r16, 0xFF	; 255
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	15 95       	asr	r17
 6c8:	07 95       	ror	r16
 6ca:	0e 0d       	add	r16, r14
 6cc:	1f 1d       	adc	r17, r15
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <main+0x150>
 6d0:	87 01       	movw	r16, r14
 6d2:	17 01       	movw	r2, r14
 6d4:	21 14       	cp	r2, r1
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	38 06       	cpc	r3, r24
 6da:	1c f4       	brge	.+6      	; 0x6e2 <main+0x15e>
 6dc:	37 fc       	sbrc	r3, 7
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <main+0x168>
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <main+0x16c>
 6e2:	22 24       	eor	r2, r2
 6e4:	2a 94       	dec	r2
 6e6:	33 e0       	ldi	r19, 0x03	; 3
 6e8:	33 2e       	mov	r3, r19
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <main+0x16c>
 6ec:	21 2c       	mov	r2, r1
 6ee:	31 2c       	mov	r3, r1
 6f0:	01 15       	cp	r16, r1
 6f2:	84 e0       	ldi	r24, 0x04	; 4
 6f4:	18 07       	cpc	r17, r24
 6f6:	1c f4       	brge	.+6      	; 0x6fe <main+0x17a>
 6f8:	17 fd       	sbrc	r17, 7
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <main+0x180>
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <main+0x184>
 6fe:	0f ef       	ldi	r16, 0xFF	; 255
 700:	13 e0       	ldi	r17, 0x03	; 3
 702:	02 c0       	rjmp	.+4      	; 0x708 <main+0x184>
 704:	00 e0       	ldi	r16, 0x00	; 0
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	84 e1       	ldi	r24, 0x14	; 20
 70e:	28 16       	cp	r2, r24
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	38 06       	cpc	r3, r24
 714:	a4 f0       	brlt	.+40     	; 0x73e <main+0x1ba>
 716:	82 e4       	ldi	r24, 0x42	; 66
 718:	0e 94 0e 01 	call	0x21c	; 0x21c <pin_hi>
 71c:	64 e0       	ldi	r22, 0x04	; 4
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	84 e4       	ldi	r24, 0x44	; 68
 722:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 726:	b1 01       	movw	r22, r2
 728:	88 27       	eor	r24, r24
 72a:	77 fd       	sbrc	r23, 7
 72c:	80 95       	com	r24
 72e:	98 2f       	mov	r25, r24
 730:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e4       	ldi	r19, 0x40	; 64
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	54 e4       	ldi	r21, 0x44	; 68
 73c:	1a c0       	rjmp	.+52     	; 0x772 <main+0x1ee>
 73e:	8f ea       	ldi	r24, 0xAF	; 175
 740:	28 16       	cp	r2, r24
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	38 06       	cpc	r3, r24
 746:	04 f5       	brge	.+64     	; 0x788 <main+0x204>
 748:	82 e4       	ldi	r24, 0x42	; 66
 74a:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 74e:	64 e0       	ldi	r22, 0x04	; 4
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	84 e4       	ldi	r24, 0x44	; 68
 754:	0e 94 0e 01 	call	0x21c	; 0x21c <pin_hi>
 758:	b1 01       	movw	r22, r2
 75a:	88 27       	eor	r24, r24
 75c:	77 fd       	sbrc	r23, 7
 75e:	80 95       	com	r24
 760:	98 2f       	mov	r25, r24
 762:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	93 e4       	ldi	r25, 0x43	; 67
 772:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__subsf3>
 776:	20 e0       	ldi	r18, 0x00	; 0
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	5f e3       	ldi	r21, 0x3F	; 63
 77e:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 782:	1b 01       	movw	r2, r22
 784:	7c 01       	movw	r14, r24
 786:	0c c0       	rjmp	.+24     	; 0x7a0 <main+0x21c>
 788:	82 e4       	ldi	r24, 0x42	; 66
 78a:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 78e:	64 e0       	ldi	r22, 0x04	; 4
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	84 e4       	ldi	r24, 0x44	; 68
 794:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 798:	21 2c       	mov	r2, r1
 79a:	31 2c       	mov	r3, r1
 79c:	e1 2c       	mov	r14, r1
 79e:	f1 2c       	mov	r15, r1
 7a0:	64 e0       	ldi	r22, 0x04	; 4
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	04 31       	cpi	r16, 0x14	; 20
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	18 07       	cpc	r17, r24
 7aa:	a4 f0       	brlt	.+40     	; 0x7d4 <main+0x250>
 7ac:	82 e4       	ldi	r24, 0x42	; 66
 7ae:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 7b2:	65 e0       	ldi	r22, 0x05	; 5
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	82 e4       	ldi	r24, 0x42	; 66
 7b8:	0e 94 0e 01 	call	0x21c	; 0x21c <pin_hi>
 7bc:	b8 01       	movw	r22, r16
 7be:	88 27       	eor	r24, r24
 7c0:	77 fd       	sbrc	r23, 7
 7c2:	80 95       	com	r24
 7c4:	98 2f       	mov	r25, r24
 7c6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	30 e4       	ldi	r19, 0x40	; 64
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	54 e4       	ldi	r21, 0x44	; 68
 7d2:	19 c0       	rjmp	.+50     	; 0x806 <main+0x282>
 7d4:	0f 3a       	cpi	r16, 0xAF	; 175
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	18 07       	cpc	r17, r24
 7da:	0c f5       	brge	.+66     	; 0x81e <main+0x29a>
 7dc:	82 e4       	ldi	r24, 0x42	; 66
 7de:	0e 94 0e 01 	call	0x21c	; 0x21c <pin_hi>
 7e2:	65 e0       	ldi	r22, 0x05	; 5
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 7ec:	b8 01       	movw	r22, r16
 7ee:	88 27       	eor	r24, r24
 7f0:	77 fd       	sbrc	r23, 7
 7f2:	80 95       	com	r24
 7f4:	98 2f       	mov	r25, r24
 7f6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatsisf>
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	93 e4       	ldi	r25, 0x43	; 67
 806:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__subsf3>
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	5f e3       	ldi	r21, 0x3F	; 63
 812:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 816:	36 2f       	mov	r19, r22
 818:	27 2f       	mov	r18, r23
 81a:	8c 01       	movw	r16, r24
 81c:	0c c0       	rjmp	.+24     	; 0x836 <main+0x2b2>
 81e:	82 e4       	ldi	r24, 0x42	; 66
 820:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 824:	65 e0       	ldi	r22, 0x05	; 5
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	82 e4       	ldi	r24, 0x42	; 66
 82a:	0e 94 37 01 	call	0x26e	; 0x26e <pin_lo>
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	00 e0       	ldi	r16, 0x00	; 0
 834:	10 e0       	ldi	r17, 0x00	; 0
 836:	62 2d       	mov	r22, r2
 838:	73 2d       	mov	r23, r3
 83a:	8e 2d       	mov	r24, r14
 83c:	9f 2d       	mov	r25, r15
 83e:	c8 55       	subi	r28, 0x58	; 88
 840:	de 4f       	sbci	r29, 0xFE	; 254
 842:	28 83       	st	Y, r18
 844:	c8 5a       	subi	r28, 0xA8	; 168
 846:	d1 40       	sbci	r29, 0x01	; 1
 848:	c9 55       	subi	r28, 0x59	; 89
 84a:	de 4f       	sbci	r29, 0xFE	; 254
 84c:	38 83       	st	Y, r19
 84e:	c7 5a       	subi	r28, 0xA7	; 167
 850:	d1 40       	sbci	r29, 0x01	; 1
 852:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixunssfsi>
 856:	67 bd       	out	0x27, r22	; 39
 858:	c9 55       	subi	r28, 0x59	; 89
 85a:	de 4f       	sbci	r29, 0xFE	; 254
 85c:	38 81       	ld	r19, Y
 85e:	c7 5a       	subi	r28, 0xA7	; 167
 860:	d1 40       	sbci	r29, 0x01	; 1
 862:	c8 55       	subi	r28, 0x58	; 88
 864:	de 4f       	sbci	r29, 0xFE	; 254
 866:	28 81       	ld	r18, Y
 868:	c8 5a       	subi	r28, 0xA8	; 168
 86a:	d1 40       	sbci	r29, 0x01	; 1
 86c:	63 2f       	mov	r22, r19
 86e:	72 2f       	mov	r23, r18
 870:	80 2f       	mov	r24, r16
 872:	91 2f       	mov	r25, r17
 874:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixunssfsi>
 878:	68 bd       	out	0x28, r22	; 40
 87a:	b5 01       	movw	r22, r10
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatunsisf>
 884:	21 e7       	ldi	r18, 0x71	; 113
 886:	3d e3       	ldi	r19, 0x3D	; 61
 888:	4a ef       	ldi	r20, 0xFA	; 250
 88a:	5f e3       	ldi	r21, 0x3F	; 63
 88c:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	4a ef       	ldi	r20, 0xFA	; 250
 896:	53 e4       	ldi	r21, 0x43	; 67
 898:	0e 94 6d 04 	call	0x8da	; 0x8da <__addsf3>
 89c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixunssfsi>
 8a0:	70 93 89 00 	sts	0x0089, r23
 8a4:	60 93 88 00 	sts	0x0088, r22
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatunsisf>
 8b2:	21 e7       	ldi	r18, 0x71	; 113
 8b4:	3d e3       	ldi	r19, 0x3D	; 61
 8b6:	4a ef       	ldi	r20, 0xFA	; 250
 8b8:	5f e3       	ldi	r21, 0x3F	; 63
 8ba:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 8be:	20 e0       	ldi	r18, 0x00	; 0
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	4a ef       	ldi	r20, 0xFA	; 250
 8c4:	53 e4       	ldi	r21, 0x43	; 67
 8c6:	0e 94 6d 04 	call	0x8da	; 0x8da <__addsf3>
 8ca:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixunssfsi>
 8ce:	70 93 8b 00 	sts	0x008B, r23
 8d2:	60 93 8a 00 	sts	0x008A, r22
 8d6:	a3 ce       	rjmp	.-698    	; 0x61e <main+0x9a>

000008d8 <__subsf3>:
 8d8:	50 58       	subi	r21, 0x80	; 128

000008da <__addsf3>:
 8da:	bb 27       	eor	r27, r27
 8dc:	aa 27       	eor	r26, r26
 8de:	0e d0       	rcall	.+28     	; 0x8fc <__addsf3x>
 8e0:	e0 c0       	rjmp	.+448    	; 0xaa2 <__fp_round>
 8e2:	d1 d0       	rcall	.+418    	; 0xa86 <__fp_pscA>
 8e4:	30 f0       	brcs	.+12     	; 0x8f2 <__addsf3+0x18>
 8e6:	d6 d0       	rcall	.+428    	; 0xa94 <__fp_pscB>
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__addsf3+0x18>
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <__addsf3+0x1e>
 8ec:	9f 3f       	cpi	r25, 0xFF	; 255
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__addsf3+0x1a>
 8f0:	1e f4       	brtc	.+6      	; 0x8f8 <__addsf3+0x1e>
 8f2:	c6 c0       	rjmp	.+396    	; 0xa80 <__fp_nan>
 8f4:	0e f4       	brtc	.+2      	; 0x8f8 <__addsf3+0x1e>
 8f6:	e0 95       	com	r30
 8f8:	e7 fb       	bst	r30, 7
 8fa:	bc c0       	rjmp	.+376    	; 0xa74 <__fp_inf>

000008fc <__addsf3x>:
 8fc:	e9 2f       	mov	r30, r25
 8fe:	e2 d0       	rcall	.+452    	; 0xac4 <__fp_split3>
 900:	80 f3       	brcs	.-32     	; 0x8e2 <__addsf3+0x8>
 902:	ba 17       	cp	r27, r26
 904:	62 07       	cpc	r22, r18
 906:	73 07       	cpc	r23, r19
 908:	84 07       	cpc	r24, r20
 90a:	95 07       	cpc	r25, r21
 90c:	18 f0       	brcs	.+6      	; 0x914 <__stack+0x15>
 90e:	71 f4       	brne	.+28     	; 0x92c <__stack+0x2d>
 910:	9e f5       	brtc	.+102    	; 0x978 <__stack+0x79>
 912:	fa c0       	rjmp	.+500    	; 0xb08 <__fp_zero>
 914:	0e f4       	brtc	.+2      	; 0x918 <__stack+0x19>
 916:	e0 95       	com	r30
 918:	0b 2e       	mov	r0, r27
 91a:	ba 2f       	mov	r27, r26
 91c:	a0 2d       	mov	r26, r0
 91e:	0b 01       	movw	r0, r22
 920:	b9 01       	movw	r22, r18
 922:	90 01       	movw	r18, r0
 924:	0c 01       	movw	r0, r24
 926:	ca 01       	movw	r24, r20
 928:	a0 01       	movw	r20, r0
 92a:	11 24       	eor	r1, r1
 92c:	ff 27       	eor	r31, r31
 92e:	59 1b       	sub	r21, r25
 930:	99 f0       	breq	.+38     	; 0x958 <__stack+0x59>
 932:	59 3f       	cpi	r21, 0xF9	; 249
 934:	50 f4       	brcc	.+20     	; 0x94a <__stack+0x4b>
 936:	50 3e       	cpi	r21, 0xE0	; 224
 938:	68 f1       	brcs	.+90     	; 0x994 <__stack+0x95>
 93a:	1a 16       	cp	r1, r26
 93c:	f0 40       	sbci	r31, 0x00	; 0
 93e:	a2 2f       	mov	r26, r18
 940:	23 2f       	mov	r18, r19
 942:	34 2f       	mov	r19, r20
 944:	44 27       	eor	r20, r20
 946:	58 5f       	subi	r21, 0xF8	; 248
 948:	f3 cf       	rjmp	.-26     	; 0x930 <__stack+0x31>
 94a:	46 95       	lsr	r20
 94c:	37 95       	ror	r19
 94e:	27 95       	ror	r18
 950:	a7 95       	ror	r26
 952:	f0 40       	sbci	r31, 0x00	; 0
 954:	53 95       	inc	r21
 956:	c9 f7       	brne	.-14     	; 0x94a <__stack+0x4b>
 958:	7e f4       	brtc	.+30     	; 0x978 <__stack+0x79>
 95a:	1f 16       	cp	r1, r31
 95c:	ba 0b       	sbc	r27, r26
 95e:	62 0b       	sbc	r22, r18
 960:	73 0b       	sbc	r23, r19
 962:	84 0b       	sbc	r24, r20
 964:	ba f0       	brmi	.+46     	; 0x994 <__stack+0x95>
 966:	91 50       	subi	r25, 0x01	; 1
 968:	a1 f0       	breq	.+40     	; 0x992 <__stack+0x93>
 96a:	ff 0f       	add	r31, r31
 96c:	bb 1f       	adc	r27, r27
 96e:	66 1f       	adc	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	c2 f7       	brpl	.-16     	; 0x966 <__stack+0x67>
 976:	0e c0       	rjmp	.+28     	; 0x994 <__stack+0x95>
 978:	ba 0f       	add	r27, r26
 97a:	62 1f       	adc	r22, r18
 97c:	73 1f       	adc	r23, r19
 97e:	84 1f       	adc	r24, r20
 980:	48 f4       	brcc	.+18     	; 0x994 <__stack+0x95>
 982:	87 95       	ror	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	08 f0       	brcs	.+2      	; 0x992 <__stack+0x93>
 990:	b3 cf       	rjmp	.-154    	; 0x8f8 <__addsf3+0x1e>
 992:	93 95       	inc	r25
 994:	88 0f       	add	r24, r24
 996:	08 f0       	brcs	.+2      	; 0x99a <__stack+0x9b>
 998:	99 27       	eor	r25, r25
 99a:	ee 0f       	add	r30, r30
 99c:	97 95       	ror	r25
 99e:	87 95       	ror	r24
 9a0:	08 95       	ret

000009a2 <__fixunssfsi>:
 9a2:	98 d0       	rcall	.+304    	; 0xad4 <__fp_splitA>
 9a4:	88 f0       	brcs	.+34     	; 0x9c8 <__fixunssfsi+0x26>
 9a6:	9f 57       	subi	r25, 0x7F	; 127
 9a8:	90 f0       	brcs	.+36     	; 0x9ce <__fixunssfsi+0x2c>
 9aa:	b9 2f       	mov	r27, r25
 9ac:	99 27       	eor	r25, r25
 9ae:	b7 51       	subi	r27, 0x17	; 23
 9b0:	a0 f0       	brcs	.+40     	; 0x9da <__fixunssfsi+0x38>
 9b2:	d1 f0       	breq	.+52     	; 0x9e8 <__fixunssfsi+0x46>
 9b4:	66 0f       	add	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	1a f0       	brmi	.+6      	; 0x9c4 <__fixunssfsi+0x22>
 9be:	ba 95       	dec	r27
 9c0:	c9 f7       	brne	.-14     	; 0x9b4 <__fixunssfsi+0x12>
 9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__fixunssfsi+0x46>
 9c4:	b1 30       	cpi	r27, 0x01	; 1
 9c6:	81 f0       	breq	.+32     	; 0x9e8 <__fixunssfsi+0x46>
 9c8:	9f d0       	rcall	.+318    	; 0xb08 <__fp_zero>
 9ca:	b1 e0       	ldi	r27, 0x01	; 1
 9cc:	08 95       	ret
 9ce:	9c c0       	rjmp	.+312    	; 0xb08 <__fp_zero>
 9d0:	67 2f       	mov	r22, r23
 9d2:	78 2f       	mov	r23, r24
 9d4:	88 27       	eor	r24, r24
 9d6:	b8 5f       	subi	r27, 0xF8	; 248
 9d8:	39 f0       	breq	.+14     	; 0x9e8 <__fixunssfsi+0x46>
 9da:	b9 3f       	cpi	r27, 0xF9	; 249
 9dc:	cc f3       	brlt	.-14     	; 0x9d0 <__fixunssfsi+0x2e>
 9de:	86 95       	lsr	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b3 95       	inc	r27
 9e6:	d9 f7       	brne	.-10     	; 0x9de <__fixunssfsi+0x3c>
 9e8:	3e f4       	brtc	.+14     	; 0x9f8 <__fixunssfsi+0x56>
 9ea:	90 95       	com	r25
 9ec:	80 95       	com	r24
 9ee:	70 95       	com	r23
 9f0:	61 95       	neg	r22
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <__floatunsisf>:
 9fa:	e8 94       	clt
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__floatsisf+0x12>

000009fe <__floatsisf>:
 9fe:	97 fb       	bst	r25, 7
 a00:	3e f4       	brtc	.+14     	; 0xa10 <__floatsisf+0x12>
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	99 23       	and	r25, r25
 a12:	a9 f0       	breq	.+42     	; 0xa3e <__floatsisf+0x40>
 a14:	f9 2f       	mov	r31, r25
 a16:	96 e9       	ldi	r25, 0x96	; 150
 a18:	bb 27       	eor	r27, r27
 a1a:	93 95       	inc	r25
 a1c:	f6 95       	lsr	r31
 a1e:	87 95       	ror	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b7 95       	ror	r27
 a26:	f1 11       	cpse	r31, r1
 a28:	f8 cf       	rjmp	.-16     	; 0xa1a <__floatsisf+0x1c>
 a2a:	fa f4       	brpl	.+62     	; 0xa6a <__floatsisf+0x6c>
 a2c:	bb 0f       	add	r27, r27
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__floatsisf+0x36>
 a30:	60 ff       	sbrs	r22, 0
 a32:	1b c0       	rjmp	.+54     	; 0xa6a <__floatsisf+0x6c>
 a34:	6f 5f       	subi	r22, 0xFF	; 255
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	16 c0       	rjmp	.+44     	; 0xa6a <__floatsisf+0x6c>
 a3e:	88 23       	and	r24, r24
 a40:	11 f0       	breq	.+4      	; 0xa46 <__floatsisf+0x48>
 a42:	96 e9       	ldi	r25, 0x96	; 150
 a44:	11 c0       	rjmp	.+34     	; 0xa68 <__floatsisf+0x6a>
 a46:	77 23       	and	r23, r23
 a48:	21 f0       	breq	.+8      	; 0xa52 <__floatsisf+0x54>
 a4a:	9e e8       	ldi	r25, 0x8E	; 142
 a4c:	87 2f       	mov	r24, r23
 a4e:	76 2f       	mov	r23, r22
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <__floatsisf+0x5e>
 a52:	66 23       	and	r22, r22
 a54:	71 f0       	breq	.+28     	; 0xa72 <__floatsisf+0x74>
 a56:	96 e8       	ldi	r25, 0x86	; 134
 a58:	86 2f       	mov	r24, r22
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__floatsisf+0x6c>
 a60:	9a 95       	dec	r25
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	da f7       	brpl	.-10     	; 0xa60 <__floatsisf+0x62>
 a6a:	88 0f       	add	r24, r24
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__fp_inf>:
 a74:	97 f9       	bld	r25, 7
 a76:	9f 67       	ori	r25, 0x7F	; 127
 a78:	80 e8       	ldi	r24, 0x80	; 128
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	08 95       	ret

00000a80 <__fp_nan>:
 a80:	9f ef       	ldi	r25, 0xFF	; 255
 a82:	80 ec       	ldi	r24, 0xC0	; 192
 a84:	08 95       	ret

00000a86 <__fp_pscA>:
 a86:	00 24       	eor	r0, r0
 a88:	0a 94       	dec	r0
 a8a:	16 16       	cp	r1, r22
 a8c:	17 06       	cpc	r1, r23
 a8e:	18 06       	cpc	r1, r24
 a90:	09 06       	cpc	r0, r25
 a92:	08 95       	ret

00000a94 <__fp_pscB>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	12 16       	cp	r1, r18
 a9a:	13 06       	cpc	r1, r19
 a9c:	14 06       	cpc	r1, r20
 a9e:	05 06       	cpc	r0, r21
 aa0:	08 95       	ret

00000aa2 <__fp_round>:
 aa2:	09 2e       	mov	r0, r25
 aa4:	03 94       	inc	r0
 aa6:	00 0c       	add	r0, r0
 aa8:	11 f4       	brne	.+4      	; 0xaae <__fp_round+0xc>
 aaa:	88 23       	and	r24, r24
 aac:	52 f0       	brmi	.+20     	; 0xac2 <__fp_round+0x20>
 aae:	bb 0f       	add	r27, r27
 ab0:	40 f4       	brcc	.+16     	; 0xac2 <__fp_round+0x20>
 ab2:	bf 2b       	or	r27, r31
 ab4:	11 f4       	brne	.+4      	; 0xaba <__fp_round+0x18>
 ab6:	60 ff       	sbrs	r22, 0
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fp_round+0x20>
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__fp_split3>:
 ac4:	57 fd       	sbrc	r21, 7
 ac6:	90 58       	subi	r25, 0x80	; 128
 ac8:	44 0f       	add	r20, r20
 aca:	55 1f       	adc	r21, r21
 acc:	59 f0       	breq	.+22     	; 0xae4 <__fp_splitA+0x10>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	71 f0       	breq	.+28     	; 0xaee <__fp_splitA+0x1a>
 ad2:	47 95       	ror	r20

00000ad4 <__fp_splitA>:
 ad4:	88 0f       	add	r24, r24
 ad6:	97 fb       	bst	r25, 7
 ad8:	99 1f       	adc	r25, r25
 ada:	61 f0       	breq	.+24     	; 0xaf4 <__fp_splitA+0x20>
 adc:	9f 3f       	cpi	r25, 0xFF	; 255
 ade:	79 f0       	breq	.+30     	; 0xafe <__fp_splitA+0x2a>
 ae0:	87 95       	ror	r24
 ae2:	08 95       	ret
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	14 06       	cpc	r1, r20
 aea:	55 1f       	adc	r21, r21
 aec:	f2 cf       	rjmp	.-28     	; 0xad2 <__fp_split3+0xe>
 aee:	46 95       	lsr	r20
 af0:	f1 df       	rcall	.-30     	; 0xad4 <__fp_splitA>
 af2:	08 c0       	rjmp	.+16     	; 0xb04 <__fp_splitA+0x30>
 af4:	16 16       	cp	r1, r22
 af6:	17 06       	cpc	r1, r23
 af8:	18 06       	cpc	r1, r24
 afa:	99 1f       	adc	r25, r25
 afc:	f1 cf       	rjmp	.-30     	; 0xae0 <__fp_splitA+0xc>
 afe:	86 95       	lsr	r24
 b00:	71 05       	cpc	r23, r1
 b02:	61 05       	cpc	r22, r1
 b04:	08 94       	sec
 b06:	08 95       	ret

00000b08 <__fp_zero>:
 b08:	e8 94       	clt

00000b0a <__fp_szero>:
 b0a:	bb 27       	eor	r27, r27
 b0c:	66 27       	eor	r22, r22
 b0e:	77 27       	eor	r23, r23
 b10:	cb 01       	movw	r24, r22
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret

00000b16 <__mulsf3>:
 b16:	0b d0       	rcall	.+22     	; 0xb2e <__mulsf3x>
 b18:	c4 cf       	rjmp	.-120    	; 0xaa2 <__fp_round>
 b1a:	b5 df       	rcall	.-150    	; 0xa86 <__fp_pscA>
 b1c:	28 f0       	brcs	.+10     	; 0xb28 <__mulsf3+0x12>
 b1e:	ba df       	rcall	.-140    	; 0xa94 <__fp_pscB>
 b20:	18 f0       	brcs	.+6      	; 0xb28 <__mulsf3+0x12>
 b22:	95 23       	and	r25, r21
 b24:	09 f0       	breq	.+2      	; 0xb28 <__mulsf3+0x12>
 b26:	a6 cf       	rjmp	.-180    	; 0xa74 <__fp_inf>
 b28:	ab cf       	rjmp	.-170    	; 0xa80 <__fp_nan>
 b2a:	11 24       	eor	r1, r1
 b2c:	ee cf       	rjmp	.-36     	; 0xb0a <__fp_szero>

00000b2e <__mulsf3x>:
 b2e:	ca df       	rcall	.-108    	; 0xac4 <__fp_split3>
 b30:	a0 f3       	brcs	.-24     	; 0xb1a <__mulsf3+0x4>

00000b32 <__mulsf3_pse>:
 b32:	95 9f       	mul	r25, r21
 b34:	d1 f3       	breq	.-12     	; 0xb2a <__mulsf3+0x14>
 b36:	95 0f       	add	r25, r21
 b38:	50 e0       	ldi	r21, 0x00	; 0
 b3a:	55 1f       	adc	r21, r21
 b3c:	62 9f       	mul	r22, r18
 b3e:	f0 01       	movw	r30, r0
 b40:	72 9f       	mul	r23, r18
 b42:	bb 27       	eor	r27, r27
 b44:	f0 0d       	add	r31, r0
 b46:	b1 1d       	adc	r27, r1
 b48:	63 9f       	mul	r22, r19
 b4a:	aa 27       	eor	r26, r26
 b4c:	f0 0d       	add	r31, r0
 b4e:	b1 1d       	adc	r27, r1
 b50:	aa 1f       	adc	r26, r26
 b52:	64 9f       	mul	r22, r20
 b54:	66 27       	eor	r22, r22
 b56:	b0 0d       	add	r27, r0
 b58:	a1 1d       	adc	r26, r1
 b5a:	66 1f       	adc	r22, r22
 b5c:	82 9f       	mul	r24, r18
 b5e:	22 27       	eor	r18, r18
 b60:	b0 0d       	add	r27, r0
 b62:	a1 1d       	adc	r26, r1
 b64:	62 1f       	adc	r22, r18
 b66:	73 9f       	mul	r23, r19
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	62 1f       	adc	r22, r18
 b6e:	83 9f       	mul	r24, r19
 b70:	a0 0d       	add	r26, r0
 b72:	61 1d       	adc	r22, r1
 b74:	22 1f       	adc	r18, r18
 b76:	74 9f       	mul	r23, r20
 b78:	33 27       	eor	r19, r19
 b7a:	a0 0d       	add	r26, r0
 b7c:	61 1d       	adc	r22, r1
 b7e:	23 1f       	adc	r18, r19
 b80:	84 9f       	mul	r24, r20
 b82:	60 0d       	add	r22, r0
 b84:	21 1d       	adc	r18, r1
 b86:	82 2f       	mov	r24, r18
 b88:	76 2f       	mov	r23, r22
 b8a:	6a 2f       	mov	r22, r26
 b8c:	11 24       	eor	r1, r1
 b8e:	9f 57       	subi	r25, 0x7F	; 127
 b90:	50 40       	sbci	r21, 0x00	; 0
 b92:	8a f0       	brmi	.+34     	; 0xbb6 <__mulsf3_pse+0x84>
 b94:	e1 f0       	breq	.+56     	; 0xbce <__mulsf3_pse+0x9c>
 b96:	88 23       	and	r24, r24
 b98:	4a f0       	brmi	.+18     	; 0xbac <__mulsf3_pse+0x7a>
 b9a:	ee 0f       	add	r30, r30
 b9c:	ff 1f       	adc	r31, r31
 b9e:	bb 1f       	adc	r27, r27
 ba0:	66 1f       	adc	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	91 50       	subi	r25, 0x01	; 1
 ba8:	50 40       	sbci	r21, 0x00	; 0
 baa:	a9 f7       	brne	.-22     	; 0xb96 <__mulsf3_pse+0x64>
 bac:	9e 3f       	cpi	r25, 0xFE	; 254
 bae:	51 05       	cpc	r21, r1
 bb0:	70 f0       	brcs	.+28     	; 0xbce <__mulsf3_pse+0x9c>
 bb2:	60 cf       	rjmp	.-320    	; 0xa74 <__fp_inf>
 bb4:	aa cf       	rjmp	.-172    	; 0xb0a <__fp_szero>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	ec f3       	brlt	.-6      	; 0xbb4 <__mulsf3_pse+0x82>
 bba:	98 3e       	cpi	r25, 0xE8	; 232
 bbc:	dc f3       	brlt	.-10     	; 0xbb4 <__mulsf3_pse+0x82>
 bbe:	86 95       	lsr	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	b7 95       	ror	r27
 bc6:	f7 95       	ror	r31
 bc8:	e7 95       	ror	r30
 bca:	9f 5f       	subi	r25, 0xFF	; 255
 bcc:	c1 f7       	brne	.-16     	; 0xbbe <__mulsf3_pse+0x8c>
 bce:	fe 2b       	or	r31, r30
 bd0:	88 0f       	add	r24, r24
 bd2:	91 1d       	adc	r25, r1
 bd4:	96 95       	lsr	r25
 bd6:	87 95       	ror	r24
 bd8:	97 f9       	bld	r25, 7
 bda:	08 95       	ret

00000bdc <__udivmodqi4>:
 bdc:	99 1b       	sub	r25, r25
 bde:	79 e0       	ldi	r23, 0x09	; 9
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__udivmodqi4_ep>

00000be2 <__udivmodqi4_loop>:
 be2:	99 1f       	adc	r25, r25
 be4:	96 17       	cp	r25, r22
 be6:	08 f0       	brcs	.+2      	; 0xbea <__udivmodqi4_ep>
 be8:	96 1b       	sub	r25, r22

00000bea <__udivmodqi4_ep>:
 bea:	88 1f       	adc	r24, r24
 bec:	7a 95       	dec	r23
 bee:	c9 f7       	brne	.-14     	; 0xbe2 <__udivmodqi4_loop>
 bf0:	80 95       	com	r24
 bf2:	08 95       	ret

00000bf4 <__udivmodhi4>:
 bf4:	aa 1b       	sub	r26, r26
 bf6:	bb 1b       	sub	r27, r27
 bf8:	51 e1       	ldi	r21, 0x11	; 17
 bfa:	07 c0       	rjmp	.+14     	; 0xc0a <__udivmodhi4_ep>

00000bfc <__udivmodhi4_loop>:
 bfc:	aa 1f       	adc	r26, r26
 bfe:	bb 1f       	adc	r27, r27
 c00:	a6 17       	cp	r26, r22
 c02:	b7 07       	cpc	r27, r23
 c04:	10 f0       	brcs	.+4      	; 0xc0a <__udivmodhi4_ep>
 c06:	a6 1b       	sub	r26, r22
 c08:	b7 0b       	sbc	r27, r23

00000c0a <__udivmodhi4_ep>:
 c0a:	88 1f       	adc	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	5a 95       	dec	r21
 c10:	a9 f7       	brne	.-22     	; 0xbfc <__udivmodhi4_loop>
 c12:	80 95       	com	r24
 c14:	90 95       	com	r25
 c16:	bc 01       	movw	r22, r24
 c18:	cd 01       	movw	r24, r26
 c1a:	08 95       	ret

00000c1c <__udivmodsi4>:
 c1c:	a1 e2       	ldi	r26, 0x21	; 33
 c1e:	1a 2e       	mov	r1, r26
 c20:	aa 1b       	sub	r26, r26
 c22:	bb 1b       	sub	r27, r27
 c24:	fd 01       	movw	r30, r26
 c26:	0d c0       	rjmp	.+26     	; 0xc42 <__udivmodsi4_ep>

00000c28 <__udivmodsi4_loop>:
 c28:	aa 1f       	adc	r26, r26
 c2a:	bb 1f       	adc	r27, r27
 c2c:	ee 1f       	adc	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	a2 17       	cp	r26, r18
 c32:	b3 07       	cpc	r27, r19
 c34:	e4 07       	cpc	r30, r20
 c36:	f5 07       	cpc	r31, r21
 c38:	20 f0       	brcs	.+8      	; 0xc42 <__udivmodsi4_ep>
 c3a:	a2 1b       	sub	r26, r18
 c3c:	b3 0b       	sbc	r27, r19
 c3e:	e4 0b       	sbc	r30, r20
 c40:	f5 0b       	sbc	r31, r21

00000c42 <__udivmodsi4_ep>:
 c42:	66 1f       	adc	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	1a 94       	dec	r1
 c4c:	69 f7       	brne	.-38     	; 0xc28 <__udivmodsi4_loop>
 c4e:	60 95       	com	r22
 c50:	70 95       	com	r23
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	9b 01       	movw	r18, r22
 c58:	ac 01       	movw	r20, r24
 c5a:	bd 01       	movw	r22, r26
 c5c:	cf 01       	movw	r24, r30
 c5e:	08 95       	ret

00000c60 <_exit>:
 c60:	f8 94       	cli

00000c62 <__stop_program>:
 c62:	ff cf       	rjmp	.-2      	; 0xc62 <__stop_program>
