
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c76  00000d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000d0a  2**0
                  ALLOC
  3 .stab         00003abc  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e7  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005caf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 2a 04 	call	0x854	; 0x854 <main>
  88:	0c 94 39 06 	jmp	0xc72	; 0xc72 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
void initInterrupts(void);

volatile uint16_t bridgeButtonCount = 0;
volatile uint16_t grainButtonCount = 0;

ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  
  int interruptCount = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  
  while ((bit_is_clear(INT_PIN, INTERRUPT0))) {
  a2:	4a 99       	sbic	0x09, 2	; 9
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <__vector_1+0x20>
    if(interruptCount<=100){
  a6:	85 36       	cpi	r24, 0x65	; 101
  a8:	91 05       	cpc	r25, r1
  aa:	dc f7       	brge	.-10     	; 0xa2 <__vector_1+0x12>
      interruptCount++;
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	f9 cf       	rjmp	.-14     	; 0xa2 <__vector_1+0x12>
    }
  }
  
  if(interruptCount>99){
  b0:	84 36       	cpi	r24, 0x64	; 100
  b2:	91 05       	cpc	r25, r1
  b4:	c4 f0       	brlt	.+48     	; 0xe6 <__vector_1+0x56>
    if(bridgeButtonCount%2 == 0){
  b6:	80 91 02 01 	lds	r24, 0x0102
  ba:	90 91 03 01 	lds	r25, 0x0103
  be:	80 fd       	sbrc	r24, 0
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <__vector_1+0x38>
      OCR1A = CCW;
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__vector_1+0x3c>
    }else{
      OCR1A = CW;
  c8:	84 ec       	ldi	r24, 0xC4	; 196
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	90 93 89 00 	sts	0x0089, r25
  d0:	80 93 88 00 	sts	0x0088, r24
    }
    bridgeButtonCount++;
  d4:	80 91 02 01 	lds	r24, 0x0102
  d8:	90 91 03 01 	lds	r25, 0x0103
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 03 01 	sts	0x0103, r25
  e2:	80 93 02 01 	sts	0x0102, r24
  }
  
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_2>:

ISR(INT1_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
  
  int interruptCount = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
  
  while ((bit_is_clear(INT_PIN, INTERRUPT1))) {
 106:	4b 99       	sbic	0x09, 3	; 9
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_2+0x20>
    if(interruptCount<=100){
 10a:	85 36       	cpi	r24, 0x65	; 101
 10c:	91 05       	cpc	r25, r1
 10e:	dc f7       	brge	.-10     	; 0x106 <__vector_2+0x12>
      interruptCount++;
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	f9 cf       	rjmp	.-14     	; 0x106 <__vector_2+0x12>
    }
  }
  
  if(interruptCount>99 && bridgeButtonCount > 1){
 114:	84 36       	cpi	r24, 0x64	; 100
 116:	91 05       	cpc	r25, r1
 118:	f4 f0       	brlt	.+60     	; 0x156 <__vector_2+0x62>
 11a:	80 91 02 01 	lds	r24, 0x0102
 11e:	90 91 03 01 	lds	r25, 0x0103
 122:	02 97       	sbiw	r24, 0x02	; 2
 124:	c0 f0       	brcs	.+48     	; 0x156 <__vector_2+0x62>
  
    if(grainButtonCount%2 == 0){
 126:	80 91 00 01 	lds	r24, 0x0100
 12a:	90 91 01 01 	lds	r25, 0x0101
 12e:	80 fd       	sbrc	r24, 0
 130:	03 c0       	rjmp	.+6      	; 0x138 <__vector_2+0x44>
      OCR1B = CCW;
 132:	84 ef       	ldi	r24, 0xF4	; 244
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	02 c0       	rjmp	.+4      	; 0x13c <__vector_2+0x48>
    }else{
      OCR1B = CW;
 138:	84 ec       	ldi	r24, 0xC4	; 196
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	90 93 8b 00 	sts	0x008B, r25
 140:	80 93 8a 00 	sts	0x008A, r24
    }
    grainButtonCount++;
 144:	80 91 00 01 	lds	r24, 0x0100
 148:	90 91 01 01 	lds	r25, 0x0101
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 01 01 	sts	0x0101, r25
 152:	80 93 00 01 	sts	0x0100, r24
  }
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <initADC>:
 
}

void initADC(void) {
  //initialize ADC (set ref voltage, prescaler, and enable)
  ADMUX |= (1 << REFS0);                		// reference voltage on AVCC
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1);    // ADC clock prescaler /8
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	83 60       	ori	r24, 0x03	; 3
 176:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADEN);               			// enable ADC
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <readADC>:
}

uint16_t readADC(uint8_t channel) {
  //read ADC value from channel (ADC0 to ADC 5)
  ADMUX = (0b11110000 & ADMUX) | channel;
 180:	90 91 7c 00 	lds	r25, 0x007C
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	98 2b       	or	r25, r24
 188:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA |= (1 << ADSC);
 18c:	80 91 7a 00 	lds	r24, 0x007A
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 93 7a 00 	sts	0x007A, r24
  loop_until_bit_is_clear(ADCSRA, ADSC);
 196:	80 91 7a 00 	lds	r24, 0x007A
 19a:	86 fd       	sbrc	r24, 6
 19c:	fc cf       	rjmp	.-8      	; 0x196 <readADC+0x16>
  return (ADC);
 19e:	80 91 78 00 	lds	r24, 0x0078
 1a2:	90 91 79 00 	lds	r25, 0x0079
}
 1a6:	08 95       	ret

000001a8 <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	26 17       	cp	r18, r22
 1ac:	31 f0       	breq	.+12     	; 0x1ba <initValues+0x12>
     *arr = value;
 1ae:	fc 01       	movw	r30, r24
 1b0:	41 93       	st	Z+, r20
 1b2:	51 93       	st	Z+, r21
 1b4:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	f8 cf       	rjmp	.-16     	; 0x1aa <initValues+0x2>
     *arr = value;
     arr++;
  }
}
 1ba:	08 95       	ret

000001bc <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	eb 01       	movw	r28, r22
 1c4:	c1 50       	subi	r28, 0x01	; 1
 1c6:	d0 48       	sbci	r29, 0x80	; 128
 1c8:	cc 0f       	add	r28, r28
 1ca:	dd 1f       	adc	r29, r29
 1cc:	c8 0f       	add	r28, r24
 1ce:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	61 50       	subi	r22, 0x01	; 1
 1d4:	71 09       	sbc	r23, r1
 1d6:	29 2f       	mov	r18, r25
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	26 17       	cp	r18, r22
 1dc:	37 07       	cpc	r19, r23
 1de:	44 f4       	brge	.+16     	; 0x1f0 <storeNewADC+0x34>
 1e0:	fe 01       	movw	r30, r28
    *arr = *(arr-1);
 1e2:	32 91       	ld	r19, -Z
 1e4:	22 91       	ld	r18, -Z
 1e6:	39 83       	std	Y+1, r19	; 0x01
 1e8:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 1ea:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
 1ec:	ef 01       	movw	r28, r30
 1ee:	f3 cf       	rjmp	.-26     	; 0x1d6 <storeNewADC+0x1a>
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 1f0:	84 2f       	mov	r24, r20
 1f2:	0e 94 c0 00 	call	0x180	; 0x180 <readADC>
 1f6:	99 83       	std	Y+1, r25	; 0x01
 1f8:	88 83       	st	Y, r24
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 200:	fc 01       	movw	r30, r24
 202:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	23 17       	cp	r18, r19
 20e:	41 f0       	breq	.+16     	; 0x220 <getAverage+0x20>
    sum = sum + *arr;
 210:	41 91       	ld	r20, Z+
 212:	51 91       	ld	r21, Z+
 214:	64 0f       	add	r22, r20
 216:	75 1f       	adc	r23, r21
 218:	81 1d       	adc	r24, r1
 21a:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <getAverage+0xc>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodsi4>
  return avg;
}
 22a:	c9 01       	movw	r24, r18
 22c:	08 95       	ret

0000022e <initTimer1Servo>:

void initTimer1Servo(void) {
  /* Set up Timer1 (16bit) to give a pulse every 50ms */
  
  //Use Fast PWM mode, counter max in ICR1
  TCCR1A |= (1 << WGM11);
 22e:	e0 e8       	ldi	r30, 0x80	; 128
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
  TCCR1B |= (1 << WGM12) | (1 << WGM13);
 238:	a1 e8       	ldi	r26, 0x81	; 129
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	8c 91       	ld	r24, X
 23e:	88 61       	ori	r24, 0x18	; 24
 240:	8c 93       	st	X, r24
  
  // /1 prescaling -- counting in microseconds
  TCCR1B |= (1 << CS10);
 242:	8c 91       	ld	r24, X
 244:	81 60       	ori	r24, 0x01	; 1
 246:	8c 93       	st	X, r24
  
  //TOP value = 50ms
  ICR1 = 50000;
 248:	80 e5       	ldi	r24, 0x50	; 80
 24a:	93 ec       	ldi	r25, 0xC3	; 195
 24c:	90 93 87 00 	sts	0x0087, r25
 250:	80 93 86 00 	sts	0x0086, r24
  
  //Direct output on PB1 (OC1A) and PB2 (OC1B)
  TCCR1A |= (1 << COM1A1);
 254:	80 81       	ld	r24, Z
 256:	80 68       	ori	r24, 0x80	; 128
 258:	80 83       	st	Z, r24
  TCCR1A |= (1 << COM1B1);
 25a:	80 81       	ld	r24, Z
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	80 83       	st	Z, r24
  
  //set pins for output
  DDRB |= (1 << SERVO1);
 260:	21 9a       	sbi	0x04, 1	; 4
  DDRB |= (1 << SERVO2);
 262:	22 9a       	sbi	0x04, 2	; 4
  
  OCR1A = CW;
 264:	84 ec       	ldi	r24, 0xC4	; 196
 266:	99 e0       	ldi	r25, 0x09	; 9
 268:	90 93 89 00 	sts	0x0089, r25
 26c:	80 93 88 00 	sts	0x0088, r24
  OCR1B = CW;
 270:	90 93 8b 00 	sts	0x008B, r25
 274:	80 93 8a 00 	sts	0x008A, r24
 278:	08 95       	ret

0000027a <initTimer0PWM>:

void initTimer0PWM(void){
  /* Set up Timer0 (8bit) */
  
  //Use Mode 3, FastPWM
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 27a:	84 b5       	in	r24, 0x24	; 36
 27c:	83 60       	ori	r24, 0x03	; 3
 27e:	84 bd       	out	0x24, r24	; 36

  //Clear at match, set at bottom
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
 280:	84 b5       	in	r24, 0x24	; 36
 282:	80 6a       	ori	r24, 0xA0	; 160
 284:	84 bd       	out	0x24, r24	; 36
  
  // No prescale, gives freq = ~4kHz
  TCCR0B |= (1<<CS00);
 286:	85 b5       	in	r24, 0x25	; 37
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	85 bd       	out	0x25, r24	; 37
  
  //set pins for output
  DDRD |= (1 << DRIVER1PWM) | (1 << DRIVER2PWM);
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	80 66       	ori	r24, 0x60	; 96
 290:	8a b9       	out	0x0a, r24	; 10
 292:	08 95       	ret

00000294 <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  //set for output
  DDRB |= (1<<DRIVER1A);
 294:	20 9a       	sbi	0x04, 0	; 4
  DDRB |= (1<<DRIVER1B);
 296:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2A);
 298:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2B);
 29a:	25 9a       	sbi	0x04, 5	; 4
  //init to zero
  pin_lo('B',DRIVER1A);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	82 e4       	ldi	r24, 0x42	; 66
 2a2:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
  pin_lo('D',DRIVER1B);
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	84 e4       	ldi	r24, 0x44	; 68
 2ac:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
  pin_lo('B',DRIVER2A);
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
  pin_lo('B',DRIVER2B);
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0c 94 9f 02 	jmp	0x53e	; 0x53e <pin_lo>

000002c4 <computeLeftMotorPWM>:
}

uint8_t computeLeftMotorPWM(int vValue, int hValue){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
  
  int leftMotor;
  
  /* 1. Check if horizontal joystick is out of center position and adjust vertical values */
  if(hValue > 531 || hValue < 451){
 2ca:	cb 01       	movw	r24, r22
 2cc:	83 5c       	subi	r24, 0xC3	; 195
 2ce:	91 40       	sbci	r25, 0x01	; 1
 2d0:	81 35       	cpi	r24, 0x51	; 81
 2d2:	91 05       	cpc	r25, r1
 2d4:	80 f0       	brcs	.+32     	; 0x2f6 <computeLeftMotorPWM+0x32>
    leftMotor = (int)(vValue - (hValue-511)/2);
 2d6:	6f 5f       	subi	r22, 0xFF	; 255
 2d8:	71 40       	sbci	r23, 0x01	; 1
 2da:	77 ff       	sbrs	r23, 7
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <computeLeftMotorPWM+0x1e>
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	75 95       	asr	r23
 2e4:	67 95       	ror	r22
 2e6:	c6 1b       	sub	r28, r22
 2e8:	d7 0b       	sbc	r29, r23
    //keep values within bounds
    if (leftMotor > 1023)
 2ea:	c1 15       	cp	r28, r1
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	d8 07       	cpc	r29, r24
 2f0:	3c f4       	brge	.+14     	; 0x300 <computeLeftMotorPWM+0x3c>
      leftMotor = 1023;
    if (leftMotor < 0)
 2f2:	d7 fd       	sbrc	r29, 7
 2f4:	22 c0       	rjmp	.+68     	; 0x33a <computeLeftMotorPWM+0x76>
  }else{
    leftMotor = vValue;
  }
  
  /* 2. Convert Value to control digital out lines and 8 bit PWM */
  if(leftMotor > 531){              //forwards
 2f6:	c4 31       	cpi	r28, 0x14	; 20
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	d8 07       	cpc	r29, r24
 2fc:	cc f0       	brlt	.+50     	; 0x330 <computeLeftMotorPWM+0x6c>
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <computeLeftMotorPWM+0x40>
  /* 1. Check if horizontal joystick is out of center position and adjust vertical values */
  if(hValue > 531 || hValue < 451){
    leftMotor = (int)(vValue - (hValue-511)/2);
    //keep values within bounds
    if (leftMotor > 1023)
      leftMotor = 1023;
 300:	cf ef       	ldi	r28, 0xFF	; 255
 302:	d3 e0       	ldi	r29, 0x03	; 3
  }
  
  /* 2. Convert Value to control digital out lines and 8 bit PWM */
  if(leftMotor > 531){              //forwards
    //set direction bits
    pin_hi('B', DRIVER1A);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	0e 94 76 02 	call	0x4ec	; 0x4ec <pin_hi>
    pin_lo('D', DRIVER1B);
 30e:	64 e0       	ldi	r22, 0x04	; 4
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	84 e4       	ldi	r24, 0x44	; 68
 314:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    //convert ADC to PWM (0-255)
    leftMotor = (leftMotor - 513.0)/2;
 318:	be 01       	movw	r22, r28
 31a:	88 27       	eor	r24, r24
 31c:	77 fd       	sbrc	r23, 7
 31e:	80 95       	com	r24
 320:	98 2f       	mov	r25, r24
 322:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e4       	ldi	r19, 0x40	; 64
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	54 e4       	ldi	r21, 0x44	; 68
 32e:	1e c0       	rjmp	.+60     	; 0x36c <computeLeftMotorPWM+0xa8>
  }else if(leftMotor < 451){        //backwards
 330:	c3 3c       	cpi	r28, 0xC3	; 195
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	d8 07       	cpc	r29, r24
 336:	34 f5       	brge	.+76     	; 0x384 <computeLeftMotorPWM+0xc0>
 338:	02 c0       	rjmp	.+4      	; 0x33e <computeLeftMotorPWM+0x7a>
    leftMotor = (int)(vValue - (hValue-511)/2);
    //keep values within bounds
    if (leftMotor > 1023)
      leftMotor = 1023;
    if (leftMotor < 0)
      leftMotor = 0;
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
    pin_lo('D', DRIVER1B);
    //convert ADC to PWM (0-255)
    leftMotor = (leftMotor - 513.0)/2;
  }else if(leftMotor < 451){        //backwards
    //set direction bits
    pin_lo('B', DRIVER1A);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    pin_hi('D', DRIVER1B);
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	84 e4       	ldi	r24, 0x44	; 68
 34e:	0e 94 76 02 	call	0x4ec	; 0x4ec <pin_hi>
    //convert ADC to PWM (0-255)
    leftMotor = (510.0 - (float)leftMotor)/2;
 352:	be 01       	movw	r22, r28
 354:	88 27       	eor	r24, r24
 356:	77 fd       	sbrc	r23, 7
 358:	80 95       	com	r24
 35a:	98 2f       	mov	r25, r24
 35c:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 360:	9b 01       	movw	r18, r22
 362:	ac 01       	movw	r20, r24
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	93 e4       	ldi	r25, 0x43	; 67
 36c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__subsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 37c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
 380:	86 2f       	mov	r24, r22
 382:	0b c0       	rjmp	.+22     	; 0x39a <computeLeftMotorPWM+0xd6>
  }else{                            //center
    //set direction bits
    pin_lo('B', DRIVER1A);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	82 e4       	ldi	r24, 0x42	; 66
 38a:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    pin_lo('D', DRIVER1B);
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	84 e4       	ldi	r24, 0x44	; 68
 394:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    //set PWM to zero
    leftMotor = 0;
 398:	80 e0       	ldi	r24, 0x00	; 0
  }
  
  return (uint8_t) leftMotor;
  
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <computeRightMotorPWM>:

uint8_t computeRightMotorPWM(int vValue, int hValue){
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
  
  int rightMotor;
  
  /* 1. Check if horizontal joystick is out of center position and adjust vertical values */
  if(hValue > 531 || hValue < 451){
 3a6:	cb 01       	movw	r24, r22
 3a8:	83 5c       	subi	r24, 0xC3	; 195
 3aa:	91 40       	sbci	r25, 0x01	; 1
 3ac:	81 35       	cpi	r24, 0x51	; 81
 3ae:	91 05       	cpc	r25, r1
 3b0:	80 f0       	brcs	.+32     	; 0x3d2 <computeRightMotorPWM+0x32>
    rightMotor = (int)(vValue + (hValue-511)/2);
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	71 40       	sbci	r23, 0x01	; 1
 3b6:	77 ff       	sbrs	r23, 7
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <computeRightMotorPWM+0x1e>
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	75 95       	asr	r23
 3c0:	67 95       	ror	r22
 3c2:	c6 0f       	add	r28, r22
 3c4:	d7 1f       	adc	r29, r23
    //keep values within bounds
    if (rightMotor > 1023)
 3c6:	c1 15       	cp	r28, r1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	d8 07       	cpc	r29, r24
 3cc:	3c f4       	brge	.+14     	; 0x3dc <computeRightMotorPWM+0x3c>
      rightMotor = 1023;
    if (rightMotor < 0)
 3ce:	d7 fd       	sbrc	r29, 7
 3d0:	22 c0       	rjmp	.+68     	; 0x416 <computeRightMotorPWM+0x76>
  }else{
    rightMotor = vValue;
  }
  
  /* 2. Convert Value to control digital out lines and 8 bit PWM */
  if(rightMotor > 531){              //forwards
 3d2:	c4 31       	cpi	r28, 0x14	; 20
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	d8 07       	cpc	r29, r24
 3d8:	cc f0       	brlt	.+50     	; 0x40c <computeRightMotorPWM+0x6c>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <computeRightMotorPWM+0x40>
  /* 1. Check if horizontal joystick is out of center position and adjust vertical values */
  if(hValue > 531 || hValue < 451){
    rightMotor = (int)(vValue + (hValue-511)/2);
    //keep values within bounds
    if (rightMotor > 1023)
      rightMotor = 1023;
 3dc:	cf ef       	ldi	r28, 0xFF	; 255
 3de:	d3 e0       	ldi	r29, 0x03	; 3
  }
  
  /* 2. Convert Value to control digital out lines and 8 bit PWM */
  if(rightMotor > 531){              //forwards
    //set direction bits
    pin_lo('B', DRIVER2A);
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	82 e4       	ldi	r24, 0x42	; 66
 3e6:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    pin_hi('B', DRIVER2B);
 3ea:	65 e0       	ldi	r22, 0x05	; 5
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	0e 94 76 02 	call	0x4ec	; 0x4ec <pin_hi>
    //convert ADC to PWM (0-255)
    rightMotor = (rightMotor - 513.0)/2;
 3f4:	be 01       	movw	r22, r28
 3f6:	88 27       	eor	r24, r24
 3f8:	77 fd       	sbrc	r23, 7
 3fa:	80 95       	com	r24
 3fc:	98 2f       	mov	r25, r24
 3fe:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e4       	ldi	r19, 0x40	; 64
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	54 e4       	ldi	r21, 0x44	; 68
 40a:	1e c0       	rjmp	.+60     	; 0x448 <computeRightMotorPWM+0xa8>
  }else if(rightMotor < 451){        //backwards
 40c:	c3 3c       	cpi	r28, 0xC3	; 195
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	d8 07       	cpc	r29, r24
 412:	34 f5       	brge	.+76     	; 0x460 <computeRightMotorPWM+0xc0>
 414:	02 c0       	rjmp	.+4      	; 0x41a <computeRightMotorPWM+0x7a>
    rightMotor = (int)(vValue + (hValue-511)/2);
    //keep values within bounds
    if (rightMotor > 1023)
      rightMotor = 1023;
    if (rightMotor < 0)
      rightMotor = 0;
 416:	c0 e0       	ldi	r28, 0x00	; 0
 418:	d0 e0       	ldi	r29, 0x00	; 0
    pin_hi('B', DRIVER2B);
    //convert ADC to PWM (0-255)
    rightMotor = (rightMotor - 513.0)/2;
  }else if(rightMotor < 451){        //backwards
    //set direction bits
    pin_hi('B', DRIVER2A);
 41a:	64 e0       	ldi	r22, 0x04	; 4
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	82 e4       	ldi	r24, 0x42	; 66
 420:	0e 94 76 02 	call	0x4ec	; 0x4ec <pin_hi>
    pin_lo('B', DRIVER2B);
 424:	65 e0       	ldi	r22, 0x05	; 5
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	82 e4       	ldi	r24, 0x42	; 66
 42a:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    //convert ADC to PWM (0-255)
    rightMotor = (510.0 - (float)rightMotor)/2;
 42e:	be 01       	movw	r22, r28
 430:	88 27       	eor	r24, r24
 432:	77 fd       	sbrc	r23, 7
 434:	80 95       	com	r24
 436:	98 2f       	mov	r25, r24
 438:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	93 e4       	ldi	r25, 0x43	; 67
 448:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__subsf3>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	5f e3       	ldi	r21, 0x3F	; 63
 454:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 458:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
 45c:	86 2f       	mov	r24, r22
 45e:	0b c0       	rjmp	.+22     	; 0x476 <computeRightMotorPWM+0xd6>
  }else{                            //center
    //set direction bits
    pin_lo('B', DRIVER2A);
 460:	64 e0       	ldi	r22, 0x04	; 4
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	82 e4       	ldi	r24, 0x42	; 66
 466:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    pin_lo('B', DRIVER2B);
 46a:	65 e0       	ldi	r22, 0x05	; 5
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	82 e4       	ldi	r24, 0x42	; 66
 470:	0e 94 9f 02 	call	0x53e	; 0x53e <pin_lo>
    //set PWM to zero
    rightMotor = 0;
 474:	80 e0       	ldi	r24, 0x00	; 0
  }
  
  return (uint8_t) rightMotor;
  
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <initInterrupts>:

void initInterrupts(void){
    //set as inputs
    INT_DDR &= ~(1<<INTERRUPT0);
 47c:	52 98       	cbi	0x0a, 2	; 10
    INT_DDR &= ~(1<<INTERRUPT1);
 47e:	53 98       	cbi	0x0a, 3	; 10
    //pullups
    INT_PORT |= (1<<INTERRUPT0) | (1<<INTERRUPT1);
 480:	8b b1       	in	r24, 0x0b	; 11
 482:	8c 60       	ori	r24, 0x0C	; 12
 484:	8b b9       	out	0x0b, r24	; 11
    //interrupt set up
    EIMSK |= (1<<INT0) | (1<<INT1);
 486:	8d b3       	in	r24, 0x1d	; 29
 488:	83 60       	ori	r24, 0x03	; 3
 48a:	8d bb       	out	0x1d, r24	; 29
    EICRA |= (1<<ISC01) | (1<<ISC11);
 48c:	e9 e6       	ldi	r30, 0x69	; 105
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	8a 60       	ori	r24, 0x0A	; 10
 494:	80 83       	st	Z, r24
    sei();
 496:	78 94       	sei
 498:	08 95       	ret

0000049a <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	31 f1       	breq	.+76     	; 0x4ea <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
 49e:	82 34       	cpi	r24, 0x42	; 66
 4a0:	59 f4       	brne	.+22     	; 0x4b8 <toggle+0x1e>
      PORTB ^= (1<<bit);
 4a2:	25 b1       	in	r18, 0x05	; 5
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	06 2e       	mov	r0, r22
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <toggle+0x14>
 4ac:	88 0f       	add	r24, r24
 4ae:	0a 94       	dec	r0
 4b0:	ea f7       	brpl	.-6      	; 0x4ac <toggle+0x12>
 4b2:	28 27       	eor	r18, r24
 4b4:	25 b9       	out	0x05, r18	; 5
 4b6:	08 95       	ret
    }else if (port == 'C'){
 4b8:	83 34       	cpi	r24, 0x43	; 67
 4ba:	59 f4       	brne	.+22     	; 0x4d2 <toggle+0x38>
      PORTC ^= (1<<bit);
 4bc:	28 b1       	in	r18, 0x08	; 8
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	06 2e       	mov	r0, r22
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <toggle+0x2e>
 4c6:	88 0f       	add	r24, r24
 4c8:	0a 94       	dec	r0
 4ca:	ea f7       	brpl	.-6      	; 0x4c6 <toggle+0x2c>
 4cc:	28 27       	eor	r18, r24
 4ce:	28 b9       	out	0x08, r18	; 8
 4d0:	08 95       	ret
    }else if (port == 'D'){
 4d2:	84 34       	cpi	r24, 0x44	; 68
 4d4:	51 f4       	brne	.+20     	; 0x4ea <toggle+0x50>
      PORTD ^= (1<<bit);
 4d6:	2b b1       	in	r18, 0x0b	; 11
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	06 2e       	mov	r0, r22
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <toggle+0x48>
 4e0:	88 0f       	add	r24, r24
 4e2:	0a 94       	dec	r0
 4e4:	ea f7       	brpl	.-6      	; 0x4e0 <toggle+0x46>
 4e6:	28 27       	eor	r18, r24
 4e8:	2b b9       	out	0x0b, r18	; 11
 4ea:	08 95       	ret

000004ec <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
 4ec:	81 34       	cpi	r24, 0x41	; 65
 4ee:	31 f1       	breq	.+76     	; 0x53c <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
 4f0:	82 34       	cpi	r24, 0x42	; 66
 4f2:	59 f4       	brne	.+22     	; 0x50a <pin_hi+0x1e>
      PORTB |= (1<<bit);
 4f4:	25 b1       	in	r18, 0x05	; 5
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	06 2e       	mov	r0, r22
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <pin_hi+0x14>
 4fe:	88 0f       	add	r24, r24
 500:	0a 94       	dec	r0
 502:	ea f7       	brpl	.-6      	; 0x4fe <pin_hi+0x12>
 504:	28 2b       	or	r18, r24
 506:	25 b9       	out	0x05, r18	; 5
 508:	08 95       	ret
    }else if (port == 'C'){
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	59 f4       	brne	.+22     	; 0x524 <pin_hi+0x38>
      PORTC |= (1<<bit);
 50e:	28 b1       	in	r18, 0x08	; 8
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	06 2e       	mov	r0, r22
 516:	01 c0       	rjmp	.+2      	; 0x51a <pin_hi+0x2e>
 518:	88 0f       	add	r24, r24
 51a:	0a 94       	dec	r0
 51c:	ea f7       	brpl	.-6      	; 0x518 <pin_hi+0x2c>
 51e:	28 2b       	or	r18, r24
 520:	28 b9       	out	0x08, r18	; 8
 522:	08 95       	ret
    }else if (port == 'D'){
 524:	84 34       	cpi	r24, 0x44	; 68
 526:	51 f4       	brne	.+20     	; 0x53c <pin_hi+0x50>
      PORTD |= (1<<bit);
 528:	2b b1       	in	r18, 0x0b	; 11
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	06 2e       	mov	r0, r22
 530:	01 c0       	rjmp	.+2      	; 0x534 <pin_hi+0x48>
 532:	88 0f       	add	r24, r24
 534:	0a 94       	dec	r0
 536:	ea f7       	brpl	.-6      	; 0x532 <pin_hi+0x46>
 538:	28 2b       	or	r18, r24
 53a:	2b b9       	out	0x0b, r18	; 11
 53c:	08 95       	ret

0000053e <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 53e:	81 34       	cpi	r24, 0x41	; 65
 540:	49 f1       	breq	.+82     	; 0x594 <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 542:	82 34       	cpi	r24, 0x42	; 66
 544:	61 f4       	brne	.+24     	; 0x55e <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 546:	25 b1       	in	r18, 0x05	; 5
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	06 2e       	mov	r0, r22
 54e:	01 c0       	rjmp	.+2      	; 0x552 <pin_lo+0x14>
 550:	88 0f       	add	r24, r24
 552:	0a 94       	dec	r0
 554:	ea f7       	brpl	.-6      	; 0x550 <pin_lo+0x12>
 556:	80 95       	com	r24
 558:	82 23       	and	r24, r18
 55a:	85 b9       	out	0x05, r24	; 5
 55c:	08 95       	ret
    }else if (port == 'C'){
 55e:	83 34       	cpi	r24, 0x43	; 67
 560:	61 f4       	brne	.+24     	; 0x57a <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 562:	28 b1       	in	r18, 0x08	; 8
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	06 2e       	mov	r0, r22
 56a:	01 c0       	rjmp	.+2      	; 0x56e <pin_lo+0x30>
 56c:	88 0f       	add	r24, r24
 56e:	0a 94       	dec	r0
 570:	ea f7       	brpl	.-6      	; 0x56c <pin_lo+0x2e>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	88 b9       	out	0x08, r24	; 8
 578:	08 95       	ret
    }else if (port == 'D'){
 57a:	84 34       	cpi	r24, 0x44	; 68
 57c:	59 f4       	brne	.+22     	; 0x594 <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 57e:	2b b1       	in	r18, 0x0b	; 11
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	06 2e       	mov	r0, r22
 586:	01 c0       	rjmp	.+2      	; 0x58a <pin_lo+0x4c>
 588:	88 0f       	add	r24, r24
 58a:	0a 94       	dec	r0
 58c:	ea f7       	brpl	.-6      	; 0x588 <pin_lo+0x4a>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	8b b9       	out	0x0b, r24	; 11
 594:	08 95       	ret

00000596 <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 596:	81 34       	cpi	r24, 0x41	; 65
 598:	49 f1       	breq	.+82     	; 0x5ec <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 59a:	82 34       	cpi	r24, 0x42	; 66
 59c:	61 f4       	brne	.+24     	; 0x5b6 <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 59e:	24 b1       	in	r18, 0x04	; 4
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	06 2e       	mov	r0, r22
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <set_as_input+0x14>
 5a8:	88 0f       	add	r24, r24
 5aa:	0a 94       	dec	r0
 5ac:	ea f7       	brpl	.-6      	; 0x5a8 <set_as_input+0x12>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	84 b9       	out	0x04, r24	; 4
 5b4:	08 95       	ret
    }else if (port == 'C'){
 5b6:	83 34       	cpi	r24, 0x43	; 67
 5b8:	61 f4       	brne	.+24     	; 0x5d2 <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 5ba:	27 b1       	in	r18, 0x07	; 7
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	06 2e       	mov	r0, r22
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <set_as_input+0x30>
 5c4:	88 0f       	add	r24, r24
 5c6:	0a 94       	dec	r0
 5c8:	ea f7       	brpl	.-6      	; 0x5c4 <set_as_input+0x2e>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	87 b9       	out	0x07, r24	; 7
 5d0:	08 95       	ret
    }else if (port == 'D'){
 5d2:	84 34       	cpi	r24, 0x44	; 68
 5d4:	59 f4       	brne	.+22     	; 0x5ec <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 5d6:	2a b1       	in	r18, 0x0a	; 10
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	06 2e       	mov	r0, r22
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <set_as_input+0x4c>
 5e0:	88 0f       	add	r24, r24
 5e2:	0a 94       	dec	r0
 5e4:	ea f7       	brpl	.-6      	; 0x5e0 <set_as_input+0x4a>
 5e6:	80 95       	com	r24
 5e8:	82 23       	and	r24, r18
 5ea:	8a b9       	out	0x0a, r24	; 10
 5ec:	08 95       	ret

000005ee <set_as_output>:
    }
}

void set_as_output(char port, int bit)
{
    if(port == 'A'){
 5ee:	81 34       	cpi	r24, 0x41	; 65
 5f0:	31 f1       	breq	.+76     	; 0x63e <set_as_output+0x50>
      //DDRA |= (1<<bit);
    }else if (port == 'B'){
 5f2:	82 34       	cpi	r24, 0x42	; 66
 5f4:	59 f4       	brne	.+22     	; 0x60c <set_as_output+0x1e>
      DDRB |= (1<<bit);
 5f6:	24 b1       	in	r18, 0x04	; 4
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	06 2e       	mov	r0, r22
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <set_as_output+0x14>
 600:	88 0f       	add	r24, r24
 602:	0a 94       	dec	r0
 604:	ea f7       	brpl	.-6      	; 0x600 <set_as_output+0x12>
 606:	28 2b       	or	r18, r24
 608:	24 b9       	out	0x04, r18	; 4
 60a:	08 95       	ret
    }else if (port == 'C'){
 60c:	83 34       	cpi	r24, 0x43	; 67
 60e:	59 f4       	brne	.+22     	; 0x626 <set_as_output+0x38>
      DDRC |= (1<<bit);
 610:	27 b1       	in	r18, 0x07	; 7
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	06 2e       	mov	r0, r22
 618:	01 c0       	rjmp	.+2      	; 0x61c <set_as_output+0x2e>
 61a:	88 0f       	add	r24, r24
 61c:	0a 94       	dec	r0
 61e:	ea f7       	brpl	.-6      	; 0x61a <set_as_output+0x2c>
 620:	28 2b       	or	r18, r24
 622:	27 b9       	out	0x07, r18	; 7
 624:	08 95       	ret
    }else if (port == 'D'){
 626:	84 34       	cpi	r24, 0x44	; 68
 628:	51 f4       	brne	.+20     	; 0x63e <set_as_output+0x50>
      DDRD |= (1<<bit);
 62a:	2a b1       	in	r18, 0x0a	; 10
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	06 2e       	mov	r0, r22
 632:	01 c0       	rjmp	.+2      	; 0x636 <set_as_output+0x48>
 634:	88 0f       	add	r24, r24
 636:	0a 94       	dec	r0
 638:	ea f7       	brpl	.-6      	; 0x634 <set_as_output+0x46>
 63a:	28 2b       	or	r18, r24
 63c:	2a b9       	out	0x0a, r18	; 10
 63e:	08 95       	ret

00000640 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 640:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 644:	8c e0       	ldi	r24, 0x0C	; 12
 646:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 64a:	e0 ec       	ldi	r30, 0xC0	; 192
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	82 60       	ori	r24, 0x02	; 2
 652:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 654:	88 e1       	ldi	r24, 0x18	; 24
 656:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	80 93 c2 00 	sts	0x00C2, r24
 660:	08 95       	ret

00000662 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 662:	90 91 c0 00 	lds	r25, 0x00C0
 666:	95 ff       	sbrs	r25, 5
 668:	fc cf       	rjmp	.-8      	; 0x662 <transmitByte>
  UDR0 = data;                                            /* send data */
 66a:	80 93 c6 00 	sts	0x00C6, r24
 66e:	08 95       	ret

00000670 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 670:	80 91 c0 00 	lds	r24, 0x00C0
 674:	87 ff       	sbrs	r24, 7
 676:	fc cf       	rjmp	.-8      	; 0x670 <receiveByte>
  return UDR0;                                /* return register value */
 678:	80 91 c6 00 	lds	r24, 0x00C6
}
 67c:	08 95       	ret

0000067e <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
  uint8_t i = 0;
 686:	10 e0       	ldi	r17, 0x00	; 0
  while (myString[i]) {
 688:	fe 01       	movw	r30, r28
 68a:	e1 0f       	add	r30, r17
 68c:	f1 1d       	adc	r31, r1
 68e:	80 81       	ld	r24, Z
 690:	88 23       	and	r24, r24
 692:	21 f0       	breq	.+8      	; 0x69c <printString+0x1e>
    transmitByte(myString[i]);
 694:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
    i++;
 698:	1f 5f       	subi	r17, 0xFF	; 255
 69a:	f6 cf       	rjmp	.-20     	; 0x688 <printString+0xa>
  }
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	08 95       	ret

000006a4 <readString>:

void readString(char myString[], uint8_t maxLength) {
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	7c 01       	movw	r14, r24
  char response;
  uint8_t i;
  i = 0;
 6b6:	d1 2c       	mov	r13, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 6b8:	06 2f       	mov	r16, r22
 6ba:	10 e0       	ldi	r17, 0x00	; 0
 6bc:	01 50       	subi	r16, 0x01	; 1
 6be:	11 09       	sbc	r17, r1
 6c0:	cd 2d       	mov	r28, r13
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
 6c4:	c0 17       	cp	r28, r16
 6c6:	d1 07       	cpc	r29, r17
 6c8:	44 f4       	brge	.+16     	; 0x6da <readString+0x36>
    response = receiveByte();
 6ca:	0e 94 38 03 	call	0x670	; 0x670 <receiveByte>
 6ce:	c8 2e       	mov	r12, r24
    transmitByte(response);                                    /* echo */
 6d0:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 6d4:	8d e0       	ldi	r24, 0x0D	; 13
 6d6:	c8 12       	cpse	r12, r24
 6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <readString+0x4e>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 6da:	ce 0d       	add	r28, r14
 6dc:	df 1d       	adc	r29, r15
 6de:	18 82       	st	Y, r1
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	ff 90       	pop	r15
 6ea:	ef 90       	pop	r14
 6ec:	df 90       	pop	r13
 6ee:	cf 90       	pop	r12
 6f0:	08 95       	ret
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 6f2:	ce 0d       	add	r28, r14
 6f4:	df 1d       	adc	r29, r15
 6f6:	c8 82       	st	Y, r12
      i++;
 6f8:	d3 94       	inc	r13
 6fa:	e2 cf       	rjmp	.-60     	; 0x6c0 <readString+0x1c>

000006fc <printByte>:
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}

void printByte(uint8_t byte) {
 6fc:	cf 93       	push	r28
 6fe:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 700:	64 e6       	ldi	r22, 0x64	; 100
 702:	0e 94 f7 05 	call	0xbee	; 0xbee <__udivmodqi4>
 706:	80 5d       	subi	r24, 0xD0	; 208
 708:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 70c:	2a e0       	ldi	r18, 0x0A	; 10
 70e:	8c 2f       	mov	r24, r28
 710:	62 2f       	mov	r22, r18
 712:	0e 94 f7 05 	call	0xbee	; 0xbee <__udivmodqi4>
 716:	c9 2f       	mov	r28, r25
 718:	0e 94 f7 05 	call	0xbee	; 0xbee <__udivmodqi4>
 71c:	80 e3       	ldi	r24, 0x30	; 48
 71e:	89 0f       	add	r24, r25
 720:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 724:	80 e3       	ldi	r24, 0x30	; 48
 726:	8c 0f       	add	r24, r28
}
 728:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 72a:	0c 94 31 03 	jmp	0x662	; 0x662 <transmitByte>

0000072e <printWord>:
}

void printWord(uint16_t word) {
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 738:	60 e1       	ldi	r22, 0x10	; 16
 73a:	77 e2       	ldi	r23, 0x27	; 39
 73c:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 740:	80 e3       	ldi	r24, 0x30	; 48
 742:	86 0f       	add	r24, r22
 744:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 748:	ce 01       	movw	r24, r28
 74a:	68 ee       	ldi	r22, 0xE8	; 232
 74c:	73 e0       	ldi	r23, 0x03	; 3
 74e:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 752:	cb 01       	movw	r24, r22
 754:	0a e0       	ldi	r16, 0x0A	; 10
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	b8 01       	movw	r22, r16
 75a:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 75e:	80 5d       	subi	r24, 0xD0	; 208
 760:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 764:	ce 01       	movw	r24, r28
 766:	64 e6       	ldi	r22, 0x64	; 100
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 76e:	cb 01       	movw	r24, r22
 770:	b8 01       	movw	r22, r16
 772:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 776:	80 5d       	subi	r24, 0xD0	; 208
 778:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 77c:	ce 01       	movw	r24, r28
 77e:	b8 01       	movw	r22, r16
 780:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 784:	c8 2f       	mov	r28, r24
 786:	cb 01       	movw	r24, r22
 788:	b8 01       	movw	r22, r16
 78a:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodhi4>
 78e:	80 5d       	subi	r24, 0xD0	; 208
 790:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 794:	80 e3       	ldi	r24, 0x30	; 48
 796:	8c 0f       	add	r24, r28
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 7a0:	0c 94 31 03 	jmp	0x662	; 0x662 <transmitByte>

000007a4 <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	1f 92       	push	r1
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 7b2:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	01 2e       	mov	r0, r17
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <printBinaryByte+0x1c>
 7bc:	95 95       	asr	r25
 7be:	87 95       	ror	r24
 7c0:	0a 94       	dec	r0
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <printBinaryByte+0x18>
 7c4:	80 ff       	sbrs	r24, 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <printBinaryByte+0x28>
      transmitByte('1');
 7c8:	81 e3       	ldi	r24, 0x31	; 49
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <printBinaryByte+0x2a>
    else
      transmitByte('0');
 7cc:	80 e3       	ldi	r24, 0x30	; 48
 7ce:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 7d2:	11 50       	subi	r17, 0x01	; 1
 7d4:	78 f7       	brcc	.-34     	; 0x7b4 <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 7d6:	0f 90       	pop	r0
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	08 95       	ret

000007e0 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 7e0:	8a 30       	cpi	r24, 0x0A	; 10
 7e2:	10 f4       	brcc	.+4      	; 0x7e8 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 7e4:	80 5d       	subi	r24, 0xD0	; 208
 7e6:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 7e8:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 7ea:	08 95       	ret

000007ec <printHexByte>:

void printHexByte(uint8_t byte) {
 7ec:	cf 93       	push	r28
 7ee:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 7f0:	82 95       	swap	r24
 7f2:	8f 70       	andi	r24, 0x0F	; 15
 7f4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <nibbleToHexCharacter>
 7f8:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 7fc:	8c 2f       	mov	r24, r28
 7fe:	8f 70       	andi	r24, 0x0F	; 15
 800:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <nibbleToHexCharacter>
}
 804:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 806:	0c 94 31 03 	jmp	0x662	; 0x662 <transmitByte>

0000080a <getNumber>:
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	d0 e3       	ldi	r29, 0x30	; 48
 814:	c0 e3       	ldi	r28, 0x30	; 48
 816:	00 e3       	ldi	r16, 0x30	; 48
 818:	0e 94 38 03 	call	0x670	; 0x670 <receiveByte>
 81c:	18 2f       	mov	r17, r24
 81e:	0e 94 31 03 	call	0x662	; 0x662 <transmitByte>
 822:	1d 30       	cpi	r17, 0x0D	; 13
 824:	21 f0       	breq	.+8      	; 0x82e <getNumber+0x24>
 826:	0c 2f       	mov	r16, r28
 828:	cd 2f       	mov	r28, r29
 82a:	d1 2f       	mov	r29, r17
 82c:	f5 cf       	rjmp	.-22     	; 0x818 <getNumber+0xe>
 82e:	d0 53       	subi	r29, 0x30	; 48
 830:	00 53       	subi	r16, 0x30	; 48
 832:	84 e6       	ldi	r24, 0x64	; 100
 834:	08 9f       	mul	r16, r24
 836:	d0 0d       	add	r29, r0
 838:	11 24       	eor	r1, r1
 83a:	9c 2f       	mov	r25, r28
 83c:	99 0f       	add	r25, r25
 83e:	90 56       	subi	r25, 0x60	; 96
 840:	89 2f       	mov	r24, r25
 842:	88 0f       	add	r24, r24
 844:	88 0f       	add	r24, r24
 846:	89 0f       	add	r24, r25
 848:	8d 0f       	add	r24, r29
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	08 95       	ret

00000854 <main>:
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	c8 57       	subi	r28, 0x78	; 120
 85e:	d1 09       	sbc	r29, r1
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	0e 94 b2 00 	call	0x164	; 0x164 <initADC>
 86e:	0e 94 17 01 	call	0x22e	; 0x22e <initTimer1Servo>
 872:	0e 94 4a 01 	call	0x294	; 0x294 <initMotorDriverIO>
 876:	0e 94 3d 01 	call	0x27a	; 0x27a <initTimer0PWM>
 87a:	0e 94 3e 02 	call	0x47c	; 0x47c <initInterrupts>
 87e:	4f ef       	ldi	r20, 0xFF	; 255
 880:	51 e0       	ldi	r21, 0x01	; 1
 882:	6e e1       	ldi	r22, 0x1E	; 30
 884:	ce 01       	movw	r24, r28
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <initValues>
 88c:	4f ef       	ldi	r20, 0xFF	; 255
 88e:	51 e0       	ldi	r21, 0x01	; 1
 890:	6e e1       	ldi	r22, 0x1E	; 30
 892:	ce 01       	movw	r24, r28
 894:	cd 96       	adiw	r24, 0x3d	; 61
 896:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <initValues>
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	6e e1       	ldi	r22, 0x1E	; 30
 89e:	ce 01       	movw	r24, r28
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <storeNewADC>
 8a6:	6e e1       	ldi	r22, 0x1E	; 30
 8a8:	ce 01       	movw	r24, r28
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	0e 94 00 01 	call	0x200	; 0x200 <getAverage>
 8b0:	8c 01       	movw	r16, r24
 8b2:	41 e0       	ldi	r20, 0x01	; 1
 8b4:	6e e1       	ldi	r22, 0x1E	; 30
 8b6:	ce 01       	movw	r24, r28
 8b8:	cd 96       	adiw	r24, 0x3d	; 61
 8ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <storeNewADC>
 8be:	6e e1       	ldi	r22, 0x1E	; 30
 8c0:	ce 01       	movw	r24, r28
 8c2:	cd 96       	adiw	r24, 0x3d	; 61
 8c4:	0e 94 00 01 	call	0x200	; 0x200 <getAverage>
 8c8:	7c 01       	movw	r14, r24
 8ca:	bc 01       	movw	r22, r24
 8cc:	c8 01       	movw	r24, r16
 8ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <computeLeftMotorPWM>
 8d2:	87 bd       	out	0x27, r24	; 39
 8d4:	b7 01       	movw	r22, r14
 8d6:	c8 01       	movw	r24, r16
 8d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <computeRightMotorPWM>
 8dc:	88 bd       	out	0x28, r24	; 40
 8de:	dd cf       	rjmp	.-70     	; 0x89a <main+0x46>

000008e0 <__subsf3>:
 8e0:	50 58       	subi	r21, 0x80	; 128

000008e2 <__addsf3>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	aa 27       	eor	r26, r26
 8e6:	0e d0       	rcall	.+28     	; 0x904 <__addsf3x>
 8e8:	e5 c0       	rjmp	.+458    	; 0xab4 <__fp_round>
 8ea:	d6 d0       	rcall	.+428    	; 0xa98 <__fp_pscA>
 8ec:	30 f0       	brcs	.+12     	; 0x8fa <__addsf3+0x18>
 8ee:	db d0       	rcall	.+438    	; 0xaa6 <__fp_pscB>
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__addsf3+0x18>
 8f2:	31 f4       	brne	.+12     	; 0x900 <__stack+0x1>
 8f4:	9f 3f       	cpi	r25, 0xFF	; 255
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__addsf3+0x1a>
 8f8:	1e f4       	brtc	.+6      	; 0x900 <__stack+0x1>
 8fa:	cb c0       	rjmp	.+406    	; 0xa92 <__fp_nan>
 8fc:	0e f4       	brtc	.+2      	; 0x900 <__stack+0x1>
 8fe:	e0 95       	com	r30
 900:	e7 fb       	bst	r30, 7
 902:	c1 c0       	rjmp	.+386    	; 0xa86 <__fp_inf>

00000904 <__addsf3x>:
 904:	e9 2f       	mov	r30, r25
 906:	e7 d0       	rcall	.+462    	; 0xad6 <__fp_split3>
 908:	80 f3       	brcs	.-32     	; 0x8ea <__addsf3+0x8>
 90a:	ba 17       	cp	r27, r26
 90c:	62 07       	cpc	r22, r18
 90e:	73 07       	cpc	r23, r19
 910:	84 07       	cpc	r24, r20
 912:	95 07       	cpc	r25, r21
 914:	18 f0       	brcs	.+6      	; 0x91c <__addsf3x+0x18>
 916:	71 f4       	brne	.+28     	; 0x934 <__addsf3x+0x30>
 918:	9e f5       	brtc	.+102    	; 0x980 <__addsf3x+0x7c>
 91a:	ff c0       	rjmp	.+510    	; 0xb1a <__fp_zero>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__addsf3x+0x1c>
 91e:	e0 95       	com	r30
 920:	0b 2e       	mov	r0, r27
 922:	ba 2f       	mov	r27, r26
 924:	a0 2d       	mov	r26, r0
 926:	0b 01       	movw	r0, r22
 928:	b9 01       	movw	r22, r18
 92a:	90 01       	movw	r18, r0
 92c:	0c 01       	movw	r0, r24
 92e:	ca 01       	movw	r24, r20
 930:	a0 01       	movw	r20, r0
 932:	11 24       	eor	r1, r1
 934:	ff 27       	eor	r31, r31
 936:	59 1b       	sub	r21, r25
 938:	99 f0       	breq	.+38     	; 0x960 <__addsf3x+0x5c>
 93a:	59 3f       	cpi	r21, 0xF9	; 249
 93c:	50 f4       	brcc	.+20     	; 0x952 <__addsf3x+0x4e>
 93e:	50 3e       	cpi	r21, 0xE0	; 224
 940:	68 f1       	brcs	.+90     	; 0x99c <__addsf3x+0x98>
 942:	1a 16       	cp	r1, r26
 944:	f0 40       	sbci	r31, 0x00	; 0
 946:	a2 2f       	mov	r26, r18
 948:	23 2f       	mov	r18, r19
 94a:	34 2f       	mov	r19, r20
 94c:	44 27       	eor	r20, r20
 94e:	58 5f       	subi	r21, 0xF8	; 248
 950:	f3 cf       	rjmp	.-26     	; 0x938 <__addsf3x+0x34>
 952:	46 95       	lsr	r20
 954:	37 95       	ror	r19
 956:	27 95       	ror	r18
 958:	a7 95       	ror	r26
 95a:	f0 40       	sbci	r31, 0x00	; 0
 95c:	53 95       	inc	r21
 95e:	c9 f7       	brne	.-14     	; 0x952 <__addsf3x+0x4e>
 960:	7e f4       	brtc	.+30     	; 0x980 <__addsf3x+0x7c>
 962:	1f 16       	cp	r1, r31
 964:	ba 0b       	sbc	r27, r26
 966:	62 0b       	sbc	r22, r18
 968:	73 0b       	sbc	r23, r19
 96a:	84 0b       	sbc	r24, r20
 96c:	ba f0       	brmi	.+46     	; 0x99c <__addsf3x+0x98>
 96e:	91 50       	subi	r25, 0x01	; 1
 970:	a1 f0       	breq	.+40     	; 0x99a <__addsf3x+0x96>
 972:	ff 0f       	add	r31, r31
 974:	bb 1f       	adc	r27, r27
 976:	66 1f       	adc	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	c2 f7       	brpl	.-16     	; 0x96e <__addsf3x+0x6a>
 97e:	0e c0       	rjmp	.+28     	; 0x99c <__addsf3x+0x98>
 980:	ba 0f       	add	r27, r26
 982:	62 1f       	adc	r22, r18
 984:	73 1f       	adc	r23, r19
 986:	84 1f       	adc	r24, r20
 988:	48 f4       	brcc	.+18     	; 0x99c <__addsf3x+0x98>
 98a:	87 95       	ror	r24
 98c:	77 95       	ror	r23
 98e:	67 95       	ror	r22
 990:	b7 95       	ror	r27
 992:	f7 95       	ror	r31
 994:	9e 3f       	cpi	r25, 0xFE	; 254
 996:	08 f0       	brcs	.+2      	; 0x99a <__addsf3x+0x96>
 998:	b3 cf       	rjmp	.-154    	; 0x900 <__stack+0x1>
 99a:	93 95       	inc	r25
 99c:	88 0f       	add	r24, r24
 99e:	08 f0       	brcs	.+2      	; 0x9a2 <__addsf3x+0x9e>
 9a0:	99 27       	eor	r25, r25
 9a2:	ee 0f       	add	r30, r30
 9a4:	97 95       	ror	r25
 9a6:	87 95       	ror	r24
 9a8:	08 95       	ret

000009aa <__fixsfsi>:
 9aa:	04 d0       	rcall	.+8      	; 0x9b4 <__fixunssfsi>
 9ac:	68 94       	set
 9ae:	b1 11       	cpse	r27, r1
 9b0:	b5 c0       	rjmp	.+362    	; 0xb1c <__fp_szero>
 9b2:	08 95       	ret

000009b4 <__fixunssfsi>:
 9b4:	98 d0       	rcall	.+304    	; 0xae6 <__fp_splitA>
 9b6:	88 f0       	brcs	.+34     	; 0x9da <__fixunssfsi+0x26>
 9b8:	9f 57       	subi	r25, 0x7F	; 127
 9ba:	90 f0       	brcs	.+36     	; 0x9e0 <__fixunssfsi+0x2c>
 9bc:	b9 2f       	mov	r27, r25
 9be:	99 27       	eor	r25, r25
 9c0:	b7 51       	subi	r27, 0x17	; 23
 9c2:	a0 f0       	brcs	.+40     	; 0x9ec <__fixunssfsi+0x38>
 9c4:	d1 f0       	breq	.+52     	; 0x9fa <__fixunssfsi+0x46>
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	1a f0       	brmi	.+6      	; 0x9d6 <__fixunssfsi+0x22>
 9d0:	ba 95       	dec	r27
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__fixunssfsi+0x12>
 9d4:	12 c0       	rjmp	.+36     	; 0x9fa <__fixunssfsi+0x46>
 9d6:	b1 30       	cpi	r27, 0x01	; 1
 9d8:	81 f0       	breq	.+32     	; 0x9fa <__fixunssfsi+0x46>
 9da:	9f d0       	rcall	.+318    	; 0xb1a <__fp_zero>
 9dc:	b1 e0       	ldi	r27, 0x01	; 1
 9de:	08 95       	ret
 9e0:	9c c0       	rjmp	.+312    	; 0xb1a <__fp_zero>
 9e2:	67 2f       	mov	r22, r23
 9e4:	78 2f       	mov	r23, r24
 9e6:	88 27       	eor	r24, r24
 9e8:	b8 5f       	subi	r27, 0xF8	; 248
 9ea:	39 f0       	breq	.+14     	; 0x9fa <__fixunssfsi+0x46>
 9ec:	b9 3f       	cpi	r27, 0xF9	; 249
 9ee:	cc f3       	brlt	.-14     	; 0x9e2 <__fixunssfsi+0x2e>
 9f0:	86 95       	lsr	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b3 95       	inc	r27
 9f8:	d9 f7       	brne	.-10     	; 0x9f0 <__fixunssfsi+0x3c>
 9fa:	3e f4       	brtc	.+14     	; 0xa0a <__fixunssfsi+0x56>
 9fc:	90 95       	com	r25
 9fe:	80 95       	com	r24
 a00:	70 95       	com	r23
 a02:	61 95       	neg	r22
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__floatunsisf>:
 a0c:	e8 94       	clt
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__floatsisf+0x12>

00000a10 <__floatsisf>:
 a10:	97 fb       	bst	r25, 7
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__floatsisf+0x12>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	99 23       	and	r25, r25
 a24:	a9 f0       	breq	.+42     	; 0xa50 <__floatsisf+0x40>
 a26:	f9 2f       	mov	r31, r25
 a28:	96 e9       	ldi	r25, 0x96	; 150
 a2a:	bb 27       	eor	r27, r27
 a2c:	93 95       	inc	r25
 a2e:	f6 95       	lsr	r31
 a30:	87 95       	ror	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f1 11       	cpse	r31, r1
 a3a:	f8 cf       	rjmp	.-16     	; 0xa2c <__floatsisf+0x1c>
 a3c:	fa f4       	brpl	.+62     	; 0xa7c <__floatsisf+0x6c>
 a3e:	bb 0f       	add	r27, r27
 a40:	11 f4       	brne	.+4      	; 0xa46 <__floatsisf+0x36>
 a42:	60 ff       	sbrs	r22, 0
 a44:	1b c0       	rjmp	.+54     	; 0xa7c <__floatsisf+0x6c>
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <__floatsisf+0x6c>
 a50:	88 23       	and	r24, r24
 a52:	11 f0       	breq	.+4      	; 0xa58 <__floatsisf+0x48>
 a54:	96 e9       	ldi	r25, 0x96	; 150
 a56:	11 c0       	rjmp	.+34     	; 0xa7a <__floatsisf+0x6a>
 a58:	77 23       	and	r23, r23
 a5a:	21 f0       	breq	.+8      	; 0xa64 <__floatsisf+0x54>
 a5c:	9e e8       	ldi	r25, 0x8E	; 142
 a5e:	87 2f       	mov	r24, r23
 a60:	76 2f       	mov	r23, r22
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__floatsisf+0x5e>
 a64:	66 23       	and	r22, r22
 a66:	71 f0       	breq	.+28     	; 0xa84 <__floatsisf+0x74>
 a68:	96 e8       	ldi	r25, 0x86	; 134
 a6a:	86 2f       	mov	r24, r22
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	2a f0       	brmi	.+10     	; 0xa7c <__floatsisf+0x6c>
 a72:	9a 95       	dec	r25
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	da f7       	brpl	.-10     	; 0xa72 <__floatsisf+0x62>
 a7c:	88 0f       	add	r24, r24
 a7e:	96 95       	lsr	r25
 a80:	87 95       	ror	r24
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__fp_inf>:
 a86:	97 f9       	bld	r25, 7
 a88:	9f 67       	ori	r25, 0x7F	; 127
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	08 95       	ret

00000a92 <__fp_nan>:
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	08 95       	ret

00000a98 <__fp_pscA>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	09 06       	cpc	r0, r25
 aa4:	08 95       	ret

00000aa6 <__fp_pscB>:
 aa6:	00 24       	eor	r0, r0
 aa8:	0a 94       	dec	r0
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	05 06       	cpc	r0, r21
 ab2:	08 95       	ret

00000ab4 <__fp_round>:
 ab4:	09 2e       	mov	r0, r25
 ab6:	03 94       	inc	r0
 ab8:	00 0c       	add	r0, r0
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0xc>
 abc:	88 23       	and	r24, r24
 abe:	52 f0       	brmi	.+20     	; 0xad4 <__fp_round+0x20>
 ac0:	bb 0f       	add	r27, r27
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__fp_round+0x20>
 ac4:	bf 2b       	or	r27, r31
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0x18>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__fp_round+0x20>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__fp_split3>:
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	90 58       	subi	r25, 0x80	; 128
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__fp_splitA+0x10>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__fp_splitA+0x1a>
 ae4:	47 95       	ror	r20

00000ae6 <__fp_splitA>:
 ae6:	88 0f       	add	r24, r24
 ae8:	97 fb       	bst	r25, 7
 aea:	99 1f       	adc	r25, r25
 aec:	61 f0       	breq	.+24     	; 0xb06 <__fp_splitA+0x20>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	79 f0       	breq	.+30     	; 0xb10 <__fp_splitA+0x2a>
 af2:	87 95       	ror	r24
 af4:	08 95       	ret
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	55 1f       	adc	r21, r21
 afe:	f2 cf       	rjmp	.-28     	; 0xae4 <__fp_split3+0xe>
 b00:	46 95       	lsr	r20
 b02:	f1 df       	rcall	.-30     	; 0xae6 <__fp_splitA>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__fp_splitA+0x30>
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <__fp_splitA+0xc>
 b10:	86 95       	lsr	r24
 b12:	71 05       	cpc	r23, r1
 b14:	61 05       	cpc	r22, r1
 b16:	08 94       	sec
 b18:	08 95       	ret

00000b1a <__fp_zero>:
 b1a:	e8 94       	clt

00000b1c <__fp_szero>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	66 27       	eor	r22, r22
 b20:	77 27       	eor	r23, r23
 b22:	cb 01       	movw	r24, r22
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret

00000b28 <__mulsf3>:
 b28:	0b d0       	rcall	.+22     	; 0xb40 <__mulsf3x>
 b2a:	c4 cf       	rjmp	.-120    	; 0xab4 <__fp_round>
 b2c:	b5 df       	rcall	.-150    	; 0xa98 <__fp_pscA>
 b2e:	28 f0       	brcs	.+10     	; 0xb3a <__mulsf3+0x12>
 b30:	ba df       	rcall	.-140    	; 0xaa6 <__fp_pscB>
 b32:	18 f0       	brcs	.+6      	; 0xb3a <__mulsf3+0x12>
 b34:	95 23       	and	r25, r21
 b36:	09 f0       	breq	.+2      	; 0xb3a <__mulsf3+0x12>
 b38:	a6 cf       	rjmp	.-180    	; 0xa86 <__fp_inf>
 b3a:	ab cf       	rjmp	.-170    	; 0xa92 <__fp_nan>
 b3c:	11 24       	eor	r1, r1
 b3e:	ee cf       	rjmp	.-36     	; 0xb1c <__fp_szero>

00000b40 <__mulsf3x>:
 b40:	ca df       	rcall	.-108    	; 0xad6 <__fp_split3>
 b42:	a0 f3       	brcs	.-24     	; 0xb2c <__mulsf3+0x4>

00000b44 <__mulsf3_pse>:
 b44:	95 9f       	mul	r25, r21
 b46:	d1 f3       	breq	.-12     	; 0xb3c <__mulsf3+0x14>
 b48:	95 0f       	add	r25, r21
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	55 1f       	adc	r21, r21
 b4e:	62 9f       	mul	r22, r18
 b50:	f0 01       	movw	r30, r0
 b52:	72 9f       	mul	r23, r18
 b54:	bb 27       	eor	r27, r27
 b56:	f0 0d       	add	r31, r0
 b58:	b1 1d       	adc	r27, r1
 b5a:	63 9f       	mul	r22, r19
 b5c:	aa 27       	eor	r26, r26
 b5e:	f0 0d       	add	r31, r0
 b60:	b1 1d       	adc	r27, r1
 b62:	aa 1f       	adc	r26, r26
 b64:	64 9f       	mul	r22, r20
 b66:	66 27       	eor	r22, r22
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	66 1f       	adc	r22, r22
 b6e:	82 9f       	mul	r24, r18
 b70:	22 27       	eor	r18, r18
 b72:	b0 0d       	add	r27, r0
 b74:	a1 1d       	adc	r26, r1
 b76:	62 1f       	adc	r22, r18
 b78:	73 9f       	mul	r23, r19
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	62 1f       	adc	r22, r18
 b80:	83 9f       	mul	r24, r19
 b82:	a0 0d       	add	r26, r0
 b84:	61 1d       	adc	r22, r1
 b86:	22 1f       	adc	r18, r18
 b88:	74 9f       	mul	r23, r20
 b8a:	33 27       	eor	r19, r19
 b8c:	a0 0d       	add	r26, r0
 b8e:	61 1d       	adc	r22, r1
 b90:	23 1f       	adc	r18, r19
 b92:	84 9f       	mul	r24, r20
 b94:	60 0d       	add	r22, r0
 b96:	21 1d       	adc	r18, r1
 b98:	82 2f       	mov	r24, r18
 b9a:	76 2f       	mov	r23, r22
 b9c:	6a 2f       	mov	r22, r26
 b9e:	11 24       	eor	r1, r1
 ba0:	9f 57       	subi	r25, 0x7F	; 127
 ba2:	50 40       	sbci	r21, 0x00	; 0
 ba4:	8a f0       	brmi	.+34     	; 0xbc8 <__mulsf3_pse+0x84>
 ba6:	e1 f0       	breq	.+56     	; 0xbe0 <__mulsf3_pse+0x9c>
 ba8:	88 23       	and	r24, r24
 baa:	4a f0       	brmi	.+18     	; 0xbbe <__mulsf3_pse+0x7a>
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	bb 1f       	adc	r27, r27
 bb2:	66 1f       	adc	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	91 50       	subi	r25, 0x01	; 1
 bba:	50 40       	sbci	r21, 0x00	; 0
 bbc:	a9 f7       	brne	.-22     	; 0xba8 <__mulsf3_pse+0x64>
 bbe:	9e 3f       	cpi	r25, 0xFE	; 254
 bc0:	51 05       	cpc	r21, r1
 bc2:	70 f0       	brcs	.+28     	; 0xbe0 <__mulsf3_pse+0x9c>
 bc4:	60 cf       	rjmp	.-320    	; 0xa86 <__fp_inf>
 bc6:	aa cf       	rjmp	.-172    	; 0xb1c <__fp_szero>
 bc8:	5f 3f       	cpi	r21, 0xFF	; 255
 bca:	ec f3       	brlt	.-6      	; 0xbc6 <__mulsf3_pse+0x82>
 bcc:	98 3e       	cpi	r25, 0xE8	; 232
 bce:	dc f3       	brlt	.-10     	; 0xbc6 <__mulsf3_pse+0x82>
 bd0:	86 95       	lsr	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	b7 95       	ror	r27
 bd8:	f7 95       	ror	r31
 bda:	e7 95       	ror	r30
 bdc:	9f 5f       	subi	r25, 0xFF	; 255
 bde:	c1 f7       	brne	.-16     	; 0xbd0 <__mulsf3_pse+0x8c>
 be0:	fe 2b       	or	r31, r30
 be2:	88 0f       	add	r24, r24
 be4:	91 1d       	adc	r25, r1
 be6:	96 95       	lsr	r25
 be8:	87 95       	ror	r24
 bea:	97 f9       	bld	r25, 7
 bec:	08 95       	ret

00000bee <__udivmodqi4>:
 bee:	99 1b       	sub	r25, r25
 bf0:	79 e0       	ldi	r23, 0x09	; 9
 bf2:	04 c0       	rjmp	.+8      	; 0xbfc <__udivmodqi4_ep>

00000bf4 <__udivmodqi4_loop>:
 bf4:	99 1f       	adc	r25, r25
 bf6:	96 17       	cp	r25, r22
 bf8:	08 f0       	brcs	.+2      	; 0xbfc <__udivmodqi4_ep>
 bfa:	96 1b       	sub	r25, r22

00000bfc <__udivmodqi4_ep>:
 bfc:	88 1f       	adc	r24, r24
 bfe:	7a 95       	dec	r23
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__udivmodqi4_loop>
 c02:	80 95       	com	r24
 c04:	08 95       	ret

00000c06 <__udivmodhi4>:
 c06:	aa 1b       	sub	r26, r26
 c08:	bb 1b       	sub	r27, r27
 c0a:	51 e1       	ldi	r21, 0x11	; 17
 c0c:	07 c0       	rjmp	.+14     	; 0xc1c <__udivmodhi4_ep>

00000c0e <__udivmodhi4_loop>:
 c0e:	aa 1f       	adc	r26, r26
 c10:	bb 1f       	adc	r27, r27
 c12:	a6 17       	cp	r26, r22
 c14:	b7 07       	cpc	r27, r23
 c16:	10 f0       	brcs	.+4      	; 0xc1c <__udivmodhi4_ep>
 c18:	a6 1b       	sub	r26, r22
 c1a:	b7 0b       	sbc	r27, r23

00000c1c <__udivmodhi4_ep>:
 c1c:	88 1f       	adc	r24, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	5a 95       	dec	r21
 c22:	a9 f7       	brne	.-22     	; 0xc0e <__udivmodhi4_loop>
 c24:	80 95       	com	r24
 c26:	90 95       	com	r25
 c28:	bc 01       	movw	r22, r24
 c2a:	cd 01       	movw	r24, r26
 c2c:	08 95       	ret

00000c2e <__udivmodsi4>:
 c2e:	a1 e2       	ldi	r26, 0x21	; 33
 c30:	1a 2e       	mov	r1, r26
 c32:	aa 1b       	sub	r26, r26
 c34:	bb 1b       	sub	r27, r27
 c36:	fd 01       	movw	r30, r26
 c38:	0d c0       	rjmp	.+26     	; 0xc54 <__udivmodsi4_ep>

00000c3a <__udivmodsi4_loop>:
 c3a:	aa 1f       	adc	r26, r26
 c3c:	bb 1f       	adc	r27, r27
 c3e:	ee 1f       	adc	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	a2 17       	cp	r26, r18
 c44:	b3 07       	cpc	r27, r19
 c46:	e4 07       	cpc	r30, r20
 c48:	f5 07       	cpc	r31, r21
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__udivmodsi4_ep>
 c4c:	a2 1b       	sub	r26, r18
 c4e:	b3 0b       	sbc	r27, r19
 c50:	e4 0b       	sbc	r30, r20
 c52:	f5 0b       	sbc	r31, r21

00000c54 <__udivmodsi4_ep>:
 c54:	66 1f       	adc	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	1a 94       	dec	r1
 c5e:	69 f7       	brne	.-38     	; 0xc3a <__udivmodsi4_loop>
 c60:	60 95       	com	r22
 c62:	70 95       	com	r23
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	9b 01       	movw	r18, r22
 c6a:	ac 01       	movw	r20, r24
 c6c:	bd 01       	movw	r22, r26
 c6e:	cf 01       	movw	r24, r30
 c70:	08 95       	ret

00000c72 <_exit>:
 c72:	f8 94       	cli

00000c74 <__stop_program>:
 c74:	ff cf       	rjmp	.-2      	; 0xc74 <__stop_program>
