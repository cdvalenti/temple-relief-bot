
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00003414  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00001075  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  00005059  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
  78:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
 
}

void initADC(void) {
  //initialize ADC (set ref voltage, prescaler, and enable)
  ADMUX |= (1 << REFS0);                		// reference voltage on AVCC
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1);    // ADC clock prescaler /8
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADEN);               			// enable ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <readADC>:
}

uint16_t readADC(uint8_t channel) {
  //read ADC value from channel (ADC0 to ADC 5)
  ADMUX = (0b11110000 & ADMUX) | channel;
  9c:	90 91 7c 00 	lds	r25, 0x007C
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	98 2b       	or	r25, r24
  a4:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA |= (1 << ADSC);
  a8:	80 91 7a 00 	lds	r24, 0x007A
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 93 7a 00 	sts	0x007A, r24
  loop_until_bit_is_clear(ADCSRA, ADSC);
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	86 fd       	sbrc	r24, 6
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <readADC+0x16>
  return (ADC);
  ba:	20 91 78 00 	lds	r18, 0x0078
  be:	30 91 79 00 	lds	r19, 0x0079
}
  c2:	c9 01       	movw	r24, r18
  c4:	08 95       	ret

000000c6 <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <initValues+0xe>
     *arr = value;
  ca:	fc 01       	movw	r30, r24
  cc:	41 93       	st	Z+, r20
  ce:	51 93       	st	Z+, r21
  d0:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	26 13       	cpse	r18, r22
  d6:	f9 cf       	rjmp	.-14     	; 0xca <initValues+0x4>
     *arr = value;
     arr++;
  }
}
  d8:	08 95       	ret

000000da <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	61 50       	subi	r22, 0x01	; 1
  e2:	71 09       	sbc	r23, r1
  e4:	eb 01       	movw	r28, r22
  e6:	cc 0f       	add	r28, r28
  e8:	dd 1f       	adc	r29, r29
  ea:	c8 0f       	add	r28, r24
  ec:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	07 c0       	rjmp	.+14     	; 0x100 <storeNewADC+0x26>
     *arr = value;
     arr++;
  }
}

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
  f2:	fe 01       	movw	r30, r28
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
    *arr = *(arr-1);
  f4:	32 91       	ld	r19, -Z
  f6:	22 91       	ld	r18, -Z
  f8:	39 83       	std	Y+1, r19	; 0x01
  fa:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
  fc:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
  fe:	ef 01       	movw	r28, r30
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 100:	29 2f       	mov	r18, r25
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	26 17       	cp	r18, r22
 106:	37 07       	cpc	r19, r23
 108:	a4 f3       	brlt	.-24     	; 0xf2 <storeNewADC+0x18>
    *arr = *(arr-1);
    arr--;
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 10a:	84 2f       	mov	r24, r20
 10c:	0e 94 4e 00 	call	0x9c	; 0x9c <readADC>
 110:	99 83       	std	Y+1, r25	; 0x01
 112:	88 83       	st	Y, r24
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 11a:	fc 01       	movw	r30, r24
 11c:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	07 c0       	rjmp	.+14     	; 0x136 <getAverage+0x1c>
    sum = sum + *arr;
 128:	41 91       	ld	r20, Z+
 12a:	51 91       	ld	r21, Z+
 12c:	64 0f       	add	r22, r20
 12e:	75 1f       	adc	r23, r21
 130:	81 1d       	adc	r24, r1
 132:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	23 13       	cpse	r18, r19
 138:	f7 cf       	rjmp	.-18     	; 0x128 <getAverage+0xe>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 9a 05 	call	0xb34	; 0xb34 <__udivmodsi4>
  return avg;
}
 144:	c9 01       	movw	r24, r18
 146:	08 95       	ret

00000148 <blinkTwice>:

void blinkTwice(void){
  //blink LED
  DDRB |= (1 << PB2);
 148:	22 9a       	sbi	0x04, 2	; 4
  toggle('B', 2);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	82 e4       	ldi	r24, 0x42	; 66
 150:	0e 94 13 01 	call	0x226	; 0x226 <toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e4       	ldi	r24, 0x4F	; 79
 156:	93 ec       	ldi	r25, 0xC3	; 195
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <blinkTwice+0x10>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <blinkTwice+0x16>
 15e:	00 00       	nop
  _delay_ms(200);
  toggle('B', 2);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	82 e4       	ldi	r24, 0x42	; 66
 166:	0e 94 13 01 	call	0x226	; 0x226 <toggle>
 16a:	8f e4       	ldi	r24, 0x4F	; 79
 16c:	93 ec       	ldi	r25, 0xC3	; 195
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <blinkTwice+0x26>
 172:	00 c0       	rjmp	.+0      	; 0x174 <blinkTwice+0x2c>
 174:	00 00       	nop
  _delay_ms(200);
  toggle('B', 2);
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 13 01 	call	0x226	; 0x226 <toggle>
 180:	8f e4       	ldi	r24, 0x4F	; 79
 182:	93 ec       	ldi	r25, 0xC3	; 195
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <blinkTwice+0x3c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <blinkTwice+0x42>
 18a:	00 00       	nop
  _delay_ms(200);
  toggle('B', 2);
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	0e 94 13 01 	call	0x226	; 0x226 <toggle>
 196:	8f e4       	ldi	r24, 0x4F	; 79
 198:	93 ec       	ldi	r25, 0xC3	; 195
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <blinkTwice+0x52>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <blinkTwice+0x58>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <initTimer1Servo>:

void initTimer1Servo(void) {
  /* Set up Timer1 (16bit) to give a pulse every 50ms */
  
  //Use Fast PWM mode, counter max in ICR1
  TCCR1A |= (1 << WGM11);
 1a4:	e0 e8       	ldi	r30, 0x80	; 128
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
  TCCR1B |= (1 << WGM12) | (1 << WGM13);
 1ae:	a1 e8       	ldi	r26, 0x81	; 129
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	8c 93       	st	X, r24
  
  // /1 prescaling -- counting in microseconds
  TCCR1B |= (1 << CS10);
 1b8:	8c 91       	ld	r24, X
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	8c 93       	st	X, r24
  
  //TOP value = 50ms
  ICR1 = 50000;
 1be:	80 e5       	ldi	r24, 0x50	; 80
 1c0:	93 ec       	ldi	r25, 0xC3	; 195
 1c2:	90 93 87 00 	sts	0x0087, r25
 1c6:	80 93 86 00 	sts	0x0086, r24
  
  //Direct output on PB1 (OC1A) and PB2 (OC1B)
  TCCR1A |= (1 << COM1A1);
 1ca:	80 81       	ld	r24, Z
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	80 83       	st	Z, r24
  TCCR1A |= (1 << COM1B1);
 1d0:	80 81       	ld	r24, Z
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	80 83       	st	Z, r24
  
  //set pins for output
  DDRB |= (1 << SERVO1);
 1d6:	21 9a       	sbi	0x04, 1	; 4
  DDRB |= (1 << SERVO2);
 1d8:	22 9a       	sbi	0x04, 2	; 4
 1da:	08 95       	ret

000001dc <initTimer0PWM>:

void initTimer0PWM(void){
  /* Set up Timer0 (8bit) */
  
  //Use Mode 3, FastPWM
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 1dc:	84 b5       	in	r24, 0x24	; 36
 1de:	83 60       	ori	r24, 0x03	; 3
 1e0:	84 bd       	out	0x24, r24	; 36

  //Clear at match, set at bottom
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
 1e2:	84 b5       	in	r24, 0x24	; 36
 1e4:	80 6a       	ori	r24, 0xA0	; 160
 1e6:	84 bd       	out	0x24, r24	; 36
  
  // No prescale, gives freq = ~4kHz
  TCCR0B |= (1<<CS00);
 1e8:	85 b5       	in	r24, 0x25	; 37
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	85 bd       	out	0x25, r24	; 37
  
  //set pins for output
  DDRD |= (1 << DRIVER1PWM) | (1 << DRIVER2PWM);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 66       	ori	r24, 0x60	; 96
 1f2:	8a b9       	out	0x0a, r24	; 10
 1f4:	08 95       	ret

000001f6 <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  //set for output
  DDRB |= (1<<DRIVER1A);
 1f6:	20 9a       	sbi	0x04, 0	; 4
  DDRB |= (1<<DRIVER1B);
 1f8:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2A);
 1fa:	24 9a       	sbi	0x04, 4	; 4
  DDRB |= (1<<DRIVER2B);
 1fc:	25 9a       	sbi	0x04, 5	; 4
  //init to zero
  pin_lo('B',DRIVER1A);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
  pin_lo('D',DRIVER1B);
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	84 e4       	ldi	r24, 0x44	; 68
 20e:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
  pin_lo('B',DRIVER2A);
 212:	64 e0       	ldi	r22, 0x04	; 4
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
  pin_lo('B',DRIVER2B);
 21c:	65 e0       	ldi	r22, 0x05	; 5
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	82 e4       	ldi	r24, 0x42	; 66
 222:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <pin_lo>

00000226 <toggle>:
#include "include/easy_atmega328p.h"

void toggle(char port, int bit)
{
    if(port == 'A'){
 226:	81 34       	cpi	r24, 0x41	; 65
 228:	31 f1       	breq	.+76     	; 0x276 <toggle+0x50>
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
 22a:	82 34       	cpi	r24, 0x42	; 66
 22c:	59 f4       	brne	.+22     	; 0x244 <toggle+0x1e>
      PORTB ^= (1<<bit);
 22e:	25 b1       	in	r18, 0x05	; 5
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	06 2e       	mov	r0, r22
 236:	01 c0       	rjmp	.+2      	; 0x23a <toggle+0x14>
 238:	88 0f       	add	r24, r24
 23a:	0a 94       	dec	r0
 23c:	ea f7       	brpl	.-6      	; 0x238 <toggle+0x12>
 23e:	28 27       	eor	r18, r24
 240:	25 b9       	out	0x05, r18	; 5
 242:	08 95       	ret
    }else if (port == 'C'){
 244:	83 34       	cpi	r24, 0x43	; 67
 246:	59 f4       	brne	.+22     	; 0x25e <toggle+0x38>
      PORTC ^= (1<<bit);
 248:	28 b1       	in	r18, 0x08	; 8
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	06 2e       	mov	r0, r22
 250:	01 c0       	rjmp	.+2      	; 0x254 <toggle+0x2e>
 252:	88 0f       	add	r24, r24
 254:	0a 94       	dec	r0
 256:	ea f7       	brpl	.-6      	; 0x252 <toggle+0x2c>
 258:	28 27       	eor	r18, r24
 25a:	28 b9       	out	0x08, r18	; 8
 25c:	08 95       	ret
    }else if (port == 'D'){
 25e:	84 34       	cpi	r24, 0x44	; 68
 260:	51 f4       	brne	.+20     	; 0x276 <toggle+0x50>
      PORTD ^= (1<<bit);
 262:	2b b1       	in	r18, 0x0b	; 11
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	06 2e       	mov	r0, r22
 26a:	01 c0       	rjmp	.+2      	; 0x26e <toggle+0x48>
 26c:	88 0f       	add	r24, r24
 26e:	0a 94       	dec	r0
 270:	ea f7       	brpl	.-6      	; 0x26c <toggle+0x46>
 272:	28 27       	eor	r18, r24
 274:	2b b9       	out	0x0b, r18	; 11
 276:	08 95       	ret

00000278 <pin_hi>:
    }
}

void pin_hi(char port, int bit)
{
    if(port == 'A'){
 278:	81 34       	cpi	r24, 0x41	; 65
 27a:	31 f1       	breq	.+76     	; 0x2c8 <pin_hi+0x50>
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
 27c:	82 34       	cpi	r24, 0x42	; 66
 27e:	59 f4       	brne	.+22     	; 0x296 <pin_hi+0x1e>
      PORTB |= (1<<bit);
 280:	25 b1       	in	r18, 0x05	; 5
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	06 2e       	mov	r0, r22
 288:	01 c0       	rjmp	.+2      	; 0x28c <pin_hi+0x14>
 28a:	88 0f       	add	r24, r24
 28c:	0a 94       	dec	r0
 28e:	ea f7       	brpl	.-6      	; 0x28a <pin_hi+0x12>
 290:	28 2b       	or	r18, r24
 292:	25 b9       	out	0x05, r18	; 5
 294:	08 95       	ret
    }else if (port == 'C'){
 296:	83 34       	cpi	r24, 0x43	; 67
 298:	59 f4       	brne	.+22     	; 0x2b0 <pin_hi+0x38>
      PORTC |= (1<<bit);
 29a:	28 b1       	in	r18, 0x08	; 8
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	06 2e       	mov	r0, r22
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <pin_hi+0x2e>
 2a4:	88 0f       	add	r24, r24
 2a6:	0a 94       	dec	r0
 2a8:	ea f7       	brpl	.-6      	; 0x2a4 <pin_hi+0x2c>
 2aa:	28 2b       	or	r18, r24
 2ac:	28 b9       	out	0x08, r18	; 8
 2ae:	08 95       	ret
    }else if (port == 'D'){
 2b0:	84 34       	cpi	r24, 0x44	; 68
 2b2:	51 f4       	brne	.+20     	; 0x2c8 <pin_hi+0x50>
      PORTD |= (1<<bit);
 2b4:	2b b1       	in	r18, 0x0b	; 11
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	06 2e       	mov	r0, r22
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <pin_hi+0x48>
 2be:	88 0f       	add	r24, r24
 2c0:	0a 94       	dec	r0
 2c2:	ea f7       	brpl	.-6      	; 0x2be <pin_hi+0x46>
 2c4:	28 2b       	or	r18, r24
 2c6:	2b b9       	out	0x0b, r18	; 11
 2c8:	08 95       	ret

000002ca <pin_lo>:
    }
}

void pin_lo(char port, int bit)
{
    if(port == 'A'){
 2ca:	81 34       	cpi	r24, 0x41	; 65
 2cc:	49 f1       	breq	.+82     	; 0x320 <pin_lo+0x56>
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 2ce:	82 34       	cpi	r24, 0x42	; 66
 2d0:	61 f4       	brne	.+24     	; 0x2ea <pin_lo+0x20>
      PORTB &= ~(1<<bit);
 2d2:	25 b1       	in	r18, 0x05	; 5
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	06 2e       	mov	r0, r22
 2da:	01 c0       	rjmp	.+2      	; 0x2de <pin_lo+0x14>
 2dc:	88 0f       	add	r24, r24
 2de:	0a 94       	dec	r0
 2e0:	ea f7       	brpl	.-6      	; 0x2dc <pin_lo+0x12>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	85 b9       	out	0x05, r24	; 5
 2e8:	08 95       	ret
    }else if (port == 'C'){
 2ea:	83 34       	cpi	r24, 0x43	; 67
 2ec:	61 f4       	brne	.+24     	; 0x306 <pin_lo+0x3c>
      PORTC &= ~(1<<bit);
 2ee:	28 b1       	in	r18, 0x08	; 8
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	06 2e       	mov	r0, r22
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <pin_lo+0x30>
 2f8:	88 0f       	add	r24, r24
 2fa:	0a 94       	dec	r0
 2fc:	ea f7       	brpl	.-6      	; 0x2f8 <pin_lo+0x2e>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	88 b9       	out	0x08, r24	; 8
 304:	08 95       	ret
    }else if (port == 'D'){
 306:	84 34       	cpi	r24, 0x44	; 68
 308:	59 f4       	brne	.+22     	; 0x320 <pin_lo+0x56>
      PORTD &= ~(1<<bit);
 30a:	2b b1       	in	r18, 0x0b	; 11
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	06 2e       	mov	r0, r22
 312:	01 c0       	rjmp	.+2      	; 0x316 <pin_lo+0x4c>
 314:	88 0f       	add	r24, r24
 316:	0a 94       	dec	r0
 318:	ea f7       	brpl	.-6      	; 0x314 <pin_lo+0x4a>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	08 95       	ret

00000322 <set_as_input>:
    }
}

void set_as_input(char port, int bit)
{
    if(port == 'A'){
 322:	81 34       	cpi	r24, 0x41	; 65
 324:	49 f1       	breq	.+82     	; 0x378 <set_as_input+0x56>
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 326:	82 34       	cpi	r24, 0x42	; 66
 328:	61 f4       	brne	.+24     	; 0x342 <set_as_input+0x20>
      DDRB &= ~(1<<bit);
 32a:	24 b1       	in	r18, 0x04	; 4
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	06 2e       	mov	r0, r22
 332:	01 c0       	rjmp	.+2      	; 0x336 <set_as_input+0x14>
 334:	88 0f       	add	r24, r24
 336:	0a 94       	dec	r0
 338:	ea f7       	brpl	.-6      	; 0x334 <set_as_input+0x12>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	84 b9       	out	0x04, r24	; 4
 340:	08 95       	ret
    }else if (port == 'C'){
 342:	83 34       	cpi	r24, 0x43	; 67
 344:	61 f4       	brne	.+24     	; 0x35e <set_as_input+0x3c>
      DDRC &= ~(1<<bit);
 346:	27 b1       	in	r18, 0x07	; 7
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	06 2e       	mov	r0, r22
 34e:	01 c0       	rjmp	.+2      	; 0x352 <set_as_input+0x30>
 350:	88 0f       	add	r24, r24
 352:	0a 94       	dec	r0
 354:	ea f7       	brpl	.-6      	; 0x350 <set_as_input+0x2e>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	87 b9       	out	0x07, r24	; 7
 35c:	08 95       	ret
    }else if (port == 'D'){
 35e:	84 34       	cpi	r24, 0x44	; 68
 360:	59 f4       	brne	.+22     	; 0x378 <set_as_input+0x56>
      DDRD &= ~(1<<bit);
 362:	2a b1       	in	r18, 0x0a	; 10
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	06 2e       	mov	r0, r22
 36a:	01 c0       	rjmp	.+2      	; 0x36e <set_as_input+0x4c>
 36c:	88 0f       	add	r24, r24
 36e:	0a 94       	dec	r0
 370:	ea f7       	brpl	.-6      	; 0x36c <set_as_input+0x4a>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8a b9       	out	0x0a, r24	; 10
 378:	08 95       	ret

0000037a <set_as_output>:
    }
}

void set_as_output(char port, int bit)
{
    if(port == 'A'){
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	31 f1       	breq	.+76     	; 0x3ca <set_as_output+0x50>
      //DDRA |= (1<<bit);
    }else if (port == 'B'){
 37e:	82 34       	cpi	r24, 0x42	; 66
 380:	59 f4       	brne	.+22     	; 0x398 <set_as_output+0x1e>
      DDRB |= (1<<bit);
 382:	24 b1       	in	r18, 0x04	; 4
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	06 2e       	mov	r0, r22
 38a:	01 c0       	rjmp	.+2      	; 0x38e <set_as_output+0x14>
 38c:	88 0f       	add	r24, r24
 38e:	0a 94       	dec	r0
 390:	ea f7       	brpl	.-6      	; 0x38c <set_as_output+0x12>
 392:	28 2b       	or	r18, r24
 394:	24 b9       	out	0x04, r18	; 4
 396:	08 95       	ret
    }else if (port == 'C'){
 398:	83 34       	cpi	r24, 0x43	; 67
 39a:	59 f4       	brne	.+22     	; 0x3b2 <set_as_output+0x38>
      DDRC |= (1<<bit);
 39c:	27 b1       	in	r18, 0x07	; 7
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	06 2e       	mov	r0, r22
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <set_as_output+0x2e>
 3a6:	88 0f       	add	r24, r24
 3a8:	0a 94       	dec	r0
 3aa:	ea f7       	brpl	.-6      	; 0x3a6 <set_as_output+0x2c>
 3ac:	28 2b       	or	r18, r24
 3ae:	27 b9       	out	0x07, r18	; 7
 3b0:	08 95       	ret
    }else if (port == 'D'){
 3b2:	84 34       	cpi	r24, 0x44	; 68
 3b4:	51 f4       	brne	.+20     	; 0x3ca <set_as_output+0x50>
      DDRD |= (1<<bit);
 3b6:	2a b1       	in	r18, 0x0a	; 10
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	06 2e       	mov	r0, r22
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <set_as_output+0x48>
 3c0:	88 0f       	add	r24, r24
 3c2:	0a 94       	dec	r0
 3c4:	ea f7       	brpl	.-6      	; 0x3c0 <set_as_output+0x46>
 3c6:	28 2b       	or	r18, r24
 3c8:	2a b9       	out	0x0a, r18	; 10
 3ca:	08 95       	ret

000003cc <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 3cc:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 3d6:	e0 ec       	ldi	r30, 0xC0	; 192
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 3e0:	88 e1       	ldi	r24, 0x18	; 24
 3e2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	80 93 c2 00 	sts	0x00C2, r24
 3ec:	08 95       	ret

000003ee <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 3ee:	90 91 c0 00 	lds	r25, 0x00C0
 3f2:	95 ff       	sbrs	r25, 5
 3f4:	fc cf       	rjmp	.-8      	; 0x3ee <transmitByte>
  UDR0 = data;                                            /* send data */
 3f6:	80 93 c6 00 	sts	0x00C6, r24
 3fa:	08 95       	ret

000003fc <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 3fc:	80 91 c0 00 	lds	r24, 0x00C0
 400:	87 ff       	sbrs	r24, 7
 402:	fc cf       	rjmp	.-8      	; 0x3fc <receiveByte>
  return UDR0;                                /* return register value */
 404:	80 91 c6 00 	lds	r24, 0x00C6
}
 408:	08 95       	ret

0000040a <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ec 01       	movw	r28, r24
  uint8_t i = 0;
 412:	10 e0       	ldi	r17, 0x00	; 0
  while (myString[i]) {
 414:	03 c0       	rjmp	.+6      	; 0x41c <printString+0x12>
    transmitByte(myString[i]);
 416:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
    i++;
 41a:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 41c:	fe 01       	movw	r30, r28
 41e:	e1 0f       	add	r30, r17
 420:	f1 1d       	adc	r31, r1
 422:	80 81       	ld	r24, Z
 424:	81 11       	cpse	r24, r1
 426:	f7 cf       	rjmp	.-18     	; 0x416 <printString+0xc>
    transmitByte(myString[i]);
    i++;
  }
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	08 95       	ret

00000430 <readString>:

void readString(char myString[], uint8_t maxLength) {
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	8c 01       	movw	r16, r24
  char response;
  uint8_t i;
  i = 0;
 442:	d1 2c       	mov	r13, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 444:	c6 2f       	mov	r28, r22
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	21 97       	sbiw	r28, 0x01	; 1
 44a:	12 c0       	rjmp	.+36     	; 0x470 <readString+0x40>
    response = receiveByte();
 44c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <receiveByte>
 450:	c8 2e       	mov	r12, r24
    transmitByte(response);                                    /* echo */
 452:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 456:	8d e0       	ldi	r24, 0x0D	; 13
 458:	c8 12       	cpse	r12, r24
 45a:	05 c0       	rjmp	.+10     	; 0x466 <readString+0x36>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 45c:	f8 01       	movw	r30, r16
 45e:	ed 0d       	add	r30, r13
 460:	f1 1d       	adc	r31, r1
 462:	10 82       	st	Z, r1
 464:	0b c0       	rjmp	.+22     	; 0x47c <readString+0x4c>
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 466:	f8 01       	movw	r30, r16
 468:	ee 0d       	add	r30, r14
 46a:	ff 1d       	adc	r31, r15
 46c:	c0 82       	st	Z, r12
      i++;
 46e:	d3 94       	inc	r13

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 470:	ed 2c       	mov	r14, r13
 472:	f1 2c       	mov	r15, r1
 474:	ec 16       	cp	r14, r28
 476:	fd 06       	cpc	r15, r29
 478:	4c f3       	brlt	.-46     	; 0x44c <readString+0x1c>
 47a:	f0 cf       	rjmp	.-32     	; 0x45c <readString+0x2c>
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	08 95       	ret

0000048e <printByte>:

void printByte(uint8_t byte) {
 48e:	cf 93       	push	r28
 490:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 492:	64 e6       	ldi	r22, 0x64	; 100
 494:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__udivmodqi4>
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 49e:	2a e0       	ldi	r18, 0x0A	; 10
 4a0:	8c 2f       	mov	r24, r28
 4a2:	62 2f       	mov	r22, r18
 4a4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__udivmodqi4>
 4a8:	c9 2f       	mov	r28, r25
 4aa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__udivmodqi4>
 4ae:	89 2f       	mov	r24, r25
 4b0:	80 5d       	subi	r24, 0xD0	; 208
 4b2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 4b6:	8c 2f       	mov	r24, r28
 4b8:	80 5d       	subi	r24, 0xD0	; 208
}
 4ba:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 4bc:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <transmitByte>

000004c0 <printWord>:
}

void printWord(uint16_t word) {
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 4ca:	60 e1       	ldi	r22, 0x10	; 16
 4cc:	77 e2       	ldi	r23, 0x27	; 39
 4ce:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 4d2:	86 2f       	mov	r24, r22
 4d4:	80 5d       	subi	r24, 0xD0	; 208
 4d6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 4da:	ce 01       	movw	r24, r28
 4dc:	68 ee       	ldi	r22, 0xE8	; 232
 4de:	73 e0       	ldi	r23, 0x03	; 3
 4e0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 4e4:	cb 01       	movw	r24, r22
 4e6:	0a e0       	ldi	r16, 0x0A	; 10
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	b8 01       	movw	r22, r16
 4ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 4f0:	80 5d       	subi	r24, 0xD0	; 208
 4f2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 4f6:	ce 01       	movw	r24, r28
 4f8:	64 e6       	ldi	r22, 0x64	; 100
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 500:	cb 01       	movw	r24, r22
 502:	b8 01       	movw	r22, r16
 504:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 508:	80 5d       	subi	r24, 0xD0	; 208
 50a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 50e:	ce 01       	movw	r24, r28
 510:	b8 01       	movw	r22, r16
 512:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 516:	c8 2f       	mov	r28, r24
 518:	cb 01       	movw	r24, r22
 51a:	b8 01       	movw	r22, r16
 51c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__udivmodhi4>
 520:	80 5d       	subi	r24, 0xD0	; 208
 522:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 526:	8c 2f       	mov	r24, r28
 528:	80 5d       	subi	r24, 0xD0	; 208
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 532:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <transmitByte>

00000536 <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	1f 92       	push	r1
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
 542:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 544:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	01 2e       	mov	r0, r17
 54c:	02 c0       	rjmp	.+4      	; 0x552 <printBinaryByte+0x1c>
 54e:	95 95       	asr	r25
 550:	87 95       	ror	r24
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <printBinaryByte+0x18>
 556:	80 ff       	sbrs	r24, 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <printBinaryByte+0x28>
      transmitByte('1');
 55a:	81 e3       	ldi	r24, 0x31	; 49
 55c:	01 c0       	rjmp	.+2      	; 0x560 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 55e:	80 e3       	ldi	r24, 0x30	; 48
 560:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 564:	11 50       	subi	r17, 0x01	; 1
 566:	78 f7       	brcc	.-34     	; 0x546 <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 568:	0f 90       	pop	r0
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	08 95       	ret

00000572 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 572:	8a 30       	cpi	r24, 0x0A	; 10
 574:	10 f4       	brcc	.+4      	; 0x57a <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 576:	80 5d       	subi	r24, 0xD0	; 208
 578:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 57a:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 57c:	08 95       	ret

0000057e <printHexByte>:

void printHexByte(uint8_t byte) {
 57e:	cf 93       	push	r28
 580:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 582:	82 95       	swap	r24
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	0e 94 b9 02 	call	0x572	; 0x572 <nibbleToHexCharacter>
 58a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 58e:	8c 2f       	mov	r24, r28
 590:	8f 70       	andi	r24, 0x0F	; 15
 592:	0e 94 b9 02 	call	0x572	; 0x572 <nibbleToHexCharacter>
}
 596:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 598:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <transmitByte>

0000059c <getNumber>:
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	d0 e3       	ldi	r29, 0x30	; 48
 5a6:	c0 e3       	ldi	r28, 0x30	; 48
 5a8:	00 e3       	ldi	r16, 0x30	; 48
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <getNumber+0x16>
 5ac:	d1 2f       	mov	r29, r17
 5ae:	c8 2f       	mov	r28, r24
 5b0:	09 2f       	mov	r16, r25
 5b2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <receiveByte>
 5b6:	18 2f       	mov	r17, r24
 5b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transmitByte>
 5bc:	9c 2f       	mov	r25, r28
 5be:	8d 2f       	mov	r24, r29
 5c0:	1d 30       	cpi	r17, 0x0D	; 13
 5c2:	a1 f7       	brne	.-24     	; 0x5ac <getNumber+0x10>
 5c4:	80 5d       	subi	r24, 0xD0	; 208
 5c6:	94 e6       	ldi	r25, 0x64	; 100
 5c8:	09 9f       	mul	r16, r25
 5ca:	80 0d       	add	r24, r0
 5cc:	11 24       	eor	r1, r1
 5ce:	9a e0       	ldi	r25, 0x0A	; 10
 5d0:	c9 9f       	mul	r28, r25
 5d2:	80 0d       	add	r24, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <main>:
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	c4 5a       	subi	r28, 0xA4	; 164
 5ea:	d1 40       	sbci	r29, 0x01	; 1
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	0e 94 a4 00 	call	0x148	; 0x148 <blinkTwice>
 5fa:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
 5fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <initTimer1Servo>
 602:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <initMotorDriverIO>
 606:	0e 94 ee 00 	call	0x1dc	; 0x1dc <initTimer0PWM>
 60a:	4e 01       	movw	r8, r28
 60c:	83 ed       	ldi	r24, 0xD3	; 211
 60e:	88 1a       	sub	r8, r24
 610:	8e ef       	ldi	r24, 0xFE	; 254
 612:	98 0a       	sbc	r9, r24
 614:	4f ef       	ldi	r20, 0xFF	; 255
 616:	51 e0       	ldi	r21, 0x01	; 1
 618:	6e e1       	ldi	r22, 0x1E	; 30
 61a:	c4 01       	movw	r24, r8
 61c:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 620:	5e 01       	movw	r10, r28
 622:	87 e9       	ldi	r24, 0x97	; 151
 624:	a8 1a       	sub	r10, r24
 626:	8e ef       	ldi	r24, 0xFE	; 254
 628:	b8 0a       	sbc	r11, r24
 62a:	4f ef       	ldi	r20, 0xFF	; 255
 62c:	51 e0       	ldi	r21, 0x01	; 1
 62e:	6e e1       	ldi	r22, 0x1E	; 30
 630:	c5 01       	movw	r24, r10
 632:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	6b e4       	ldi	r22, 0x4B	; 75
 63c:	ee 24       	eor	r14, r14
 63e:	e3 94       	inc	r14
 640:	f1 2c       	mov	r15, r1
 642:	ec 0e       	add	r14, r28
 644:	fd 1e       	adc	r15, r29
 646:	c7 01       	movw	r24, r14
 648:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 64c:	8e 01       	movw	r16, r28
 64e:	09 56       	subi	r16, 0x69	; 105
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	6b e4       	ldi	r22, 0x4B	; 75
 658:	c8 01       	movw	r24, r16
 65a:	0e 94 63 00 	call	0xc6	; 0xc6 <initValues>
 65e:	d8 2c       	mov	r13, r8
 660:	c9 2c       	mov	r12, r9
 662:	7a 2c       	mov	r7, r10
 664:	6b 2c       	mov	r6, r11
 666:	be 2c       	mov	r11, r14
 668:	af 2c       	mov	r10, r15
 66a:	90 2e       	mov	r9, r16
 66c:	81 2e       	mov	r8, r17
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	6e e1       	ldi	r22, 0x1E	; 30
 672:	8d 2d       	mov	r24, r13
 674:	9c 2d       	mov	r25, r12
 676:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 67a:	6e e1       	ldi	r22, 0x1E	; 30
 67c:	8d 2d       	mov	r24, r13
 67e:	9c 2d       	mov	r25, r12
 680:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 684:	2c 01       	movw	r4, r24
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	6e e1       	ldi	r22, 0x1E	; 30
 68a:	87 2d       	mov	r24, r7
 68c:	96 2d       	mov	r25, r6
 68e:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 692:	42 e0       	ldi	r20, 0x02	; 2
 694:	6b e4       	ldi	r22, 0x4B	; 75
 696:	8b 2d       	mov	r24, r11
 698:	9a 2d       	mov	r25, r10
 69a:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 69e:	6b e4       	ldi	r22, 0x4B	; 75
 6a0:	8b 2d       	mov	r24, r11
 6a2:	9a 2d       	mov	r25, r10
 6a4:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 6a8:	7c 01       	movw	r14, r24
 6aa:	43 e0       	ldi	r20, 0x03	; 3
 6ac:	6b e4       	ldi	r22, 0x4B	; 75
 6ae:	89 2d       	mov	r24, r9
 6b0:	98 2d       	mov	r25, r8
 6b2:	0e 94 6d 00 	call	0xda	; 0xda <storeNewADC>
 6b6:	6b e4       	ldi	r22, 0x4B	; 75
 6b8:	89 2d       	mov	r24, r9
 6ba:	98 2d       	mov	r25, r8
 6bc:	0e 94 8d 00 	call	0x11a	; 0x11a <getAverage>
 6c0:	8c 01       	movw	r16, r24
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	82 e3       	ldi	r24, 0x32	; 50
 6c8:	48 16       	cp	r4, r24
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	58 06       	cpc	r5, r24
 6ce:	e0 f0       	brcs	.+56     	; 0x708 <main+0x128>
 6d0:	82 e4       	ldi	r24, 0x42	; 66
 6d2:	0e 94 3c 01 	call	0x278	; 0x278 <pin_hi>
 6d6:	64 e0       	ldi	r22, 0x04	; 4
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	84 e4       	ldi	r24, 0x44	; 68
 6dc:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 6e0:	64 e0       	ldi	r22, 0x04	; 4
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	82 e4       	ldi	r24, 0x42	; 66
 6e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 6ea:	65 e0       	ldi	r22, 0x05	; 5
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	82 e4       	ldi	r24, 0x42	; 66
 6f0:	0e 94 3c 01 	call	0x278	; 0x278 <pin_hi>
 6f4:	b2 01       	movw	r22, r4
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e4       	ldi	r19, 0x40	; 64
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	54 e4       	ldi	r21, 0x44	; 68
 706:	22 c0       	rjmp	.+68     	; 0x74c <main+0x16c>
 708:	8d ec       	ldi	r24, 0xCD	; 205
 70a:	48 16       	cp	r4, r24
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	58 06       	cpc	r5, r24
 710:	30 f5       	brcc	.+76     	; 0x75e <main+0x17e>
 712:	82 e4       	ldi	r24, 0x42	; 66
 714:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 718:	64 e0       	ldi	r22, 0x04	; 4
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	84 e4       	ldi	r24, 0x44	; 68
 71e:	0e 94 3c 01 	call	0x278	; 0x278 <pin_hi>
 722:	64 e0       	ldi	r22, 0x04	; 4
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	82 e4       	ldi	r24, 0x42	; 66
 728:	0e 94 3c 01 	call	0x278	; 0x278 <pin_hi>
 72c:	65 e0       	ldi	r22, 0x05	; 5
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	82 e4       	ldi	r24, 0x42	; 66
 732:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 736:	b2 01       	movw	r22, r4
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	93 e4       	ldi	r25, 0x43	; 67
 74c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	5f e3       	ldi	r21, 0x3F	; 63
 758:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 75c:	16 c0       	rjmp	.+44     	; 0x78a <main+0x1aa>
 75e:	82 e4       	ldi	r24, 0x42	; 66
 760:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 764:	64 e0       	ldi	r22, 0x04	; 4
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	84 e4       	ldi	r24, 0x44	; 68
 76a:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 76e:	64 e0       	ldi	r22, 0x04	; 4
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	82 e4       	ldi	r24, 0x42	; 66
 774:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 778:	65 e0       	ldi	r22, 0x05	; 5
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	0e 94 65 01 	call	0x2ca	; 0x2ca <pin_lo>
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fixunssfsi>
 78e:	67 bd       	out	0x27, r22	; 39
 790:	68 bd       	out	0x28, r22	; 40
 792:	b7 01       	movw	r22, r14
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 79c:	21 e7       	ldi	r18, 0x71	; 113
 79e:	3d e3       	ldi	r19, 0x3D	; 61
 7a0:	4a ef       	ldi	r20, 0xFA	; 250
 7a2:	5f e3       	ldi	r21, 0x3F	; 63
 7a4:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	4a ef       	ldi	r20, 0xFA	; 250
 7ae:	53 e4       	ldi	r21, 0x43	; 67
 7b0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 7b4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fixunssfsi>
 7b8:	70 93 89 00 	sts	0x0089, r23
 7bc:	60 93 88 00 	sts	0x0088, r22
 7c0:	b8 01       	movw	r22, r16
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 7ca:	21 e7       	ldi	r18, 0x71	; 113
 7cc:	3d e3       	ldi	r19, 0x3D	; 61
 7ce:	4a ef       	ldi	r20, 0xFA	; 250
 7d0:	5f e3       	ldi	r21, 0x3F	; 63
 7d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	4a ef       	ldi	r20, 0xFA	; 250
 7dc:	53 e4       	ldi	r21, 0x43	; 67
 7de:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 7e2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fixunssfsi>
 7e6:	70 93 8b 00 	sts	0x008B, r23
 7ea:	60 93 8a 00 	sts	0x008A, r22
 7ee:	3f cf       	rjmp	.-386    	; 0x66e <main+0x8e>

000007f0 <__subsf3>:
 7f0:	50 58       	subi	r21, 0x80	; 128

000007f2 <__addsf3>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	aa 27       	eor	r26, r26
 7f6:	0e d0       	rcall	.+28     	; 0x814 <__addsf3x>
 7f8:	e0 c0       	rjmp	.+448    	; 0x9ba <__fp_round>
 7fa:	d1 d0       	rcall	.+418    	; 0x99e <__fp_pscA>
 7fc:	30 f0       	brcs	.+12     	; 0x80a <__addsf3+0x18>
 7fe:	d6 d0       	rcall	.+428    	; 0x9ac <__fp_pscB>
 800:	20 f0       	brcs	.+8      	; 0x80a <__addsf3+0x18>
 802:	31 f4       	brne	.+12     	; 0x810 <__addsf3+0x1e>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	11 f4       	brne	.+4      	; 0x80c <__addsf3+0x1a>
 808:	1e f4       	brtc	.+6      	; 0x810 <__addsf3+0x1e>
 80a:	c6 c0       	rjmp	.+396    	; 0x998 <__fp_nan>
 80c:	0e f4       	brtc	.+2      	; 0x810 <__addsf3+0x1e>
 80e:	e0 95       	com	r30
 810:	e7 fb       	bst	r30, 7
 812:	bc c0       	rjmp	.+376    	; 0x98c <__fp_inf>

00000814 <__addsf3x>:
 814:	e9 2f       	mov	r30, r25
 816:	e2 d0       	rcall	.+452    	; 0x9dc <__fp_split3>
 818:	80 f3       	brcs	.-32     	; 0x7fa <__addsf3+0x8>
 81a:	ba 17       	cp	r27, r26
 81c:	62 07       	cpc	r22, r18
 81e:	73 07       	cpc	r23, r19
 820:	84 07       	cpc	r24, r20
 822:	95 07       	cpc	r25, r21
 824:	18 f0       	brcs	.+6      	; 0x82c <__addsf3x+0x18>
 826:	71 f4       	brne	.+28     	; 0x844 <__addsf3x+0x30>
 828:	9e f5       	brtc	.+102    	; 0x890 <__addsf3x+0x7c>
 82a:	fa c0       	rjmp	.+500    	; 0xa20 <__fp_zero>
 82c:	0e f4       	brtc	.+2      	; 0x830 <__addsf3x+0x1c>
 82e:	e0 95       	com	r30
 830:	0b 2e       	mov	r0, r27
 832:	ba 2f       	mov	r27, r26
 834:	a0 2d       	mov	r26, r0
 836:	0b 01       	movw	r0, r22
 838:	b9 01       	movw	r22, r18
 83a:	90 01       	movw	r18, r0
 83c:	0c 01       	movw	r0, r24
 83e:	ca 01       	movw	r24, r20
 840:	a0 01       	movw	r20, r0
 842:	11 24       	eor	r1, r1
 844:	ff 27       	eor	r31, r31
 846:	59 1b       	sub	r21, r25
 848:	99 f0       	breq	.+38     	; 0x870 <__addsf3x+0x5c>
 84a:	59 3f       	cpi	r21, 0xF9	; 249
 84c:	50 f4       	brcc	.+20     	; 0x862 <__addsf3x+0x4e>
 84e:	50 3e       	cpi	r21, 0xE0	; 224
 850:	68 f1       	brcs	.+90     	; 0x8ac <__addsf3x+0x98>
 852:	1a 16       	cp	r1, r26
 854:	f0 40       	sbci	r31, 0x00	; 0
 856:	a2 2f       	mov	r26, r18
 858:	23 2f       	mov	r18, r19
 85a:	34 2f       	mov	r19, r20
 85c:	44 27       	eor	r20, r20
 85e:	58 5f       	subi	r21, 0xF8	; 248
 860:	f3 cf       	rjmp	.-26     	; 0x848 <__addsf3x+0x34>
 862:	46 95       	lsr	r20
 864:	37 95       	ror	r19
 866:	27 95       	ror	r18
 868:	a7 95       	ror	r26
 86a:	f0 40       	sbci	r31, 0x00	; 0
 86c:	53 95       	inc	r21
 86e:	c9 f7       	brne	.-14     	; 0x862 <__addsf3x+0x4e>
 870:	7e f4       	brtc	.+30     	; 0x890 <__addsf3x+0x7c>
 872:	1f 16       	cp	r1, r31
 874:	ba 0b       	sbc	r27, r26
 876:	62 0b       	sbc	r22, r18
 878:	73 0b       	sbc	r23, r19
 87a:	84 0b       	sbc	r24, r20
 87c:	ba f0       	brmi	.+46     	; 0x8ac <__addsf3x+0x98>
 87e:	91 50       	subi	r25, 0x01	; 1
 880:	a1 f0       	breq	.+40     	; 0x8aa <__addsf3x+0x96>
 882:	ff 0f       	add	r31, r31
 884:	bb 1f       	adc	r27, r27
 886:	66 1f       	adc	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	c2 f7       	brpl	.-16     	; 0x87e <__addsf3x+0x6a>
 88e:	0e c0       	rjmp	.+28     	; 0x8ac <__addsf3x+0x98>
 890:	ba 0f       	add	r27, r26
 892:	62 1f       	adc	r22, r18
 894:	73 1f       	adc	r23, r19
 896:	84 1f       	adc	r24, r20
 898:	48 f4       	brcc	.+18     	; 0x8ac <__addsf3x+0x98>
 89a:	87 95       	ror	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f7 95       	ror	r31
 8a4:	9e 3f       	cpi	r25, 0xFE	; 254
 8a6:	08 f0       	brcs	.+2      	; 0x8aa <__addsf3x+0x96>
 8a8:	b3 cf       	rjmp	.-154    	; 0x810 <__addsf3+0x1e>
 8aa:	93 95       	inc	r25
 8ac:	88 0f       	add	r24, r24
 8ae:	08 f0       	brcs	.+2      	; 0x8b2 <__addsf3x+0x9e>
 8b0:	99 27       	eor	r25, r25
 8b2:	ee 0f       	add	r30, r30
 8b4:	97 95       	ror	r25
 8b6:	87 95       	ror	r24
 8b8:	08 95       	ret

000008ba <__fixunssfsi>:
 8ba:	98 d0       	rcall	.+304    	; 0x9ec <__fp_splitA>
 8bc:	88 f0       	brcs	.+34     	; 0x8e0 <__fixunssfsi+0x26>
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	90 f0       	brcs	.+36     	; 0x8e6 <__fixunssfsi+0x2c>
 8c2:	b9 2f       	mov	r27, r25
 8c4:	99 27       	eor	r25, r25
 8c6:	b7 51       	subi	r27, 0x17	; 23
 8c8:	a0 f0       	brcs	.+40     	; 0x8f2 <__fixunssfsi+0x38>
 8ca:	d1 f0       	breq	.+52     	; 0x900 <__stack+0x1>
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	1a f0       	brmi	.+6      	; 0x8dc <__fixunssfsi+0x22>
 8d6:	ba 95       	dec	r27
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__fixunssfsi+0x12>
 8da:	12 c0       	rjmp	.+36     	; 0x900 <__stack+0x1>
 8dc:	b1 30       	cpi	r27, 0x01	; 1
 8de:	81 f0       	breq	.+32     	; 0x900 <__stack+0x1>
 8e0:	9f d0       	rcall	.+318    	; 0xa20 <__fp_zero>
 8e2:	b1 e0       	ldi	r27, 0x01	; 1
 8e4:	08 95       	ret
 8e6:	9c c0       	rjmp	.+312    	; 0xa20 <__fp_zero>
 8e8:	67 2f       	mov	r22, r23
 8ea:	78 2f       	mov	r23, r24
 8ec:	88 27       	eor	r24, r24
 8ee:	b8 5f       	subi	r27, 0xF8	; 248
 8f0:	39 f0       	breq	.+14     	; 0x900 <__stack+0x1>
 8f2:	b9 3f       	cpi	r27, 0xF9	; 249
 8f4:	cc f3       	brlt	.-14     	; 0x8e8 <__fixunssfsi+0x2e>
 8f6:	86 95       	lsr	r24
 8f8:	77 95       	ror	r23
 8fa:	67 95       	ror	r22
 8fc:	b3 95       	inc	r27
 8fe:	d9 f7       	brne	.-10     	; 0x8f6 <__fixunssfsi+0x3c>
 900:	3e f4       	brtc	.+14     	; 0x910 <__stack+0x11>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__floatunsisf>:
 912:	e8 94       	clt
 914:	09 c0       	rjmp	.+18     	; 0x928 <__floatsisf+0x12>

00000916 <__floatsisf>:
 916:	97 fb       	bst	r25, 7
 918:	3e f4       	brtc	.+14     	; 0x928 <__floatsisf+0x12>
 91a:	90 95       	com	r25
 91c:	80 95       	com	r24
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	99 23       	and	r25, r25
 92a:	a9 f0       	breq	.+42     	; 0x956 <__floatsisf+0x40>
 92c:	f9 2f       	mov	r31, r25
 92e:	96 e9       	ldi	r25, 0x96	; 150
 930:	bb 27       	eor	r27, r27
 932:	93 95       	inc	r25
 934:	f6 95       	lsr	r31
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f1 11       	cpse	r31, r1
 940:	f8 cf       	rjmp	.-16     	; 0x932 <__floatsisf+0x1c>
 942:	fa f4       	brpl	.+62     	; 0x982 <__floatsisf+0x6c>
 944:	bb 0f       	add	r27, r27
 946:	11 f4       	brne	.+4      	; 0x94c <__floatsisf+0x36>
 948:	60 ff       	sbrs	r22, 0
 94a:	1b c0       	rjmp	.+54     	; 0x982 <__floatsisf+0x6c>
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	16 c0       	rjmp	.+44     	; 0x982 <__floatsisf+0x6c>
 956:	88 23       	and	r24, r24
 958:	11 f0       	breq	.+4      	; 0x95e <__floatsisf+0x48>
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	11 c0       	rjmp	.+34     	; 0x980 <__floatsisf+0x6a>
 95e:	77 23       	and	r23, r23
 960:	21 f0       	breq	.+8      	; 0x96a <__floatsisf+0x54>
 962:	9e e8       	ldi	r25, 0x8E	; 142
 964:	87 2f       	mov	r24, r23
 966:	76 2f       	mov	r23, r22
 968:	05 c0       	rjmp	.+10     	; 0x974 <__floatsisf+0x5e>
 96a:	66 23       	and	r22, r22
 96c:	71 f0       	breq	.+28     	; 0x98a <__floatsisf+0x74>
 96e:	96 e8       	ldi	r25, 0x86	; 134
 970:	86 2f       	mov	r24, r22
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	2a f0       	brmi	.+10     	; 0x982 <__floatsisf+0x6c>
 978:	9a 95       	dec	r25
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	da f7       	brpl	.-10     	; 0x978 <__floatsisf+0x62>
 982:	88 0f       	add	r24, r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__fp_inf>:
 98c:	97 f9       	bld	r25, 7
 98e:	9f 67       	ori	r25, 0x7F	; 127
 990:	80 e8       	ldi	r24, 0x80	; 128
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	08 95       	ret

00000998 <__fp_nan>:
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	80 ec       	ldi	r24, 0xC0	; 192
 99c:	08 95       	ret

0000099e <__fp_pscA>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	16 16       	cp	r1, r22
 9a4:	17 06       	cpc	r1, r23
 9a6:	18 06       	cpc	r1, r24
 9a8:	09 06       	cpc	r0, r25
 9aa:	08 95       	ret

000009ac <__fp_pscB>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	12 16       	cp	r1, r18
 9b2:	13 06       	cpc	r1, r19
 9b4:	14 06       	cpc	r1, r20
 9b6:	05 06       	cpc	r0, r21
 9b8:	08 95       	ret

000009ba <__fp_round>:
 9ba:	09 2e       	mov	r0, r25
 9bc:	03 94       	inc	r0
 9be:	00 0c       	add	r0, r0
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <__fp_round+0xc>
 9c2:	88 23       	and	r24, r24
 9c4:	52 f0       	brmi	.+20     	; 0x9da <__fp_round+0x20>
 9c6:	bb 0f       	add	r27, r27
 9c8:	40 f4       	brcc	.+16     	; 0x9da <__fp_round+0x20>
 9ca:	bf 2b       	or	r27, r31
 9cc:	11 f4       	brne	.+4      	; 0x9d2 <__fp_round+0x18>
 9ce:	60 ff       	sbrs	r22, 0
 9d0:	04 c0       	rjmp	.+8      	; 0x9da <__fp_round+0x20>
 9d2:	6f 5f       	subi	r22, 0xFF	; 255
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	08 95       	ret

000009dc <__fp_split3>:
 9dc:	57 fd       	sbrc	r21, 7
 9de:	90 58       	subi	r25, 0x80	; 128
 9e0:	44 0f       	add	r20, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	59 f0       	breq	.+22     	; 0x9fc <__fp_splitA+0x10>
 9e6:	5f 3f       	cpi	r21, 0xFF	; 255
 9e8:	71 f0       	breq	.+28     	; 0xa06 <__fp_splitA+0x1a>
 9ea:	47 95       	ror	r20

000009ec <__fp_splitA>:
 9ec:	88 0f       	add	r24, r24
 9ee:	97 fb       	bst	r25, 7
 9f0:	99 1f       	adc	r25, r25
 9f2:	61 f0       	breq	.+24     	; 0xa0c <__fp_splitA+0x20>
 9f4:	9f 3f       	cpi	r25, 0xFF	; 255
 9f6:	79 f0       	breq	.+30     	; 0xa16 <__fp_splitA+0x2a>
 9f8:	87 95       	ror	r24
 9fa:	08 95       	ret
 9fc:	12 16       	cp	r1, r18
 9fe:	13 06       	cpc	r1, r19
 a00:	14 06       	cpc	r1, r20
 a02:	55 1f       	adc	r21, r21
 a04:	f2 cf       	rjmp	.-28     	; 0x9ea <__fp_split3+0xe>
 a06:	46 95       	lsr	r20
 a08:	f1 df       	rcall	.-30     	; 0x9ec <__fp_splitA>
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <__fp_splitA+0x30>
 a0c:	16 16       	cp	r1, r22
 a0e:	17 06       	cpc	r1, r23
 a10:	18 06       	cpc	r1, r24
 a12:	99 1f       	adc	r25, r25
 a14:	f1 cf       	rjmp	.-30     	; 0x9f8 <__fp_splitA+0xc>
 a16:	86 95       	lsr	r24
 a18:	71 05       	cpc	r23, r1
 a1a:	61 05       	cpc	r22, r1
 a1c:	08 94       	sec
 a1e:	08 95       	ret

00000a20 <__fp_zero>:
 a20:	e8 94       	clt

00000a22 <__fp_szero>:
 a22:	bb 27       	eor	r27, r27
 a24:	66 27       	eor	r22, r22
 a26:	77 27       	eor	r23, r23
 a28:	cb 01       	movw	r24, r22
 a2a:	97 f9       	bld	r25, 7
 a2c:	08 95       	ret

00000a2e <__mulsf3>:
 a2e:	0b d0       	rcall	.+22     	; 0xa46 <__mulsf3x>
 a30:	c4 cf       	rjmp	.-120    	; 0x9ba <__fp_round>
 a32:	b5 df       	rcall	.-150    	; 0x99e <__fp_pscA>
 a34:	28 f0       	brcs	.+10     	; 0xa40 <__mulsf3+0x12>
 a36:	ba df       	rcall	.-140    	; 0x9ac <__fp_pscB>
 a38:	18 f0       	brcs	.+6      	; 0xa40 <__mulsf3+0x12>
 a3a:	95 23       	and	r25, r21
 a3c:	09 f0       	breq	.+2      	; 0xa40 <__mulsf3+0x12>
 a3e:	a6 cf       	rjmp	.-180    	; 0x98c <__fp_inf>
 a40:	ab cf       	rjmp	.-170    	; 0x998 <__fp_nan>
 a42:	11 24       	eor	r1, r1
 a44:	ee cf       	rjmp	.-36     	; 0xa22 <__fp_szero>

00000a46 <__mulsf3x>:
 a46:	ca df       	rcall	.-108    	; 0x9dc <__fp_split3>
 a48:	a0 f3       	brcs	.-24     	; 0xa32 <__mulsf3+0x4>

00000a4a <__mulsf3_pse>:
 a4a:	95 9f       	mul	r25, r21
 a4c:	d1 f3       	breq	.-12     	; 0xa42 <__mulsf3+0x14>
 a4e:	95 0f       	add	r25, r21
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	55 1f       	adc	r21, r21
 a54:	62 9f       	mul	r22, r18
 a56:	f0 01       	movw	r30, r0
 a58:	72 9f       	mul	r23, r18
 a5a:	bb 27       	eor	r27, r27
 a5c:	f0 0d       	add	r31, r0
 a5e:	b1 1d       	adc	r27, r1
 a60:	63 9f       	mul	r22, r19
 a62:	aa 27       	eor	r26, r26
 a64:	f0 0d       	add	r31, r0
 a66:	b1 1d       	adc	r27, r1
 a68:	aa 1f       	adc	r26, r26
 a6a:	64 9f       	mul	r22, r20
 a6c:	66 27       	eor	r22, r22
 a6e:	b0 0d       	add	r27, r0
 a70:	a1 1d       	adc	r26, r1
 a72:	66 1f       	adc	r22, r22
 a74:	82 9f       	mul	r24, r18
 a76:	22 27       	eor	r18, r18
 a78:	b0 0d       	add	r27, r0
 a7a:	a1 1d       	adc	r26, r1
 a7c:	62 1f       	adc	r22, r18
 a7e:	73 9f       	mul	r23, r19
 a80:	b0 0d       	add	r27, r0
 a82:	a1 1d       	adc	r26, r1
 a84:	62 1f       	adc	r22, r18
 a86:	83 9f       	mul	r24, r19
 a88:	a0 0d       	add	r26, r0
 a8a:	61 1d       	adc	r22, r1
 a8c:	22 1f       	adc	r18, r18
 a8e:	74 9f       	mul	r23, r20
 a90:	33 27       	eor	r19, r19
 a92:	a0 0d       	add	r26, r0
 a94:	61 1d       	adc	r22, r1
 a96:	23 1f       	adc	r18, r19
 a98:	84 9f       	mul	r24, r20
 a9a:	60 0d       	add	r22, r0
 a9c:	21 1d       	adc	r18, r1
 a9e:	82 2f       	mov	r24, r18
 aa0:	76 2f       	mov	r23, r22
 aa2:	6a 2f       	mov	r22, r26
 aa4:	11 24       	eor	r1, r1
 aa6:	9f 57       	subi	r25, 0x7F	; 127
 aa8:	50 40       	sbci	r21, 0x00	; 0
 aaa:	8a f0       	brmi	.+34     	; 0xace <__mulsf3_pse+0x84>
 aac:	e1 f0       	breq	.+56     	; 0xae6 <__mulsf3_pse+0x9c>
 aae:	88 23       	and	r24, r24
 ab0:	4a f0       	brmi	.+18     	; 0xac4 <__mulsf3_pse+0x7a>
 ab2:	ee 0f       	add	r30, r30
 ab4:	ff 1f       	adc	r31, r31
 ab6:	bb 1f       	adc	r27, r27
 ab8:	66 1f       	adc	r22, r22
 aba:	77 1f       	adc	r23, r23
 abc:	88 1f       	adc	r24, r24
 abe:	91 50       	subi	r25, 0x01	; 1
 ac0:	50 40       	sbci	r21, 0x00	; 0
 ac2:	a9 f7       	brne	.-22     	; 0xaae <__mulsf3_pse+0x64>
 ac4:	9e 3f       	cpi	r25, 0xFE	; 254
 ac6:	51 05       	cpc	r21, r1
 ac8:	70 f0       	brcs	.+28     	; 0xae6 <__mulsf3_pse+0x9c>
 aca:	60 cf       	rjmp	.-320    	; 0x98c <__fp_inf>
 acc:	aa cf       	rjmp	.-172    	; 0xa22 <__fp_szero>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	ec f3       	brlt	.-6      	; 0xacc <__mulsf3_pse+0x82>
 ad2:	98 3e       	cpi	r25, 0xE8	; 232
 ad4:	dc f3       	brlt	.-10     	; 0xacc <__mulsf3_pse+0x82>
 ad6:	86 95       	lsr	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f7 95       	ror	r31
 ae0:	e7 95       	ror	r30
 ae2:	9f 5f       	subi	r25, 0xFF	; 255
 ae4:	c1 f7       	brne	.-16     	; 0xad6 <__mulsf3_pse+0x8c>
 ae6:	fe 2b       	or	r31, r30
 ae8:	88 0f       	add	r24, r24
 aea:	91 1d       	adc	r25, r1
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__udivmodqi4>:
 af4:	99 1b       	sub	r25, r25
 af6:	79 e0       	ldi	r23, 0x09	; 9
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <__udivmodqi4_ep>

00000afa <__udivmodqi4_loop>:
 afa:	99 1f       	adc	r25, r25
 afc:	96 17       	cp	r25, r22
 afe:	08 f0       	brcs	.+2      	; 0xb02 <__udivmodqi4_ep>
 b00:	96 1b       	sub	r25, r22

00000b02 <__udivmodqi4_ep>:
 b02:	88 1f       	adc	r24, r24
 b04:	7a 95       	dec	r23
 b06:	c9 f7       	brne	.-14     	; 0xafa <__udivmodqi4_loop>
 b08:	80 95       	com	r24
 b0a:	08 95       	ret

00000b0c <__udivmodhi4>:
 b0c:	aa 1b       	sub	r26, r26
 b0e:	bb 1b       	sub	r27, r27
 b10:	51 e1       	ldi	r21, 0x11	; 17
 b12:	07 c0       	rjmp	.+14     	; 0xb22 <__udivmodhi4_ep>

00000b14 <__udivmodhi4_loop>:
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	a6 17       	cp	r26, r22
 b1a:	b7 07       	cpc	r27, r23
 b1c:	10 f0       	brcs	.+4      	; 0xb22 <__udivmodhi4_ep>
 b1e:	a6 1b       	sub	r26, r22
 b20:	b7 0b       	sbc	r27, r23

00000b22 <__udivmodhi4_ep>:
 b22:	88 1f       	adc	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	5a 95       	dec	r21
 b28:	a9 f7       	brne	.-22     	; 0xb14 <__udivmodhi4_loop>
 b2a:	80 95       	com	r24
 b2c:	90 95       	com	r25
 b2e:	bc 01       	movw	r22, r24
 b30:	cd 01       	movw	r24, r26
 b32:	08 95       	ret

00000b34 <__udivmodsi4>:
 b34:	a1 e2       	ldi	r26, 0x21	; 33
 b36:	1a 2e       	mov	r1, r26
 b38:	aa 1b       	sub	r26, r26
 b3a:	bb 1b       	sub	r27, r27
 b3c:	fd 01       	movw	r30, r26
 b3e:	0d c0       	rjmp	.+26     	; 0xb5a <__udivmodsi4_ep>

00000b40 <__udivmodsi4_loop>:
 b40:	aa 1f       	adc	r26, r26
 b42:	bb 1f       	adc	r27, r27
 b44:	ee 1f       	adc	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	a2 17       	cp	r26, r18
 b4a:	b3 07       	cpc	r27, r19
 b4c:	e4 07       	cpc	r30, r20
 b4e:	f5 07       	cpc	r31, r21
 b50:	20 f0       	brcs	.+8      	; 0xb5a <__udivmodsi4_ep>
 b52:	a2 1b       	sub	r26, r18
 b54:	b3 0b       	sbc	r27, r19
 b56:	e4 0b       	sbc	r30, r20
 b58:	f5 0b       	sbc	r31, r21

00000b5a <__udivmodsi4_ep>:
 b5a:	66 1f       	adc	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	1a 94       	dec	r1
 b64:	69 f7       	brne	.-38     	; 0xb40 <__udivmodsi4_loop>
 b66:	60 95       	com	r22
 b68:	70 95       	com	r23
 b6a:	80 95       	com	r24
 b6c:	90 95       	com	r25
 b6e:	9b 01       	movw	r18, r22
 b70:	ac 01       	movw	r20, r24
 b72:	bd 01       	movw	r22, r26
 b74:	cf 01       	movw	r24, r30
 b76:	08 95       	ret

00000b78 <_exit>:
 b78:	f8 94       	cli

00000b7a <__stop_program>:
 b7a:	ff cf       	rjmp	.-2      	; 0xb7a <__stop_program>
