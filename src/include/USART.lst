   1               		.file	"USART.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 103               	.global	initUSART
 105               	initUSART:
 106               		.stabd	46,0,0
   1:include/USART.c **** #define F_CPU 1000000UL
   2:include/USART.c **** /*
   3:include/USART.c ****   Quick and dirty functions that make serial communications work.
   4:include/USART.c **** 
   5:include/USART.c ****   Note that receiveByte() blocks -- it sits and waits _forever_ for
   6:include/USART.c ****    a byte to come in.  If you're doing anything that's more interesting,
   7:include/USART.c ****    you'll want to implement this with interrupts.
   8:include/USART.c **** 
   9:include/USART.c ****    initUSART requires BAUDRATE to be defined in order to calculate
  10:include/USART.c ****      the bit-rate multiplier.  9600 is a reasonable default.
  11:include/USART.c **** 
  12:include/USART.c ****   May not work with some of the older chips:
  13:include/USART.c ****     Tiny2313, Mega8, Mega16, Mega32 have different pin macros
  14:include/USART.c ****     If you're using these chips, see (e.g.) iom8.h for how it's done.
  15:include/USART.c ****     These old chips don't specify UDR0 vs UDR1.
  16:include/USART.c ****     Correspondingly, the macros will just be defined as UDR.
  17:include/USART.c **** */
  18:include/USART.c **** 
  19:include/USART.c **** #include <avr/io.h>
  20:include/USART.c **** #include "USART.h"
  21:include/USART.c **** #include <util/setbaud.h>
  22:include/USART.c **** 
  23:include/USART.c **** void initUSART(void) {                                /* requires BAUD */
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  24:include/USART.c ****   UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 115               	.LM1:
 116 0000 1092 C500 		sts 197,__zero_reg__
  25:include/USART.c ****   UBRR0L = UBRRL_VALUE;
 118               	.LM2:
 119 0004 8CE0      		ldi r24,lo8(12)
 120 0006 8093 C400 		sts 196,r24
  26:include/USART.c **** #if USE_2X
  27:include/USART.c ****   UCSR0A |= (1 << U2X0);
 122               	.LM3:
 123 000a E0EC      		ldi r30,lo8(-64)
 124 000c F0E0      		ldi r31,0
 125 000e 8081      		ld r24,Z
 126 0010 8260      		ori r24,lo8(2)
 127 0012 8083      		st Z,r24
  28:include/USART.c **** #else
  29:include/USART.c ****   UCSR0A &= ~(1 << U2X0);
  30:include/USART.c **** #endif
  31:include/USART.c ****                                   /* Enable USART transmitter/receiver */
  32:include/USART.c ****   UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 129               	.LM4:
 130 0014 88E1      		ldi r24,lo8(24)
 131 0016 8093 C100 		sts 193,r24
  33:include/USART.c ****   UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 133               	.LM5:
 134 001a 86E0      		ldi r24,lo8(6)
 135 001c 8093 C200 		sts 194,r24
 136 0020 0895      		ret
 138               	.Lscope1:
 140               		.stabd	78,0,0
 143               	.global	transmitByte
 145               	transmitByte:
 146               		.stabd	46,0,0
  34:include/USART.c **** }
  35:include/USART.c **** 
  36:include/USART.c **** 
  37:include/USART.c **** void transmitByte(uint8_t data) {
 148               	.LM6:
 149               	.LFBB2:
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 154               	.L4:
  38:include/USART.c ****                                      /* Wait for empty transmit buffer */
  39:include/USART.c ****   loop_until_bit_is_set(UCSR0A, UDRE0);
 156               	.LM7:
 157 0022 9091 C000 		lds r25,192
 158 0026 95FF      		sbrs r25,5
 159 0028 00C0      		rjmp .L4
  40:include/USART.c ****   UDR0 = data;                                            /* send data */
 161               	.LM8:
 162 002a 8093 C600 		sts 198,r24
 163 002e 0895      		ret
 165               	.Lscope2:
 167               		.stabd	78,0,0
 169               	.global	receiveByte
 171               	receiveByte:
 172               		.stabd	46,0,0
  41:include/USART.c **** }
  42:include/USART.c **** 
  43:include/USART.c **** uint8_t receiveByte(void) {
 174               	.LM9:
 175               	.LFBB3:
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 180               	.L8:
  44:include/USART.c ****   loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 182               	.LM10:
 183 0030 8091 C000 		lds r24,192
 184 0034 87FF      		sbrs r24,7
 185 0036 00C0      		rjmp .L8
  45:include/USART.c ****   return UDR0;                                /* return register value */
 187               	.LM11:
 188 0038 8091 C600 		lds r24,198
  46:include/USART.c **** }
 190               	.LM12:
 191 003c 0895      		ret
 193               	.Lscope3:
 195               		.stabd	78,0,0
 198               	.global	printString
 200               	printString:
 201               		.stabd	46,0,0
  47:include/USART.c **** 
  48:include/USART.c **** 
  49:include/USART.c ****                        /* Here are a bunch of useful printing commands */
  50:include/USART.c **** 
  51:include/USART.c **** void printString(const char myString[]) {
 203               	.LM13:
 204               	.LFBB4:
 205 003e 1F93      		push r17
 206 0040 CF93      		push r28
 207 0042 DF93      		push r29
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 3 */
 211               	.L__stack_usage = 3
 212 0044 EC01      		movw r28,r24
  52:include/USART.c ****   uint8_t i = 0;
 214               	.LM14:
 215 0046 10E0      		ldi r17,0
 216               	.L10:
  53:include/USART.c ****   while (myString[i]) {
 218               	.LM15:
 219 0048 FE01      		movw r30,r28
 220 004a E10F      		add r30,r17
 221 004c F11D      		adc r31,__zero_reg__
 222 004e 8081      		ld r24,Z
 223 0050 8823      		tst r24
 224 0052 01F0      		breq .L12
  54:include/USART.c ****     transmitByte(myString[i]);
 226               	.LM16:
 227 0054 0E94 0000 		call transmitByte
  55:include/USART.c ****     i++;
 229               	.LM17:
 230 0058 1F5F      		subi r17,lo8(-(1))
 231 005a 00C0      		rjmp .L10
 232               	.L12:
 233               	/* epilogue start */
  56:include/USART.c ****   }
  57:include/USART.c **** }
 235               	.LM18:
 236 005c DF91      		pop r29
 237 005e CF91      		pop r28
 238 0060 1F91      		pop r17
 239 0062 0895      		ret
 244               	.Lscope4:
 246               		.stabd	78,0,0
 250               	.global	readString
 252               	readString:
 253               		.stabd	46,0,0
  58:include/USART.c **** 
  59:include/USART.c **** void readString(char myString[], uint8_t maxLength) {
 255               	.LM19:
 256               	.LFBB5:
 257 0064 CF92      		push r12
 258 0066 DF92      		push r13
 259 0068 EF92      		push r14
 260 006a FF92      		push r15
 261 006c 0F93      		push r16
 262 006e 1F93      		push r17
 263 0070 CF93      		push r28
 264 0072 DF93      		push r29
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 8 */
 268               	.L__stack_usage = 8
 269 0074 7C01      		movw r14,r24
  60:include/USART.c ****   char response;
  61:include/USART.c ****   uint8_t i;
  62:include/USART.c ****   i = 0;
 271               	.LM20:
 272 0076 D12C      		mov r13,__zero_reg__
  63:include/USART.c ****   while (i < (maxLength - 1)) {                   /* prevent over-runs */
 274               	.LM21:
 275 0078 062F      		mov r16,r22
 276 007a 10E0      		ldi r17,0
 277 007c 0150      		subi r16,1
 278 007e 1109      		sbc r17,__zero_reg__
 279               	.L14:
 281               	.LM22:
 282 0080 CD2D      		mov r28,r13
 283 0082 D0E0      		ldi r29,0
 284 0084 C017      		cp r28,r16
 285 0086 D107      		cpc r29,r17
 286 0088 04F4      		brge .L17
  64:include/USART.c ****     response = receiveByte();
 288               	.LM23:
 289 008a 0E94 0000 		call receiveByte
 290 008e C82E      		mov r12,r24
  65:include/USART.c ****     transmitByte(response);                                    /* echo */
 292               	.LM24:
 293 0090 0E94 0000 		call transmitByte
  66:include/USART.c ****     if (response == '\r') {                     /* enter marks the end */
 295               	.LM25:
 296 0094 8DE0      		ldi r24,lo8(13)
 297 0096 C812      		cpse r12,r24
 298 0098 00C0      		rjmp .L15
 299               	.L17:
  67:include/USART.c ****       break;
  68:include/USART.c ****     }
  69:include/USART.c ****     else {
  70:include/USART.c ****       myString[i] = response;                       /* add in a letter */
  71:include/USART.c ****       i++;
  72:include/USART.c ****     }
  73:include/USART.c ****   }
  74:include/USART.c ****   myString[i] = 0;                          /* terminal NULL character */
 301               	.LM26:
 302 009a CE0D      		add r28,r14
 303 009c DF1D      		adc r29,r15
 304 009e 1882      		st Y,__zero_reg__
 305               	/* epilogue start */
  75:include/USART.c **** }
 307               	.LM27:
 308 00a0 DF91      		pop r29
 309 00a2 CF91      		pop r28
 310 00a4 1F91      		pop r17
 311 00a6 0F91      		pop r16
 312 00a8 FF90      		pop r15
 313 00aa EF90      		pop r14
 314 00ac DF90      		pop r13
 315 00ae CF90      		pop r12
 316 00b0 0895      		ret
 317               	.L15:
  70:include/USART.c ****       myString[i] = response;                       /* add in a letter */
 319               	.LM28:
 320 00b2 CE0D      		add r28,r14
 321 00b4 DF1D      		adc r29,r15
 322 00b6 C882      		st Y,r12
  71:include/USART.c ****       i++;
 324               	.LM29:
 325 00b8 D394      		inc r13
 326 00ba 00C0      		rjmp .L14
 332               	.Lscope5:
 334               		.stabd	78,0,0
 337               	.global	printByte
 339               	printByte:
 340               		.stabd	46,0,0
  76:include/USART.c **** 
  77:include/USART.c **** void printByte(uint8_t byte) {
 342               	.LM30:
 343               	.LFBB6:
 344 00bc CF93      		push r28
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 1 */
 348               	.L__stack_usage = 1
 349 00be C82F      		mov r28,r24
  78:include/USART.c ****               /* Converts a byte to a string of decimal text, sends it */
  79:include/USART.c ****   transmitByte('0' + (byte / 100));                        /* Hundreds */
 351               	.LM31:
 352 00c0 64E6      		ldi r22,lo8(100)
 353 00c2 0E94 0000 		call __udivmodqi4
 354 00c6 805D      		subi r24,lo8(-(48))
 355 00c8 0E94 0000 		call transmitByte
  80:include/USART.c ****   transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 357               	.LM32:
 358 00cc 2AE0      		ldi r18,lo8(10)
 359 00ce 8C2F      		mov r24,r28
 360 00d0 622F      		mov r22,r18
 361 00d2 0E94 0000 		call __udivmodqi4
 362 00d6 C92F      		mov r28,r25
 363 00d8 0E94 0000 		call __udivmodqi4
 364 00dc 80E3      		ldi r24,lo8(48)
 365 00de 890F      		add r24,r25
 366 00e0 0E94 0000 		call transmitByte
  81:include/USART.c ****   transmitByte('0' + (byte % 10));                             /* Ones */
 368               	.LM33:
 369 00e4 80E3      		ldi r24,lo8(48)
 370 00e6 8C0F      		add r24,r28
 371               	/* epilogue start */
  82:include/USART.c **** }
 373               	.LM34:
 374 00e8 CF91      		pop r28
  81:include/USART.c ****   transmitByte('0' + (byte % 10));                             /* Ones */
 376               	.LM35:
 377 00ea 0C94 0000 		jmp transmitByte
 379               	.Lscope6:
 381               		.stabd	78,0,0
 384               	.global	printWord
 386               	printWord:
 387               		.stabd	46,0,0
  83:include/USART.c **** 
  84:include/USART.c **** void printWord(uint16_t word) {
 389               	.LM36:
 390               	.LFBB7:
 391 00ee 0F93      		push r16
 392 00f0 1F93      		push r17
 393 00f2 CF93      		push r28
 394 00f4 DF93      		push r29
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 4 */
 398               	.L__stack_usage = 4
 399 00f6 EC01      		movw r28,r24
  85:include/USART.c ****   transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 401               	.LM37:
 402 00f8 60E1      		ldi r22,lo8(16)
 403 00fa 77E2      		ldi r23,lo8(39)
 404 00fc 0E94 0000 		call __udivmodhi4
 405 0100 80E3      		ldi r24,lo8(48)
 406 0102 860F      		add r24,r22
 407 0104 0E94 0000 		call transmitByte
  86:include/USART.c ****   transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 409               	.LM38:
 410 0108 CE01      		movw r24,r28
 411 010a 68EE      		ldi r22,lo8(-24)
 412 010c 73E0      		ldi r23,lo8(3)
 413 010e 0E94 0000 		call __udivmodhi4
 414 0112 CB01      		movw r24,r22
 415 0114 0AE0      		ldi r16,lo8(10)
 416 0116 10E0      		ldi r17,0
 417 0118 B801      		movw r22,r16
 418 011a 0E94 0000 		call __udivmodhi4
 419 011e 805D      		subi r24,lo8(-(48))
 420 0120 0E94 0000 		call transmitByte
  87:include/USART.c ****   transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 422               	.LM39:
 423 0124 CE01      		movw r24,r28
 424 0126 64E6      		ldi r22,lo8(100)
 425 0128 70E0      		ldi r23,0
 426 012a 0E94 0000 		call __udivmodhi4
 427 012e CB01      		movw r24,r22
 428 0130 B801      		movw r22,r16
 429 0132 0E94 0000 		call __udivmodhi4
 430 0136 805D      		subi r24,lo8(-(48))
 431 0138 0E94 0000 		call transmitByte
  88:include/USART.c ****   transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 433               	.LM40:
 434 013c CE01      		movw r24,r28
 435 013e B801      		movw r22,r16
 436 0140 0E94 0000 		call __udivmodhi4
 437 0144 C82F      		mov r28,r24
 438 0146 CB01      		movw r24,r22
 439 0148 B801      		movw r22,r16
 440 014a 0E94 0000 		call __udivmodhi4
 441 014e 805D      		subi r24,lo8(-(48))
 442 0150 0E94 0000 		call transmitByte
  89:include/USART.c ****   transmitByte('0' + (word % 10));                             /* Ones */
 444               	.LM41:
 445 0154 80E3      		ldi r24,lo8(48)
 446 0156 8C0F      		add r24,r28
 447               	/* epilogue start */
  90:include/USART.c **** }
 449               	.LM42:
 450 0158 DF91      		pop r29
 451 015a CF91      		pop r28
 452 015c 1F91      		pop r17
 453 015e 0F91      		pop r16
  89:include/USART.c ****   transmitByte('0' + (word % 10));                             /* Ones */
 455               	.LM43:
 456 0160 0C94 0000 		jmp transmitByte
 458               	.Lscope7:
 460               		.stabd	78,0,0
 463               	.global	printBinaryByte
 465               	printBinaryByte:
 466               		.stabd	46,0,0
  91:include/USART.c **** 
  92:include/USART.c **** void printBinaryByte(uint8_t byte) {
 468               	.LM44:
 469               	.LFBB8:
 470 0164 1F93      		push r17
 471 0166 CF93      		push r28
 472 0168 DF93      		push r29
 473 016a 1F92      		push __zero_reg__
 474 016c CDB7      		in r28,__SP_L__
 475 016e DEB7      		in r29,__SP_H__
 476               	/* prologue: function */
 477               	/* frame size = 1 */
 478               	/* stack size = 4 */
 479               	.L__stack_usage = 4
 480 0170 8983      		std Y+1,r24
  93:include/USART.c ****                        /* Prints out a byte as a series of 1's and 0's */
  94:include/USART.c ****   uint8_t bit;
  95:include/USART.c ****   for (bit = 7; bit < 255; bit--) {
 482               	.LM45:
 483 0172 17E0      		ldi r17,lo8(7)
 484               	.L25:
  96:include/USART.c ****     if (bit_is_set(byte, bit))
 486               	.LM46:
 487 0174 8981      		ldd r24,Y+1
 488 0176 90E0      		ldi r25,0
 489 0178 012E      		mov r0,r17
 490 017a 00C0      		rjmp 2f
 491               		1:
 492 017c 9595      		asr r25
 493 017e 8795      		ror r24
 494               		2:
 495 0180 0A94      		dec r0
 496 0182 02F4      		brpl 1b
 497 0184 80FF      		sbrs r24,0
 498 0186 00C0      		rjmp .L22
  97:include/USART.c ****       transmitByte('1');
 500               	.LM47:
 501 0188 81E3      		ldi r24,lo8(49)
 502 018a 00C0      		rjmp .L26
 503               	.L22:
  98:include/USART.c ****     else
  99:include/USART.c ****       transmitByte('0');
 505               	.LM48:
 506 018c 80E3      		ldi r24,lo8(48)
 507               	.L26:
 508 018e 0E94 0000 		call transmitByte
  95:include/USART.c ****   for (bit = 7; bit < 255; bit--) {
 510               	.LM49:
 511 0192 1150      		subi r17,1
 512 0194 00F4      		brcc .L25
 513               	/* epilogue start */
 100:include/USART.c ****   }
 101:include/USART.c **** }
 515               	.LM50:
 516 0196 0F90      		pop __tmp_reg__
 517 0198 DF91      		pop r29
 518 019a CF91      		pop r28
 519 019c 1F91      		pop r17
 520 019e 0895      		ret
 525               	.Lscope8:
 527               		.stabd	78,0,0
 530               	.global	nibbleToHexCharacter
 532               	nibbleToHexCharacter:
 533               		.stabd	46,0,0
 102:include/USART.c **** 
 103:include/USART.c **** char nibbleToHexCharacter(uint8_t nibble) {
 535               	.LM51:
 536               	.LFBB9:
 537               	/* prologue: function */
 538               	/* frame size = 0 */
 539               	/* stack size = 0 */
 540               	.L__stack_usage = 0
 104:include/USART.c ****                                    /* Converts 4 bits into hexadecimal */
 105:include/USART.c ****   if (nibble < 10) {
 542               	.LM52:
 543 01a0 8A30      		cpi r24,lo8(10)
 544 01a2 00F4      		brsh .L28
 106:include/USART.c ****     return ('0' + nibble);
 546               	.LM53:
 547 01a4 805D      		subi r24,lo8(-(48))
 548 01a6 0895      		ret
 549               	.L28:
 107:include/USART.c ****   }
 108:include/USART.c ****   else {
 109:include/USART.c ****     return ('A' + nibble - 10);
 551               	.LM54:
 552 01a8 895C      		subi r24,lo8(-(55))
 110:include/USART.c ****   }
 111:include/USART.c **** }
 554               	.LM55:
 555 01aa 0895      		ret
 557               	.Lscope9:
 559               		.stabd	78,0,0
 562               	.global	printHexByte
 564               	printHexByte:
 565               		.stabd	46,0,0
 112:include/USART.c **** 
 113:include/USART.c **** void printHexByte(uint8_t byte) {
 567               	.LM56:
 568               	.LFBB10:
 569 01ac CF93      		push r28
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 1 */
 573               	.L__stack_usage = 1
 574 01ae C82F      		mov r28,r24
 114:include/USART.c ****                         /* Prints a byte as its hexadecimal equivalent */
 115:include/USART.c ****   uint8_t nibble;
 116:include/USART.c ****   nibble = (byte & 0b11110000) >> 4;
 117:include/USART.c ****   transmitByte(nibbleToHexCharacter(nibble));
 576               	.LM57:
 577 01b0 8295      		swap r24
 578 01b2 8F70      		andi r24,lo8(15)
 579 01b4 0E94 0000 		call nibbleToHexCharacter
 580 01b8 0E94 0000 		call transmitByte
 118:include/USART.c ****   nibble = byte & 0b00001111;
 119:include/USART.c ****   transmitByte(nibbleToHexCharacter(nibble));
 582               	.LM58:
 583 01bc 8C2F      		mov r24,r28
 584 01be 8F70      		andi r24,lo8(15)
 585 01c0 0E94 0000 		call nibbleToHexCharacter
 586               	/* epilogue start */
 120:include/USART.c **** }
 588               	.LM59:
 589 01c4 CF91      		pop r28
 119:include/USART.c ****   transmitByte(nibbleToHexCharacter(nibble));
 591               	.LM60:
 592 01c6 0C94 0000 		jmp transmitByte
 594               	.Lscope10:
 596               		.stabd	78,0,0
 598               	.global	getNumber
 600               	getNumber:
 601               		.stabd	46,0,0
 121:include/USART.c **** 
 122:include/USART.c **** uint8_t getNumber(void) {
 603               	.LM61:
 604               	.LFBB11:
 605 01ca 0F93      		push r16
 606 01cc 1F93      		push r17
 607 01ce CF93      		push r28
 608 01d0 DF93      		push r29
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 4 */
 612               	.L__stack_usage = 4
 123:include/USART.c ****   // Gets a numerical 0-255 from the serial port.
 124:include/USART.c ****   // Converts from string to number.
 125:include/USART.c ****   char hundreds = '0';
 126:include/USART.c ****   char tens = '0';
 127:include/USART.c ****   char ones = '0';
 128:include/USART.c ****   char thisChar = '0';
 614               	.LM62:
 615 01d2 D0E3      		ldi r29,lo8(48)
 127:include/USART.c ****   char ones = '0';
 617               	.LM63:
 618 01d4 C0E3      		ldi r28,lo8(48)
 126:include/USART.c ****   char tens = '0';
 620               	.LM64:
 621 01d6 00E3      		ldi r16,lo8(48)
 622               	.L33:
 129:include/USART.c ****   do {                                                   /* shift over */
 130:include/USART.c ****     hundreds = tens;
 131:include/USART.c ****     tens = ones;
 132:include/USART.c ****     ones = thisChar;
 133:include/USART.c ****     thisChar = receiveByte();                   /* get a new character */
 624               	.LM65:
 625 01d8 0E94 0000 		call receiveByte
 626 01dc 182F      		mov r17,r24
 134:include/USART.c ****     transmitByte(thisChar);                                    /* echo */
 628               	.LM66:
 629 01de 0E94 0000 		call transmitByte
 135:include/USART.c ****   } while (thisChar != '\r');                     /* until type return */
 631               	.LM67:
 632 01e2 1D30      		cpi r17,lo8(13)
 633 01e4 01F0      		breq .L32
 133:include/USART.c ****     thisChar = receiveByte();                   /* get a new character */
 635               	.LM68:
 636 01e6 0C2F      		mov r16,r28
 637 01e8 CD2F      		mov r28,r29
 638 01ea D12F      		mov r29,r17
 639 01ec 00C0      		rjmp .L33
 640               	.L32:
 136:include/USART.c ****   return (100 * (hundreds - '0') + 10 * (tens - '0') + ones - '0');
 642               	.LM69:
 643 01ee D053      		subi r29,lo8(-(-48))
 644 01f0 0053      		subi r16,lo8(-(-48))
 645 01f2 84E6      		ldi r24,lo8(100)
 646 01f4 089F      		mul r16,r24
 647 01f6 D00D      		add r29,r0
 648 01f8 1124      		clr __zero_reg__
 649 01fa 9C2F      		mov r25,r28
 650 01fc 990F      		lsl r25
 651 01fe 9056      		subi r25,lo8(-(-96))
 652 0200 892F      		mov r24,r25
 653 0202 880F      		lsl r24
 654 0204 880F      		lsl r24
 655 0206 890F      		add r24,r25
 137:include/USART.c **** }
 657               	.LM70:
 658 0208 8D0F      		add r24,r29
 659               	/* epilogue start */
 660 020a DF91      		pop r29
 661 020c CF91      		pop r28
 662 020e 1F91      		pop r17
 663 0210 0F91      		pop r16
 664 0212 0895      		ret
 666               	.Lscope11:
 668               		.stabd	78,0,0
 670               	.Letext0:
 671               		.ident	"GCC: (GNU) 4.8.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USART.c
     /tmp/ccArN393.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccArN393.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccArN393.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccArN393.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccArN393.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccArN393.s:105    .text:0000000000000000 initUSART
     /tmp/ccArN393.s:145    .text:0000000000000022 transmitByte
     /tmp/ccArN393.s:171    .text:0000000000000030 receiveByte
     /tmp/ccArN393.s:200    .text:000000000000003e printString
     /tmp/ccArN393.s:252    .text:0000000000000064 readString
     /tmp/ccArN393.s:339    .text:00000000000000bc printByte
     /tmp/ccArN393.s:386    .text:00000000000000ee printWord
     /tmp/ccArN393.s:465    .text:0000000000000164 printBinaryByte
     /tmp/ccArN393.s:532    .text:00000000000001a0 nibbleToHexCharacter
     /tmp/ccArN393.s:564    .text:00000000000001ac printHexByte
     /tmp/ccArN393.s:600    .text:00000000000001ca getNumber

UNDEFINED SYMBOLS
__udivmodqi4
__udivmodhi4
