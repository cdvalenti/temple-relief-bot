
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000006e8  2**0
                  ALLOC
  3 .stab         000028bc  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001295  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004239  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	2a d1       	rcall	.+596    	; 0x290 <main>
  3c:	09 c3       	rjmp	.+1554   	; 0x650 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <PCINT1_vect>:
uint16_t getAverage(uint16_t * arr, uint8_t size);
void initMotorDriverIO(void);
void initTimer0PWM(void);
void initPCInterrupts(void);

ISR(PCINT1_vect) {
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
  4e:	af 93       	push	r26
  50:	bf 93       	push	r27
  
  if(bit_is_set(PINB, ENCODER_A)){
  52:	b1 9b       	sbis	0x16, 1	; 22
  54:	03 c0       	rjmp	.+6      	; 0x5c <PCINT1_vect+0x1c>
    if(bit_is_set(PINB, ENCODER_B)){
  56:	b2 9b       	sbis	0x16, 2	; 22
  58:	03 c0       	rjmp	.+6      	; 0x60 <PCINT1_vect+0x20>
  5a:	0e c0       	rjmp	.+28     	; 0x78 <PCINT1_vect+0x38>
      encoder_count--;
    }else{
      encoder_count++;
    }
  }else{
    if(bit_is_set(PINB, ENCODER_B)){
  5c:	b2 9b       	sbis	0x16, 2	; 22
  5e:	0c c0       	rjmp	.+24     	; 0x78 <PCINT1_vect+0x38>
      encoder_count++;
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	90 91 61 00 	lds	r25, 0x0061
  68:	a0 91 62 00 	lds	r26, 0x0062
  6c:	b0 91 63 00 	lds	r27, 0x0063
  70:	01 96       	adiw	r24, 0x01	; 1
  72:	a1 1d       	adc	r26, r1
  74:	b1 1d       	adc	r27, r1
  76:	0b c0       	rjmp	.+22     	; 0x8e <PCINT1_vect+0x4e>
    }else{
      encoder_count--;
  78:	80 91 60 00 	lds	r24, 0x0060
  7c:	90 91 61 00 	lds	r25, 0x0061
  80:	a0 91 62 00 	lds	r26, 0x0062
  84:	b0 91 63 00 	lds	r27, 0x0063
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	a1 09       	sbc	r26, r1
  8c:	b1 09       	sbc	r27, r1
  8e:	80 93 60 00 	sts	0x0060, r24
  92:	90 93 61 00 	sts	0x0061, r25
  96:	a0 93 62 00 	sts	0x0062, r26
  9a:	b0 93 63 00 	sts	0x0063, r27
    }
  }
}
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <PCINT2_vect>:

ISR(PCINT2_vect) {
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
 
 if(bit_is_set(PINB, ENCODER_B)){
  c2:	b2 9b       	sbis	0x16, 2	; 22
  c4:	03 c0       	rjmp	.+6      	; 0xcc <PCINT2_vect+0x1c>
    if(bit_is_set(PINB, ENCODER_A)){
  c6:	b1 9b       	sbis	0x16, 1	; 22
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <PCINT2_vect+0x20>
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <PCINT2_vect+0x38>
      encoder_count++;
    }else{
      encoder_count--;
    }
  }else{
    if(bit_is_set(PINB, ENCODER_A)){
  cc:	b1 9b       	sbis	0x16, 1	; 22
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <PCINT2_vect+0x38>
      encoder_count--;
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	90 91 61 00 	lds	r25, 0x0061
  d8:	a0 91 62 00 	lds	r26, 0x0062
  dc:	b0 91 63 00 	lds	r27, 0x0063
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	a1 09       	sbc	r26, r1
  e4:	b1 09       	sbc	r27, r1
  e6:	0b c0       	rjmp	.+22     	; 0xfe <PCINT2_vect+0x4e>
    }else{
      encoder_count++;
  e8:	80 91 60 00 	lds	r24, 0x0060
  ec:	90 91 61 00 	lds	r25, 0x0061
  f0:	a0 91 62 00 	lds	r26, 0x0062
  f4:	b0 91 63 00 	lds	r27, 0x0063
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	a1 1d       	adc	r26, r1
  fc:	b1 1d       	adc	r27, r1
  fe:	80 93 60 00 	sts	0x0060, r24
 102:	90 93 61 00 	sts	0x0061, r25
 106:	a0 93 62 00 	sts	0x0062, r26
 10a:	b0 93 63 00 	sts	0x0063, r27
    }
  }
}
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <initADC>:
}

void initADC(void) {
  //initialize ADC (set ref voltage, prescaler, and enable)
  //updated for attiny85  
  ADMUX &= ~(1 << REFS1);
 120:	3f 98       	cbi	0x07, 7	; 7
  ADMUX &= ~(1 << REFS0);
 122:	3e 98       	cbi	0x07, 6	; 7
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1);    // ADC clock prescaler /8
 124:	86 b1       	in	r24, 0x06	; 6
 126:	83 60       	ori	r24, 0x03	; 3
 128:	86 b9       	out	0x06, r24	; 6
  ADCSRA |= (1 << ADEN);               			// enable ADC
 12a:	37 9a       	sbi	0x06, 7	; 6
 12c:	08 95       	ret

0000012e <readADC>:
}

uint16_t readADC(uint8_t channel) {
  //read ADC value from channel (ADC0 to ADC 5)
  //works for attiny85
  ADMUX = (0b11110000 & ADMUX) | channel;
 12e:	97 b1       	in	r25, 0x07	; 7
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 2b       	or	r25, r24
 134:	97 b9       	out	0x07, r25	; 7
  ADCSRA |= (1 << ADSC);
 136:	36 9a       	sbi	0x06, 6	; 6
  loop_until_bit_is_clear(ADCSRA, ADSC);
 138:	36 99       	sbic	0x06, 6	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <readADC+0xa>
  return (ADC);
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	95 b1       	in	r25, 0x05	; 5
}
 140:	08 95       	ret

00000142 <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	26 17       	cp	r18, r22
 146:	31 f0       	breq	.+12     	; 0x154 <initValues+0x12>
     *arr = value;
 148:	fc 01       	movw	r30, r24
 14a:	41 93       	st	Z+, r20
 14c:	51 93       	st	Z+, r21
 14e:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	f8 cf       	rjmp	.-16     	; 0x144 <initValues+0x2>
     *arr = value;
     arr++;
  }
}
 154:	08 95       	ret

00000156 <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	eb 01       	movw	r28, r22
 15e:	c1 50       	subi	r28, 0x01	; 1
 160:	d0 48       	sbci	r29, 0x80	; 128
 162:	cc 0f       	add	r28, r28
 164:	dd 1f       	adc	r29, r29
 166:	c8 0f       	add	r28, r24
 168:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	61 50       	subi	r22, 0x01	; 1
 16e:	71 09       	sbc	r23, r1
 170:	29 2f       	mov	r18, r25
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	26 17       	cp	r18, r22
 176:	37 07       	cpc	r19, r23
 178:	44 f4       	brge	.+16     	; 0x18a <storeNewADC+0x34>
 17a:	fe 01       	movw	r30, r28
    *arr = *(arr-1);
 17c:	32 91       	ld	r19, -Z
 17e:	22 91       	ld	r18, -Z
 180:	39 83       	std	Y+1, r19	; 0x01
 182:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 184:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
 186:	ef 01       	movw	r28, r30
 188:	f3 cf       	rjmp	.-26     	; 0x170 <storeNewADC+0x1a>
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 18a:	84 2f       	mov	r24, r20
 18c:	d0 df       	rcall	.-96     	; 0x12e <readADC>
 18e:	99 83       	std	Y+1, r25	; 0x01
 190:	88 83       	st	Y, r24
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 198:	fc 01       	movw	r30, r24
 19a:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	23 17       	cp	r18, r19
 1a6:	41 f0       	breq	.+16     	; 0x1b8 <getAverage+0x20>
    sum = sum + *arr;
 1a8:	41 91       	ld	r20, Z+
 1aa:	51 91       	ld	r21, Z+
 1ac:	64 0f       	add	r22, r20
 1ae:	75 1f       	adc	r23, r21
 1b0:	81 1d       	adc	r24, r1
 1b2:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	f6 cf       	rjmp	.-20     	; 0x1a4 <getAverage+0xc>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	0a d2       	rcall	.+1044   	; 0x5d4 <__udivmodsi4>
  return avg;
}
 1c0:	c9 01       	movw	r24, r18
 1c2:	08 95       	ret

000001c4 <initTimer0PWM>:

void initTimer0PWM(void){
  /* Set up Timer0 (8bit) */
  //changed for attiny85
  //Use Mode 3, FastPWM
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 1c4:	8a b5       	in	r24, 0x2a	; 42
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	8a bd       	out	0x2a, r24	; 42

  //Clear at match, set at bottom
  TCCR0A |= (1 << COM0A1);
 1ca:	8a b5       	in	r24, 0x2a	; 42
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	8a bd       	out	0x2a, r24	; 42
  
  // No prescale, gives freq = ~4kHz
  TCCR0B |= (1<<CS00);
 1d0:	83 b7       	in	r24, 0x33	; 51
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	83 bf       	out	0x33, r24	; 51
  
  //set pins for output
  DDRB |= (1 << DRIVER_PWM);
 1d6:	b8 9a       	sbi	0x17, 0	; 23
 1d8:	08 95       	ret

000001da <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  //set for output
  DDRB |= (1<<DRIVER_A);
 1da:	bd 9a       	sbi	0x17, 5	; 23
  DDRB |= (1<<DRIVER_B);
 1dc:	bb 9a       	sbi	0x17, 3	; 23
  //init to zero
  pin_lo('B',DRIVER_A);
 1de:	65 e0       	ldi	r22, 0x05	; 5
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	2b d0       	rcall	.+86     	; 0x23e <pin_lo>
  pin_lo('B',DRIVER_B);
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <pin_lo>

000001f2 <initPCInterrupts>:

}
//removed motor calculations

void initPCInterrupts(void){
  DDRB &= ~(1<<ENCODER_A);
 1f2:	b9 98       	cbi	0x17, 1	; 23
  DDRB &= ~(1<<ENCODER_B);
 1f4:	ba 98       	cbi	0x17, 2	; 23
  PORTB |= (1<<ENCODER_A);
 1f6:	c1 9a       	sbi	0x18, 1	; 24
  PORTB |= (1<<ENCODER_B);
 1f8:	c2 9a       	sbi	0x18, 2	; 24
  GIMSK |= (1<<PCIE);
 1fa:	8b b7       	in	r24, 0x3b	; 59
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	8b bf       	out	0x3b, r24	; 59
  PCMSK |= (1<<PCINT1) | (1<<PCINT2);
 200:	85 b3       	in	r24, 0x15	; 21
 202:	86 60       	ori	r24, 0x06	; 6
 204:	85 bb       	out	0x15, r24	; 21
  sei();
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <toggle>:

void toggle(char port, int bit)
{
    if(port == 'A'){
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
 20a:	82 34       	cpi	r24, 0x42	; 66
 20c:	51 f4       	brne	.+20     	; 0x222 <toggle+0x18>
      PORTB ^= (1<<bit);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	06 2e       	mov	r0, r22
 216:	01 c0       	rjmp	.+2      	; 0x21a <toggle+0x10>
 218:	88 0f       	add	r24, r24
 21a:	0a 94       	dec	r0
 21c:	ea f7       	brpl	.-6      	; 0x218 <toggle+0xe>
 21e:	28 27       	eor	r18, r24
 220:	28 bb       	out	0x18, r18	; 24
 222:	08 95       	ret

00000224 <pin_hi>:

void pin_hi(char port, int bit)
{
    if(port == 'A'){
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
 224:	82 34       	cpi	r24, 0x42	; 66
 226:	51 f4       	brne	.+20     	; 0x23c <pin_hi+0x18>
      PORTB |= (1<<bit);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	06 2e       	mov	r0, r22
 230:	01 c0       	rjmp	.+2      	; 0x234 <pin_hi+0x10>
 232:	88 0f       	add	r24, r24
 234:	0a 94       	dec	r0
 236:	ea f7       	brpl	.-6      	; 0x232 <pin_hi+0xe>
 238:	28 2b       	or	r18, r24
 23a:	28 bb       	out	0x18, r18	; 24
 23c:	08 95       	ret

0000023e <pin_lo>:

void pin_lo(char port, int bit)
{
    if(port == 'A'){
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 23e:	82 34       	cpi	r24, 0x42	; 66
 240:	59 f4       	brne	.+22     	; 0x258 <pin_lo+0x1a>
      PORTB &= ~(1<<bit);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	06 2e       	mov	r0, r22
 24a:	01 c0       	rjmp	.+2      	; 0x24e <pin_lo+0x10>
 24c:	88 0f       	add	r24, r24
 24e:	0a 94       	dec	r0
 250:	ea f7       	brpl	.-6      	; 0x24c <pin_lo+0xe>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	88 bb       	out	0x18, r24	; 24
 258:	08 95       	ret

0000025a <set_as_input>:

void set_as_input(char port, int bit)
{
    if(port == 'A'){
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 25a:	82 34       	cpi	r24, 0x42	; 66
 25c:	59 f4       	brne	.+22     	; 0x274 <__stack+0x15>
      DDRB &= ~(1<<bit);
 25e:	27 b3       	in	r18, 0x17	; 23
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	06 2e       	mov	r0, r22
 266:	01 c0       	rjmp	.+2      	; 0x26a <__stack+0xb>
 268:	88 0f       	add	r24, r24
 26a:	0a 94       	dec	r0
 26c:	ea f7       	brpl	.-6      	; 0x268 <__stack+0x9>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	87 bb       	out	0x17, r24	; 23
 274:	08 95       	ret

00000276 <set_as_output>:
 276:	82 34       	cpi	r24, 0x42	; 66
 278:	51 f4       	brne	.+20     	; 0x28e <set_as_output+0x18>
 27a:	27 b3       	in	r18, 0x17	; 23
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	06 2e       	mov	r0, r22
 282:	01 c0       	rjmp	.+2      	; 0x286 <set_as_output+0x10>
 284:	88 0f       	add	r24, r24
 286:	0a 94       	dec	r0
 288:	ea f7       	brpl	.-6      	; 0x284 <set_as_output+0xe>
 28a:	28 2b       	or	r18, r24
 28c:	27 bb       	out	0x17, r18	; 23
 28e:	08 95       	ret

00000290 <main>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	c0 54       	subi	r28, 0x40	; 64
 29a:	d1 09       	sbc	r29, r1
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	3c df       	rcall	.-392    	; 0x120 <initADC>
 2a8:	98 df       	rcall	.-208    	; 0x1da <initMotorDriverIO>
 2aa:	8c df       	rcall	.-232    	; 0x1c4 <initTimer0PWM>
 2ac:	a2 df       	rcall	.-188    	; 0x1f2 <initPCInterrupts>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	60 e2       	ldi	r22, 0x20	; 32
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	44 df       	rcall	.-376    	; 0x142 <initValues>
 2ba:	1f ef       	ldi	r17, 0xFF	; 255
 2bc:	34 e3       	ldi	r19, 0x34	; 52
 2be:	c3 2e       	mov	r12, r19
 2c0:	38 e0       	ldi	r19, 0x08	; 8
 2c2:	d3 2e       	mov	r13, r19
 2c4:	e1 2c       	mov	r14, r1
 2c6:	f1 2c       	mov	r15, r1
 2c8:	42 e0       	ldi	r20, 0x02	; 2
 2ca:	60 e2       	ldi	r22, 0x20	; 32
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	42 df       	rcall	.-380    	; 0x156 <storeNewADC>
 2d2:	60 e2       	ldi	r22, 0x20	; 32
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	5f df       	rcall	.-322    	; 0x198 <getAverage>
 2da:	f8 94       	cli
 2dc:	80 90 60 00 	lds	r8, 0x0060
 2e0:	90 90 61 00 	lds	r9, 0x0061
 2e4:	a0 90 62 00 	lds	r10, 0x0062
 2e8:	b0 90 63 00 	lds	r11, 0x0063
 2ec:	78 94       	sei
 2ee:	bc 01       	movw	r22, r24
 2f0:	88 27       	eor	r24, r24
 2f2:	77 fd       	sbrc	r23, 7
 2f4:	80 95       	com	r24
 2f6:	98 2f       	mov	r25, r24
 2f8:	76 d0       	rcall	.+236    	; 0x3e6 <__floatsisf>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	a9 01       	movw	r20, r18
 300:	d6 d0       	rcall	.+428    	; 0x4ae <__mulsf3>
 302:	3e d0       	rcall	.+124    	; 0x380 <__fixsfsi>
 304:	68 19       	sub	r22, r8
 306:	79 09       	sbc	r23, r9
 308:	8a 09       	sbc	r24, r10
 30a:	9b 09       	sbc	r25, r11
 30c:	65 33       	cpi	r22, 0x35	; 53
 30e:	28 e0       	ldi	r18, 0x08	; 8
 310:	72 07       	cpc	r23, r18
 312:	81 05       	cpc	r24, r1
 314:	91 05       	cpc	r25, r1
 316:	14 f0       	brlt	.+4      	; 0x31c <main+0x8c>
 318:	19 bd       	out	0x29, r17	; 41
 31a:	12 c0       	rjmp	.+36     	; 0x340 <main+0xb0>
 31c:	6b 3f       	cpi	r22, 0xFB	; 251
 31e:	71 05       	cpc	r23, r1
 320:	81 05       	cpc	r24, r1
 322:	91 05       	cpc	r25, r1
 324:	34 f0       	brlt	.+12     	; 0x332 <main+0xa2>
 326:	a7 01       	movw	r20, r14
 328:	96 01       	movw	r18, r12
 32a:	76 d1       	rcall	.+748    	; 0x618 <__divmodsi4>
 32c:	21 95       	neg	r18
 32e:	29 bd       	out	0x29, r18	; 41
 330:	07 c0       	rjmp	.+14     	; 0x340 <main+0xb0>
 332:	66 30       	cpi	r22, 0x06	; 6
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	72 07       	cpc	r23, r18
 338:	82 07       	cpc	r24, r18
 33a:	92 07       	cpc	r25, r18
 33c:	4c f0       	brlt	.+18     	; 0x350 <main+0xc0>
 33e:	19 bc       	out	0x29, r1	; 41
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	6d df       	rcall	.-294    	; 0x224 <pin_hi>
 34a:	63 e0       	ldi	r22, 0x03	; 3
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	14 c0       	rjmp	.+40     	; 0x378 <main+0xe8>
 350:	6c 3c       	cpi	r22, 0xCC	; 204
 352:	27 ef       	ldi	r18, 0xF7	; 247
 354:	72 07       	cpc	r23, r18
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	82 07       	cpc	r24, r18
 35a:	92 07       	cpc	r25, r18
 35c:	2c f0       	brlt	.+10     	; 0x368 <main+0xd8>
 35e:	a7 01       	movw	r20, r14
 360:	96 01       	movw	r18, r12
 362:	5a d1       	rcall	.+692    	; 0x618 <__divmodsi4>
 364:	29 bd       	out	0x29, r18	; 41
 366:	01 c0       	rjmp	.+2      	; 0x36a <main+0xda>
 368:	19 bd       	out	0x29, r17	; 41
 36a:	63 e0       	ldi	r22, 0x03	; 3
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	58 df       	rcall	.-336    	; 0x224 <pin_hi>
 374:	65 e0       	ldi	r22, 0x05	; 5
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	60 df       	rcall	.-320    	; 0x23e <pin_lo>
 37e:	a4 cf       	rjmp	.-184    	; 0x2c8 <main+0x38>

00000380 <__fixsfsi>:
 380:	04 d0       	rcall	.+8      	; 0x38a <__fixunssfsi>
 382:	68 94       	set
 384:	b1 11       	cpse	r27, r1
 386:	8d c0       	rjmp	.+282    	; 0x4a2 <__fp_szero>
 388:	08 95       	ret

0000038a <__fixunssfsi>:
 38a:	70 d0       	rcall	.+224    	; 0x46c <__fp_splitA>
 38c:	88 f0       	brcs	.+34     	; 0x3b0 <__fixunssfsi+0x26>
 38e:	9f 57       	subi	r25, 0x7F	; 127
 390:	90 f0       	brcs	.+36     	; 0x3b6 <__fixunssfsi+0x2c>
 392:	b9 2f       	mov	r27, r25
 394:	99 27       	eor	r25, r25
 396:	b7 51       	subi	r27, 0x17	; 23
 398:	a0 f0       	brcs	.+40     	; 0x3c2 <__fixunssfsi+0x38>
 39a:	d1 f0       	breq	.+52     	; 0x3d0 <__fixunssfsi+0x46>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	1a f0       	brmi	.+6      	; 0x3ac <__fixunssfsi+0x22>
 3a6:	ba 95       	dec	r27
 3a8:	c9 f7       	brne	.-14     	; 0x39c <__fixunssfsi+0x12>
 3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <__fixunssfsi+0x46>
 3ac:	b1 30       	cpi	r27, 0x01	; 1
 3ae:	81 f0       	breq	.+32     	; 0x3d0 <__fixunssfsi+0x46>
 3b0:	77 d0       	rcall	.+238    	; 0x4a0 <__fp_zero>
 3b2:	b1 e0       	ldi	r27, 0x01	; 1
 3b4:	08 95       	ret
 3b6:	74 c0       	rjmp	.+232    	; 0x4a0 <__fp_zero>
 3b8:	67 2f       	mov	r22, r23
 3ba:	78 2f       	mov	r23, r24
 3bc:	88 27       	eor	r24, r24
 3be:	b8 5f       	subi	r27, 0xF8	; 248
 3c0:	39 f0       	breq	.+14     	; 0x3d0 <__fixunssfsi+0x46>
 3c2:	b9 3f       	cpi	r27, 0xF9	; 249
 3c4:	cc f3       	brlt	.-14     	; 0x3b8 <__fixunssfsi+0x2e>
 3c6:	86 95       	lsr	r24
 3c8:	77 95       	ror	r23
 3ca:	67 95       	ror	r22
 3cc:	b3 95       	inc	r27
 3ce:	d9 f7       	brne	.-10     	; 0x3c6 <__fixunssfsi+0x3c>
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__fixunssfsi+0x56>
 3d2:	90 95       	com	r25
 3d4:	80 95       	com	r24
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__floatunsisf>:
 3e2:	e8 94       	clt
 3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <__floatsisf+0x12>

000003e6 <__floatsisf>:
 3e6:	97 fb       	bst	r25, 7
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__floatsisf+0x12>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	99 23       	and	r25, r25
 3fa:	a9 f0       	breq	.+42     	; 0x426 <__floatsisf+0x40>
 3fc:	f9 2f       	mov	r31, r25
 3fe:	96 e9       	ldi	r25, 0x96	; 150
 400:	bb 27       	eor	r27, r27
 402:	93 95       	inc	r25
 404:	f6 95       	lsr	r31
 406:	87 95       	ror	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b7 95       	ror	r27
 40e:	f1 11       	cpse	r31, r1
 410:	f8 cf       	rjmp	.-16     	; 0x402 <__floatsisf+0x1c>
 412:	fa f4       	brpl	.+62     	; 0x452 <__floatsisf+0x6c>
 414:	bb 0f       	add	r27, r27
 416:	11 f4       	brne	.+4      	; 0x41c <__floatsisf+0x36>
 418:	60 ff       	sbrs	r22, 0
 41a:	1b c0       	rjmp	.+54     	; 0x452 <__floatsisf+0x6c>
 41c:	6f 5f       	subi	r22, 0xFF	; 255
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	16 c0       	rjmp	.+44     	; 0x452 <__floatsisf+0x6c>
 426:	88 23       	and	r24, r24
 428:	11 f0       	breq	.+4      	; 0x42e <__floatsisf+0x48>
 42a:	96 e9       	ldi	r25, 0x96	; 150
 42c:	11 c0       	rjmp	.+34     	; 0x450 <__floatsisf+0x6a>
 42e:	77 23       	and	r23, r23
 430:	21 f0       	breq	.+8      	; 0x43a <__floatsisf+0x54>
 432:	9e e8       	ldi	r25, 0x8E	; 142
 434:	87 2f       	mov	r24, r23
 436:	76 2f       	mov	r23, r22
 438:	05 c0       	rjmp	.+10     	; 0x444 <__floatsisf+0x5e>
 43a:	66 23       	and	r22, r22
 43c:	71 f0       	breq	.+28     	; 0x45a <__floatsisf+0x74>
 43e:	96 e8       	ldi	r25, 0x86	; 134
 440:	86 2f       	mov	r24, r22
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	2a f0       	brmi	.+10     	; 0x452 <__floatsisf+0x6c>
 448:	9a 95       	dec	r25
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	da f7       	brpl	.-10     	; 0x448 <__floatsisf+0x62>
 452:	88 0f       	add	r24, r24
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	97 f9       	bld	r25, 7
 45a:	08 95       	ret

0000045c <__fp_split3>:
 45c:	57 fd       	sbrc	r21, 7
 45e:	90 58       	subi	r25, 0x80	; 128
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	59 f0       	breq	.+22     	; 0x47c <__fp_splitA+0x10>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	71 f0       	breq	.+28     	; 0x486 <__fp_splitA+0x1a>
 46a:	47 95       	ror	r20

0000046c <__fp_splitA>:
 46c:	88 0f       	add	r24, r24
 46e:	97 fb       	bst	r25, 7
 470:	99 1f       	adc	r25, r25
 472:	61 f0       	breq	.+24     	; 0x48c <__fp_splitA+0x20>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	79 f0       	breq	.+30     	; 0x496 <__fp_splitA+0x2a>
 478:	87 95       	ror	r24
 47a:	08 95       	ret
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	55 1f       	adc	r21, r21
 484:	f2 cf       	rjmp	.-28     	; 0x46a <__fp_split3+0xe>
 486:	46 95       	lsr	r20
 488:	f1 df       	rcall	.-30     	; 0x46c <__fp_splitA>
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__fp_splitA+0x30>
 48c:	16 16       	cp	r1, r22
 48e:	17 06       	cpc	r1, r23
 490:	18 06       	cpc	r1, r24
 492:	99 1f       	adc	r25, r25
 494:	f1 cf       	rjmp	.-30     	; 0x478 <__fp_splitA+0xc>
 496:	86 95       	lsr	r24
 498:	71 05       	cpc	r23, r1
 49a:	61 05       	cpc	r22, r1
 49c:	08 94       	sec
 49e:	08 95       	ret

000004a0 <__fp_zero>:
 4a0:	e8 94       	clt

000004a2 <__fp_szero>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	66 27       	eor	r22, r22
 4a6:	77 27       	eor	r23, r23
 4a8:	cb 01       	movw	r24, r22
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret

000004ae <__mulsf3>:
 4ae:	0a d0       	rcall	.+20     	; 0x4c4 <__mulsf3x>
 4b0:	80 c0       	rjmp	.+256    	; 0x5b2 <__fp_round>
 4b2:	71 d0       	rcall	.+226    	; 0x596 <__fp_pscA>
 4b4:	28 f0       	brcs	.+10     	; 0x4c0 <__mulsf3+0x12>
 4b6:	76 d0       	rcall	.+236    	; 0x5a4 <__fp_pscB>
 4b8:	18 f0       	brcs	.+6      	; 0x4c0 <__mulsf3+0x12>
 4ba:	95 23       	and	r25, r21
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__mulsf3+0x12>
 4be:	62 c0       	rjmp	.+196    	; 0x584 <__fp_inf>
 4c0:	67 c0       	rjmp	.+206    	; 0x590 <__fp_nan>
 4c2:	ef cf       	rjmp	.-34     	; 0x4a2 <__fp_szero>

000004c4 <__mulsf3x>:
 4c4:	cb df       	rcall	.-106    	; 0x45c <__fp_split3>
 4c6:	a8 f3       	brcs	.-22     	; 0x4b2 <__mulsf3+0x4>

000004c8 <__mulsf3_pse>:
 4c8:	99 23       	and	r25, r25
 4ca:	d9 f3       	breq	.-10     	; 0x4c2 <__mulsf3+0x14>
 4cc:	55 23       	and	r21, r21
 4ce:	c9 f3       	breq	.-14     	; 0x4c2 <__mulsf3+0x14>
 4d0:	95 0f       	add	r25, r21
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	55 1f       	adc	r21, r21
 4d6:	aa 27       	eor	r26, r26
 4d8:	ee 27       	eor	r30, r30
 4da:	ff 27       	eor	r31, r31
 4dc:	bb 27       	eor	r27, r27
 4de:	00 24       	eor	r0, r0
 4e0:	08 94       	sec
 4e2:	67 95       	ror	r22
 4e4:	20 f4       	brcc	.+8      	; 0x4ee <__mulsf3_pse+0x26>
 4e6:	e2 0f       	add	r30, r18
 4e8:	f3 1f       	adc	r31, r19
 4ea:	b4 1f       	adc	r27, r20
 4ec:	0a 1e       	adc	r0, r26
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	44 1f       	adc	r20, r20
 4f4:	aa 1f       	adc	r26, r26
 4f6:	66 95       	lsr	r22
 4f8:	a9 f7       	brne	.-22     	; 0x4e4 <__mulsf3_pse+0x1c>
 4fa:	77 95       	ror	r23
 4fc:	30 f4       	brcc	.+12     	; 0x50a <__mulsf3_pse+0x42>
 4fe:	f3 0f       	add	r31, r19
 500:	b4 1f       	adc	r27, r20
 502:	0a 1e       	adc	r0, r26
 504:	12 1e       	adc	r1, r18
 506:	08 f4       	brcc	.+2      	; 0x50a <__mulsf3_pse+0x42>
 508:	63 95       	inc	r22
 50a:	33 0f       	add	r19, r19
 50c:	44 1f       	adc	r20, r20
 50e:	aa 1f       	adc	r26, r26
 510:	22 1f       	adc	r18, r18
 512:	76 95       	lsr	r23
 514:	99 f7       	brne	.-26     	; 0x4fc <__mulsf3_pse+0x34>
 516:	87 95       	ror	r24
 518:	20 f4       	brcc	.+8      	; 0x522 <__mulsf3_pse+0x5a>
 51a:	b4 0f       	add	r27, r20
 51c:	0a 1e       	adc	r0, r26
 51e:	12 1e       	adc	r1, r18
 520:	63 1f       	adc	r22, r19
 522:	44 0f       	add	r20, r20
 524:	aa 1f       	adc	r26, r26
 526:	22 1f       	adc	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	86 95       	lsr	r24
 52c:	a9 f7       	brne	.-22     	; 0x518 <__mulsf3_pse+0x50>
 52e:	86 2f       	mov	r24, r22
 530:	71 2d       	mov	r23, r1
 532:	60 2d       	mov	r22, r0
 534:	11 24       	eor	r1, r1
 536:	9f 57       	subi	r25, 0x7F	; 127
 538:	50 40       	sbci	r21, 0x00	; 0
 53a:	8a f0       	brmi	.+34     	; 0x55e <__mulsf3_pse+0x96>
 53c:	e1 f0       	breq	.+56     	; 0x576 <__mulsf3_pse+0xae>
 53e:	88 23       	and	r24, r24
 540:	4a f0       	brmi	.+18     	; 0x554 <__mulsf3_pse+0x8c>
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	bb 1f       	adc	r27, r27
 548:	66 1f       	adc	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	50 40       	sbci	r21, 0x00	; 0
 552:	a9 f7       	brne	.-22     	; 0x53e <__mulsf3_pse+0x76>
 554:	9e 3f       	cpi	r25, 0xFE	; 254
 556:	51 05       	cpc	r21, r1
 558:	70 f0       	brcs	.+28     	; 0x576 <__mulsf3_pse+0xae>
 55a:	14 c0       	rjmp	.+40     	; 0x584 <__fp_inf>
 55c:	a2 cf       	rjmp	.-188    	; 0x4a2 <__fp_szero>
 55e:	5f 3f       	cpi	r21, 0xFF	; 255
 560:	ec f3       	brlt	.-6      	; 0x55c <__mulsf3_pse+0x94>
 562:	98 3e       	cpi	r25, 0xE8	; 232
 564:	dc f3       	brlt	.-10     	; 0x55c <__mulsf3_pse+0x94>
 566:	86 95       	lsr	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b7 95       	ror	r27
 56e:	f7 95       	ror	r31
 570:	e7 95       	ror	r30
 572:	9f 5f       	subi	r25, 0xFF	; 255
 574:	c1 f7       	brne	.-16     	; 0x566 <__mulsf3_pse+0x9e>
 576:	fe 2b       	or	r31, r30
 578:	88 0f       	add	r24, r24
 57a:	91 1d       	adc	r25, r1
 57c:	96 95       	lsr	r25
 57e:	87 95       	ror	r24
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__fp_inf>:
 584:	97 f9       	bld	r25, 7
 586:	9f 67       	ori	r25, 0x7F	; 127
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	08 95       	ret

00000590 <__fp_nan>:
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	08 95       	ret

00000596 <__fp_pscA>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	09 06       	cpc	r0, r25
 5a2:	08 95       	ret

000005a4 <__fp_pscB>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	14 06       	cpc	r1, r20
 5ae:	05 06       	cpc	r0, r21
 5b0:	08 95       	ret

000005b2 <__fp_round>:
 5b2:	09 2e       	mov	r0, r25
 5b4:	03 94       	inc	r0
 5b6:	00 0c       	add	r0, r0
 5b8:	11 f4       	brne	.+4      	; 0x5be <__fp_round+0xc>
 5ba:	88 23       	and	r24, r24
 5bc:	52 f0       	brmi	.+20     	; 0x5d2 <__fp_round+0x20>
 5be:	bb 0f       	add	r27, r27
 5c0:	40 f4       	brcc	.+16     	; 0x5d2 <__fp_round+0x20>
 5c2:	bf 2b       	or	r27, r31
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__fp_round+0x18>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__fp_round+0x20>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__udivmodsi4>:
 5d4:	a1 e2       	ldi	r26, 0x21	; 33
 5d6:	1a 2e       	mov	r1, r26
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	fd 01       	movw	r30, r26
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <__udivmodsi4_ep>

000005e0 <__udivmodsi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	ee 1f       	adc	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a2 17       	cp	r26, r18
 5ea:	b3 07       	cpc	r27, r19
 5ec:	e4 07       	cpc	r30, r20
 5ee:	f5 07       	cpc	r31, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__udivmodsi4_ep>
 5f2:	a2 1b       	sub	r26, r18
 5f4:	b3 0b       	sbc	r27, r19
 5f6:	e4 0b       	sbc	r30, r20
 5f8:	f5 0b       	sbc	r31, r21

000005fa <__udivmodsi4_ep>:
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a 94       	dec	r1
 604:	69 f7       	brne	.-38     	; 0x5e0 <__udivmodsi4_loop>
 606:	60 95       	com	r22
 608:	70 95       	com	r23
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	bd 01       	movw	r22, r26
 614:	cf 01       	movw	r24, r30
 616:	08 95       	ret

00000618 <__divmodsi4>:
 618:	05 2e       	mov	r0, r21
 61a:	97 fb       	bst	r25, 7
 61c:	16 f4       	brtc	.+4      	; 0x622 <__divmodsi4+0xa>
 61e:	00 94       	com	r0
 620:	0f d0       	rcall	.+30     	; 0x640 <__negsi2>
 622:	57 fd       	sbrc	r21, 7
 624:	05 d0       	rcall	.+10     	; 0x630 <__divmodsi4_neg2>
 626:	d6 df       	rcall	.-84     	; 0x5d4 <__udivmodsi4>
 628:	07 fc       	sbrc	r0, 7
 62a:	02 d0       	rcall	.+4      	; 0x630 <__divmodsi4_neg2>
 62c:	46 f4       	brtc	.+16     	; 0x63e <__divmodsi4_exit>
 62e:	08 c0       	rjmp	.+16     	; 0x640 <__negsi2>

00000630 <__divmodsi4_neg2>:
 630:	50 95       	com	r21
 632:	40 95       	com	r20
 634:	30 95       	com	r19
 636:	21 95       	neg	r18
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	4f 4f       	sbci	r20, 0xFF	; 255
 63c:	5f 4f       	sbci	r21, 0xFF	; 255

0000063e <__divmodsi4_exit>:
 63e:	08 95       	ret

00000640 <__negsi2>:
 640:	90 95       	com	r25
 642:	80 95       	com	r24
 644:	70 95       	com	r23
 646:	61 95       	neg	r22
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
