
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000076e  2**0
                  ALLOC
  3 .stab         00002c34  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001307  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a6 36       	cpi	r26, 0x66	; 102
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	c2 d0       	rcall	.+388    	; 0x1c4 <main>
  40:	4a c3       	rjmp	.+1684   	; 0x6d6 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_2>:
uint16_t getAverage(uint16_t * arr, uint8_t size);
void initMotorDriverIO(void);
void initTimer0PWM(void);
void initPCInterrupts(void);

ISR(PCINT0_vect) {
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	9f 93       	push	r25
  52:	af 93       	push	r26
  54:	bf 93       	push	r27
  uint8_t LSB;
  
  
  
  //find state of encoder a
  if(bit_is_set(ENCODER_PIN,ENCODER_A)){
  56:	89 b3       	in	r24, 0x19	; 25
  }else{
    MSB=0;
  }
  
  //find state of encoder b
  if(bit_is_set(ENCODER_PIN,ENCODER_B)){
  58:	99 b3       	in	r25, 0x19	; 25
  }else{
    LSB=0;
  }
  
  //this instance pair
  pinpair = (MSB << 1) | LSB;
  5a:	82 70       	andi	r24, 0x02	; 2
  }else{
    MSB=0;
  }
  
  //find state of encoder b
  if(bit_is_set(ENCODER_PIN,ENCODER_B)){
  5c:	92 fb       	bst	r25, 2
  5e:	99 27       	eor	r25, r25
  60:	90 f9       	bld	r25, 0
  }else{
    LSB=0;
  }
  
  //this instance pair
  pinpair = (MSB << 1) | LSB;
  62:	89 2b       	or	r24, r25
  64:	80 93 60 00 	sts	0x0060, r24
  
  seqstore = seqstore << 2; //shift the next sequence step
  68:	80 91 61 00 	lds	r24, 0x0061
  6c:	88 0f       	add	r24, r24
  6e:	88 0f       	add	r24, r24
  70:	80 93 61 00 	sts	0x0061, r24
  seqstore |= pinpair;
  74:	90 91 61 00 	lds	r25, 0x0061
  78:	80 91 60 00 	lds	r24, 0x0060
  7c:	89 2b       	or	r24, r25
  7e:	80 93 61 00 	sts	0x0061, r24
  
  if (seqstore == 0b10000111){
  82:	80 91 61 00 	lds	r24, 0x0061
  86:	87 38       	cpi	r24, 0x87	; 135
  88:	99 f4       	brne	.+38     	; 0xb0 <__vector_2+0x6c>
     encoderValue++; //this is the seq ccw: (11) 10 00 01 11
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	90 91 63 00 	lds	r25, 0x0063
  92:	a0 91 64 00 	lds	r26, 0x0064
  96:	b0 91 65 00 	lds	r27, 0x0065
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	a1 1d       	adc	r26, r1
  9e:	b1 1d       	adc	r27, r1
  a0:	80 93 62 00 	sts	0x0062, r24
  a4:	90 93 63 00 	sts	0x0063, r25
  a8:	a0 93 64 00 	sts	0x0064, r26
  ac:	b0 93 65 00 	sts	0x0065, r27
  }
  if (seqstore == 0b01001011){
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	8b 34       	cpi	r24, 0x4B	; 75
  b6:	99 f4       	brne	.+38     	; 0xde <__vector_2+0x9a>
     encoderValue--; //this is the seq cw:  (11) 01 00 10 11
  b8:	80 91 62 00 	lds	r24, 0x0062
  bc:	90 91 63 00 	lds	r25, 0x0063
  c0:	a0 91 64 00 	lds	r26, 0x0064
  c4:	b0 91 65 00 	lds	r27, 0x0065
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	a1 09       	sbc	r26, r1
  cc:	b1 09       	sbc	r27, r1
  ce:	80 93 62 00 	sts	0x0062, r24
  d2:	90 93 63 00 	sts	0x0063, r25
  d6:	a0 93 64 00 	sts	0x0064, r26
  da:	b0 93 65 00 	sts	0x0065, r27
  }
  
  return;
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <initADC>:
 
}

void initADC(void) {
  // reference voltage on VCC, do nothing
  ADCSRA |= (1 << ADPS0) | (1 << ADPS2);    // ADC clock prescaler /32
  f0:	86 b1       	in	r24, 0x06	; 6
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	86 b9       	out	0x06, r24	; 6
  ADCSRA |= (1 << ADEN);               			// enable ADC
  f6:	37 9a       	sbi	0x06, 7	; 6
  f8:	08 95       	ret

000000fa <readADC>:
}

uint16_t readADC(uint8_t channel) {
  
  //read ADC value from channel (ADC0 to ADC 5)
  ADMUX = (0b11000000 & ADMUX) | channel;
  fa:	97 b1       	in	r25, 0x07	; 7
  fc:	90 7c       	andi	r25, 0xC0	; 192
  fe:	98 2b       	or	r25, r24
 100:	97 b9       	out	0x07, r25	; 7
  ADCSRA |= (1 << ADSC);
 102:	36 9a       	sbi	0x06, 6	; 6
  loop_until_bit_is_clear(ADCSRA, ADSC);
 104:	36 99       	sbic	0x06, 6	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <readADC+0xa>
  return (ADC);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
}
 10c:	08 95       	ret

0000010e <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	26 17       	cp	r18, r22
 112:	31 f0       	breq	.+12     	; 0x120 <initValues+0x12>
     *arr = value;
 114:	fc 01       	movw	r30, r24
 116:	41 93       	st	Z+, r20
 118:	51 93       	st	Z+, r21
 11a:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	f8 cf       	rjmp	.-16     	; 0x110 <initValues+0x2>
     *arr = value;
     arr++;
  }
}
 120:	08 95       	ret

00000122 <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	eb 01       	movw	r28, r22
 12a:	c1 50       	subi	r28, 0x01	; 1
 12c:	d0 48       	sbci	r29, 0x80	; 128
 12e:	cc 0f       	add	r28, r28
 130:	dd 1f       	adc	r29, r29
 132:	c8 0f       	add	r28, r24
 134:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	61 50       	subi	r22, 0x01	; 1
 13a:	71 09       	sbc	r23, r1
 13c:	29 2f       	mov	r18, r25
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	26 17       	cp	r18, r22
 142:	37 07       	cpc	r19, r23
 144:	44 f4       	brge	.+16     	; 0x156 <storeNewADC+0x34>
 146:	fe 01       	movw	r30, r28
    *arr = *(arr-1);
 148:	32 91       	ld	r19, -Z
 14a:	22 91       	ld	r18, -Z
 14c:	39 83       	std	Y+1, r19	; 0x01
 14e:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 150:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
 152:	ef 01       	movw	r28, r30
 154:	f3 cf       	rjmp	.-26     	; 0x13c <storeNewADC+0x1a>
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 156:	84 2f       	mov	r24, r20
 158:	d0 df       	rcall	.-96     	; 0xfa <readADC>
 15a:	99 83       	std	Y+1, r25	; 0x01
 15c:	88 83       	st	Y, r24
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 164:	fc 01       	movw	r30, r24
 166:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	23 17       	cp	r18, r19
 172:	41 f0       	breq	.+16     	; 0x184 <getAverage+0x20>
    sum = sum + *arr;
 174:	41 91       	ld	r20, Z+
 176:	51 91       	ld	r21, Z+
 178:	64 0f       	add	r22, r20
 17a:	75 1f       	adc	r23, r21
 17c:	81 1d       	adc	r24, r1
 17e:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	f6 cf       	rjmp	.-20     	; 0x170 <getAverage+0xc>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	83 d2       	rcall	.+1286   	; 0x692 <__udivmodsi4>
  return avg;
}
 18c:	c9 01       	movw	r24, r18
 18e:	08 95       	ret

00000190 <initTimer0PWM>:

void initTimer0PWM(void){
  
  //fast pwm clear on match
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 190:	80 b7       	in	r24, 0x30	; 48
 192:	83 60       	ori	r24, 0x03	; 3
 194:	80 bf       	out	0x30, r24	; 48
  TCCR0A |= (1<<COM0A1);
 196:	80 b7       	in	r24, 0x30	; 48
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 bf       	out	0x30, r24	; 48
  //no clock scale
  TCCR0B |= (1<<CS00);
 19c:	83 b7       	in	r24, 0x33	; 51
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	83 bf       	out	0x33, r24	; 51
  //setup for output
  DRIVER_DDR |= (1<<DRIVER_PWM);
 1a2:	ba 9a       	sbi	0x17, 2	; 23
 1a4:	08 95       	ret

000001a6 <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  
  //set for output
  DRIVER_DDR |= (1<<DRIVER_A);
 1a6:	b9 9a       	sbi	0x17, 1	; 23
  DRIVER_DDR |= (1<<DRIVER_B);
 1a8:	b8 9a       	sbi	0x17, 0	; 23
  //init to zero
  DRIVER_PORT &= ~(1<<DRIVER_A);
 1aa:	c1 98       	cbi	0x18, 1	; 24
  DRIVER_PORT &= ~(1<<DRIVER_B);
 1ac:	c0 98       	cbi	0x18, 0	; 24
 1ae:	08 95       	ret

000001b0 <initPCInterrupts>:
}

void initPCInterrupts(void){
  
  //set pins for input
  ENCODER_DDR &= ~(1<<ENCODER_A);
 1b0:	d1 98       	cbi	0x1a, 1	; 26
  ENCODER_DDR &= ~(1<<ENCODER_B);
 1b2:	d2 98       	cbi	0x1a, 2	; 26
  
  //enable PCINT0_vect
  GIMSK |= (1<<PCIE0);
 1b4:	8b b7       	in	r24, 0x3b	; 59
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	8b bf       	out	0x3b, r24	; 59
  //enable PCINT on PCINT1 and PCINT2
  PCMSK0 |= (1 << PCINT1) | (1<< PCINT2);
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	82 bb       	out	0x12, r24	; 18
  //enable global interrupts
  sei();
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <main>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	c0 54       	subi	r28, 0x40	; 64
 1ce:	d1 09       	sbc	r29, r1
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
 1da:	8a df       	rcall	.-236    	; 0xf0 <initADC>
 1dc:	e4 df       	rcall	.-56     	; 0x1a6 <initMotorDriverIO>
 1de:	d8 df       	rcall	.-80     	; 0x190 <initTimer0PWM>
 1e0:	e7 df       	rcall	.-50     	; 0x1b0 <initPCInterrupts>
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e2       	ldi	r22, 0x20	; 32
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 df       	rcall	.-224    	; 0x10e <initValues>
 1ee:	1f ef       	ldi	r17, 0xFF	; 255
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e2       	ldi	r22, 0x20	; 32
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	94 df       	rcall	.-216    	; 0x122 <storeNewADC>
 1fa:	60 e2       	ldi	r22, 0x20	; 32
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	b1 df       	rcall	.-158    	; 0x164 <getAverage>
 202:	f8 94       	cli
 204:	c0 90 62 00 	lds	r12, 0x0062
 208:	d0 90 63 00 	lds	r13, 0x0063
 20c:	e0 90 64 00 	lds	r14, 0x0064
 210:	f0 90 65 00 	lds	r15, 0x0065
 214:	78 94       	sei
 216:	bc 01       	movw	r22, r24
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	19 d1       	rcall	.+562    	; 0x450 <__floatunsisf>
 21e:	2b e1       	ldi	r18, 0x1B	; 27
 220:	34 e1       	ldi	r19, 0x14	; 20
 222:	4b ef       	ldi	r20, 0xFB	; 251
 224:	51 e4       	ldi	r21, 0x41	; 65
 226:	ca d1       	rcall	.+916    	; 0x5bc <__mulsf3>
 228:	e2 d0       	rcall	.+452    	; 0x3ee <__fixsfsi>
 22a:	6c 19       	sub	r22, r12
 22c:	7d 09       	sbc	r23, r13
 22e:	8e 09       	sbc	r24, r14
 230:	9f 09       	sbc	r25, r15
 232:	10 d1       	rcall	.+544    	; 0x454 <__floatsisf>
 234:	6b 01       	movw	r12, r22
 236:	7c 01       	movw	r14, r24
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e8       	ldi	r19, 0x80	; 128
 23c:	4b e3       	ldi	r20, 0x3B	; 59
 23e:	54 e4       	ldi	r21, 0x44	; 68
 240:	b9 d1       	rcall	.+882    	; 0x5b4 <__gesf2>
 242:	18 16       	cp	r1, r24
 244:	14 f4       	brge	.+4      	; 0x24a <main+0x86>
 246:	16 bf       	out	0x36, r17	; 54
 248:	20 c0       	rjmp	.+64     	; 0x28a <__stack+0x2b>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e8       	ldi	r19, 0x80	; 128
 24e:	4b e3       	ldi	r20, 0x3B	; 59
 250:	54 e4       	ldi	r21, 0x44	; 68
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	5f d0       	rcall	.+190    	; 0x316 <__cmpsf2>
 258:	18 16       	cp	r1, r24
 25a:	d4 f0       	brlt	.+52     	; 0x290 <__stack+0x31>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	48 e4       	ldi	r20, 0x48	; 72
 262:	52 e4       	ldi	r21, 0x42	; 66
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	a5 d1       	rcall	.+842    	; 0x5b4 <__gesf2>
 26a:	18 16       	cp	r1, r24
 26c:	8c f4       	brge	.+34     	; 0x290 <__stack+0x31>
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e8       	ldi	r19, 0x80	; 128
 272:	4b e3       	ldi	r20, 0x3B	; 59
 274:	54 e4       	ldi	r21, 0x44	; 68
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	51 d0       	rcall	.+162    	; 0x31e <__divsf3>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	4f e7       	ldi	r20, 0x7F	; 127
 282:	53 e4       	ldi	r21, 0x43	; 67
 284:	9b d1       	rcall	.+822    	; 0x5bc <__mulsf3>
 286:	b8 d0       	rcall	.+368    	; 0x3f8 <__fixunssfsi>
 288:	66 bf       	out	0x36, r22	; 54
 28a:	c1 9a       	sbi	0x18, 1	; 24
 28c:	c0 98       	cbi	0x18, 0	; 24
 28e:	b0 cf       	rjmp	.-160    	; 0x1f0 <main+0x2c>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	48 e4       	ldi	r20, 0x48	; 72
 296:	52 e4       	ldi	r21, 0x42	; 66
 298:	c7 01       	movw	r24, r14
 29a:	b6 01       	movw	r22, r12
 29c:	3c d0       	rcall	.+120    	; 0x316 <__cmpsf2>
 29e:	18 16       	cp	r1, r24
 2a0:	5c f0       	brlt	.+22     	; 0x2b8 <__stack+0x59>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	48 e4       	ldi	r20, 0x48	; 72
 2a8:	52 ec       	ldi	r21, 0xC2	; 194
 2aa:	c7 01       	movw	r24, r14
 2ac:	b6 01       	movw	r22, r12
 2ae:	82 d1       	rcall	.+772    	; 0x5b4 <__gesf2>
 2b0:	87 fd       	sbrc	r24, 7
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__stack+0x59>
 2b4:	16 be       	out	0x36, r1	; 54
 2b6:	e9 cf       	rjmp	.-46     	; 0x28a <__stack+0x2b>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	48 e4       	ldi	r20, 0x48	; 72
 2be:	52 ec       	ldi	r21, 0xC2	; 194
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	28 d0       	rcall	.+80     	; 0x316 <__cmpsf2>
 2c6:	87 ff       	sbrs	r24, 7
 2c8:	19 c0       	rjmp	.+50     	; 0x2fc <__stack+0x9d>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e8       	ldi	r19, 0x80	; 128
 2ce:	4b e3       	ldi	r20, 0x3B	; 59
 2d0:	54 ec       	ldi	r21, 0xC4	; 196
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	6e d1       	rcall	.+732    	; 0x5b4 <__gesf2>
 2d8:	87 fd       	sbrc	r24, 7
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <__stack+0x9d>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e8       	ldi	r19, 0x80	; 128
 2e0:	4b e3       	ldi	r20, 0x3B	; 59
 2e2:	54 e4       	ldi	r21, 0x44	; 68
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	1a d0       	rcall	.+52     	; 0x31e <__divsf3>
 2ea:	90 58       	subi	r25, 0x80	; 128
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4f e7       	ldi	r20, 0x7F	; 127
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	63 d1       	rcall	.+710    	; 0x5bc <__mulsf3>
 2f6:	80 d0       	rcall	.+256    	; 0x3f8 <__fixunssfsi>
 2f8:	66 bf       	out	0x36, r22	; 54
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <__stack+0xb1>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e8       	ldi	r19, 0x80	; 128
 300:	4b e3       	ldi	r20, 0x3B	; 59
 302:	54 ec       	ldi	r21, 0xC4	; 196
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	06 d0       	rcall	.+12     	; 0x316 <__cmpsf2>
 30a:	87 ff       	sbrs	r24, 7
 30c:	71 cf       	rjmp	.-286    	; 0x1f0 <main+0x2c>
 30e:	16 bf       	out	0x36, r17	; 54
 310:	c1 98       	cbi	0x18, 1	; 24
 312:	c0 9a       	sbi	0x18, 0	; 24
 314:	6d cf       	rjmp	.-294    	; 0x1f0 <main+0x2c>

00000316 <__cmpsf2>:
 316:	d9 d0       	rcall	.+434    	; 0x4ca <__fp_cmp>
 318:	08 f4       	brcc	.+2      	; 0x31c <__cmpsf2+0x6>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret

0000031e <__divsf3>:
 31e:	0c d0       	rcall	.+24     	; 0x338 <__divsf3x>
 320:	0f c1       	rjmp	.+542    	; 0x540 <__fp_round>
 322:	07 d1       	rcall	.+526    	; 0x532 <__fp_pscB>
 324:	40 f0       	brcs	.+16     	; 0x336 <__divsf3+0x18>
 326:	fe d0       	rcall	.+508    	; 0x524 <__fp_pscA>
 328:	30 f0       	brcs	.+12     	; 0x336 <__divsf3+0x18>
 32a:	21 f4       	brne	.+8      	; 0x334 <__divsf3+0x16>
 32c:	5f 3f       	cpi	r21, 0xFF	; 255
 32e:	19 f0       	breq	.+6      	; 0x336 <__divsf3+0x18>
 330:	f0 c0       	rjmp	.+480    	; 0x512 <__fp_inf>
 332:	51 11       	cpse	r21, r1
 334:	39 c1       	rjmp	.+626    	; 0x5a8 <__fp_szero>
 336:	f3 c0       	rjmp	.+486    	; 0x51e <__fp_nan>

00000338 <__divsf3x>:
 338:	14 d1       	rcall	.+552    	; 0x562 <__fp_split3>
 33a:	98 f3       	brcs	.-26     	; 0x322 <__divsf3+0x4>

0000033c <__divsf3_pse>:
 33c:	99 23       	and	r25, r25
 33e:	c9 f3       	breq	.-14     	; 0x332 <__divsf3+0x14>
 340:	55 23       	and	r21, r21
 342:	b1 f3       	breq	.-20     	; 0x330 <__divsf3+0x12>
 344:	95 1b       	sub	r25, r21
 346:	55 0b       	sbc	r21, r21
 348:	bb 27       	eor	r27, r27
 34a:	aa 27       	eor	r26, r26
 34c:	62 17       	cp	r22, r18
 34e:	73 07       	cpc	r23, r19
 350:	84 07       	cpc	r24, r20
 352:	38 f0       	brcs	.+14     	; 0x362 <__divsf3_pse+0x26>
 354:	9f 5f       	subi	r25, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	44 1f       	adc	r20, r20
 35e:	aa 1f       	adc	r26, r26
 360:	a9 f3       	breq	.-22     	; 0x34c <__divsf3_pse+0x10>
 362:	33 d0       	rcall	.+102    	; 0x3ca <__divsf3_pse+0x8e>
 364:	0e 2e       	mov	r0, r30
 366:	3a f0       	brmi	.+14     	; 0x376 <__divsf3_pse+0x3a>
 368:	e0 e8       	ldi	r30, 0x80	; 128
 36a:	30 d0       	rcall	.+96     	; 0x3cc <__divsf3_pse+0x90>
 36c:	91 50       	subi	r25, 0x01	; 1
 36e:	50 40       	sbci	r21, 0x00	; 0
 370:	e6 95       	lsr	r30
 372:	00 1c       	adc	r0, r0
 374:	ca f7       	brpl	.-14     	; 0x368 <__divsf3_pse+0x2c>
 376:	29 d0       	rcall	.+82     	; 0x3ca <__divsf3_pse+0x8e>
 378:	fe 2f       	mov	r31, r30
 37a:	27 d0       	rcall	.+78     	; 0x3ca <__divsf3_pse+0x8e>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	bb 1f       	adc	r27, r27
 384:	26 17       	cp	r18, r22
 386:	37 07       	cpc	r19, r23
 388:	48 07       	cpc	r20, r24
 38a:	ab 07       	cpc	r26, r27
 38c:	b0 e8       	ldi	r27, 0x80	; 128
 38e:	09 f0       	breq	.+2      	; 0x392 <__divsf3_pse+0x56>
 390:	bb 0b       	sbc	r27, r27
 392:	80 2d       	mov	r24, r0
 394:	bf 01       	movw	r22, r30
 396:	ff 27       	eor	r31, r31
 398:	93 58       	subi	r25, 0x83	; 131
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	2a f0       	brmi	.+10     	; 0x3a8 <__divsf3_pse+0x6c>
 39e:	9e 3f       	cpi	r25, 0xFE	; 254
 3a0:	51 05       	cpc	r21, r1
 3a2:	68 f0       	brcs	.+26     	; 0x3be <__divsf3_pse+0x82>
 3a4:	b6 c0       	rjmp	.+364    	; 0x512 <__fp_inf>
 3a6:	00 c1       	rjmp	.+512    	; 0x5a8 <__fp_szero>
 3a8:	5f 3f       	cpi	r21, 0xFF	; 255
 3aa:	ec f3       	brlt	.-6      	; 0x3a6 <__divsf3_pse+0x6a>
 3ac:	98 3e       	cpi	r25, 0xE8	; 232
 3ae:	dc f3       	brlt	.-10     	; 0x3a6 <__divsf3_pse+0x6a>
 3b0:	86 95       	lsr	r24
 3b2:	77 95       	ror	r23
 3b4:	67 95       	ror	r22
 3b6:	b7 95       	ror	r27
 3b8:	f7 95       	ror	r31
 3ba:	9f 5f       	subi	r25, 0xFF	; 255
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <__divsf3_pse+0x74>
 3be:	88 0f       	add	r24, r24
 3c0:	91 1d       	adc	r25, r1
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	97 f9       	bld	r25, 7
 3c8:	08 95       	ret
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	bb 1f       	adc	r27, r27
 3d4:	62 17       	cp	r22, r18
 3d6:	73 07       	cpc	r23, r19
 3d8:	84 07       	cpc	r24, r20
 3da:	ba 07       	cpc	r27, r26
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__divsf3_pse+0xaa>
 3de:	62 1b       	sub	r22, r18
 3e0:	73 0b       	sbc	r23, r19
 3e2:	84 0b       	sbc	r24, r20
 3e4:	ba 0b       	sbc	r27, r26
 3e6:	ee 1f       	adc	r30, r30
 3e8:	88 f7       	brcc	.-30     	; 0x3cc <__divsf3_pse+0x90>
 3ea:	e0 95       	com	r30
 3ec:	08 95       	ret

000003ee <__fixsfsi>:
 3ee:	04 d0       	rcall	.+8      	; 0x3f8 <__fixunssfsi>
 3f0:	68 94       	set
 3f2:	b1 11       	cpse	r27, r1
 3f4:	d9 c0       	rjmp	.+434    	; 0x5a8 <__fp_szero>
 3f6:	08 95       	ret

000003f8 <__fixunssfsi>:
 3f8:	bc d0       	rcall	.+376    	; 0x572 <__fp_splitA>
 3fa:	88 f0       	brcs	.+34     	; 0x41e <__fixunssfsi+0x26>
 3fc:	9f 57       	subi	r25, 0x7F	; 127
 3fe:	90 f0       	brcs	.+36     	; 0x424 <__fixunssfsi+0x2c>
 400:	b9 2f       	mov	r27, r25
 402:	99 27       	eor	r25, r25
 404:	b7 51       	subi	r27, 0x17	; 23
 406:	a0 f0       	brcs	.+40     	; 0x430 <__fixunssfsi+0x38>
 408:	d1 f0       	breq	.+52     	; 0x43e <__fixunssfsi+0x46>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a f0       	brmi	.+6      	; 0x41a <__fixunssfsi+0x22>
 414:	ba 95       	dec	r27
 416:	c9 f7       	brne	.-14     	; 0x40a <__fixunssfsi+0x12>
 418:	12 c0       	rjmp	.+36     	; 0x43e <__fixunssfsi+0x46>
 41a:	b1 30       	cpi	r27, 0x01	; 1
 41c:	81 f0       	breq	.+32     	; 0x43e <__fixunssfsi+0x46>
 41e:	c3 d0       	rcall	.+390    	; 0x5a6 <__fp_zero>
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	08 95       	ret
 424:	c0 c0       	rjmp	.+384    	; 0x5a6 <__fp_zero>
 426:	67 2f       	mov	r22, r23
 428:	78 2f       	mov	r23, r24
 42a:	88 27       	eor	r24, r24
 42c:	b8 5f       	subi	r27, 0xF8	; 248
 42e:	39 f0       	breq	.+14     	; 0x43e <__fixunssfsi+0x46>
 430:	b9 3f       	cpi	r27, 0xF9	; 249
 432:	cc f3       	brlt	.-14     	; 0x426 <__fixunssfsi+0x2e>
 434:	86 95       	lsr	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b3 95       	inc	r27
 43c:	d9 f7       	brne	.-10     	; 0x434 <__fixunssfsi+0x3c>
 43e:	3e f4       	brtc	.+14     	; 0x44e <__fixunssfsi+0x56>
 440:	90 95       	com	r25
 442:	80 95       	com	r24
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8f 4f       	sbci	r24, 0xFF	; 255
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	08 95       	ret

00000450 <__floatunsisf>:
 450:	e8 94       	clt
 452:	09 c0       	rjmp	.+18     	; 0x466 <__floatsisf+0x12>

00000454 <__floatsisf>:
 454:	97 fb       	bst	r25, 7
 456:	3e f4       	brtc	.+14     	; 0x466 <__floatsisf+0x12>
 458:	90 95       	com	r25
 45a:	80 95       	com	r24
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	99 23       	and	r25, r25
 468:	a9 f0       	breq	.+42     	; 0x494 <__floatsisf+0x40>
 46a:	f9 2f       	mov	r31, r25
 46c:	96 e9       	ldi	r25, 0x96	; 150
 46e:	bb 27       	eor	r27, r27
 470:	93 95       	inc	r25
 472:	f6 95       	lsr	r31
 474:	87 95       	ror	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f1 11       	cpse	r31, r1
 47e:	f8 cf       	rjmp	.-16     	; 0x470 <__floatsisf+0x1c>
 480:	fa f4       	brpl	.+62     	; 0x4c0 <__floatsisf+0x6c>
 482:	bb 0f       	add	r27, r27
 484:	11 f4       	brne	.+4      	; 0x48a <__floatsisf+0x36>
 486:	60 ff       	sbrs	r22, 0
 488:	1b c0       	rjmp	.+54     	; 0x4c0 <__floatsisf+0x6c>
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	8f 4f       	sbci	r24, 0xFF	; 255
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	16 c0       	rjmp	.+44     	; 0x4c0 <__floatsisf+0x6c>
 494:	88 23       	and	r24, r24
 496:	11 f0       	breq	.+4      	; 0x49c <__floatsisf+0x48>
 498:	96 e9       	ldi	r25, 0x96	; 150
 49a:	11 c0       	rjmp	.+34     	; 0x4be <__floatsisf+0x6a>
 49c:	77 23       	and	r23, r23
 49e:	21 f0       	breq	.+8      	; 0x4a8 <__floatsisf+0x54>
 4a0:	9e e8       	ldi	r25, 0x8E	; 142
 4a2:	87 2f       	mov	r24, r23
 4a4:	76 2f       	mov	r23, r22
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__floatsisf+0x5e>
 4a8:	66 23       	and	r22, r22
 4aa:	71 f0       	breq	.+28     	; 0x4c8 <__floatsisf+0x74>
 4ac:	96 e8       	ldi	r25, 0x86	; 134
 4ae:	86 2f       	mov	r24, r22
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	2a f0       	brmi	.+10     	; 0x4c0 <__floatsisf+0x6c>
 4b6:	9a 95       	dec	r25
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	da f7       	brpl	.-10     	; 0x4b6 <__floatsisf+0x62>
 4c0:	88 0f       	add	r24, r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret

000004ca <__fp_cmp>:
 4ca:	99 0f       	add	r25, r25
 4cc:	00 08       	sbc	r0, r0
 4ce:	55 0f       	add	r21, r21
 4d0:	aa 0b       	sbc	r26, r26
 4d2:	e0 e8       	ldi	r30, 0x80	; 128
 4d4:	fe ef       	ldi	r31, 0xFE	; 254
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	e8 07       	cpc	r30, r24
 4dc:	f9 07       	cpc	r31, r25
 4de:	c0 f0       	brcs	.+48     	; 0x510 <__fp_cmp+0x46>
 4e0:	12 16       	cp	r1, r18
 4e2:	13 06       	cpc	r1, r19
 4e4:	e4 07       	cpc	r30, r20
 4e6:	f5 07       	cpc	r31, r21
 4e8:	98 f0       	brcs	.+38     	; 0x510 <__fp_cmp+0x46>
 4ea:	62 1b       	sub	r22, r18
 4ec:	73 0b       	sbc	r23, r19
 4ee:	84 0b       	sbc	r24, r20
 4f0:	95 0b       	sbc	r25, r21
 4f2:	39 f4       	brne	.+14     	; 0x502 <__fp_cmp+0x38>
 4f4:	0a 26       	eor	r0, r26
 4f6:	61 f0       	breq	.+24     	; 0x510 <__fp_cmp+0x46>
 4f8:	23 2b       	or	r18, r19
 4fa:	24 2b       	or	r18, r20
 4fc:	25 2b       	or	r18, r21
 4fe:	21 f4       	brne	.+8      	; 0x508 <__fp_cmp+0x3e>
 500:	08 95       	ret
 502:	0a 26       	eor	r0, r26
 504:	09 f4       	brne	.+2      	; 0x508 <__fp_cmp+0x3e>
 506:	a1 40       	sbci	r26, 0x01	; 1
 508:	a6 95       	lsr	r26
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	81 1d       	adc	r24, r1
 50e:	81 1d       	adc	r24, r1
 510:	08 95       	ret

00000512 <__fp_inf>:
 512:	97 f9       	bld	r25, 7
 514:	9f 67       	ori	r25, 0x7F	; 127
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	08 95       	ret

0000051e <__fp_nan>:
 51e:	9f ef       	ldi	r25, 0xFF	; 255
 520:	80 ec       	ldi	r24, 0xC0	; 192
 522:	08 95       	ret

00000524 <__fp_pscA>:
 524:	00 24       	eor	r0, r0
 526:	0a 94       	dec	r0
 528:	16 16       	cp	r1, r22
 52a:	17 06       	cpc	r1, r23
 52c:	18 06       	cpc	r1, r24
 52e:	09 06       	cpc	r0, r25
 530:	08 95       	ret

00000532 <__fp_pscB>:
 532:	00 24       	eor	r0, r0
 534:	0a 94       	dec	r0
 536:	12 16       	cp	r1, r18
 538:	13 06       	cpc	r1, r19
 53a:	14 06       	cpc	r1, r20
 53c:	05 06       	cpc	r0, r21
 53e:	08 95       	ret

00000540 <__fp_round>:
 540:	09 2e       	mov	r0, r25
 542:	03 94       	inc	r0
 544:	00 0c       	add	r0, r0
 546:	11 f4       	brne	.+4      	; 0x54c <__fp_round+0xc>
 548:	88 23       	and	r24, r24
 54a:	52 f0       	brmi	.+20     	; 0x560 <__fp_round+0x20>
 54c:	bb 0f       	add	r27, r27
 54e:	40 f4       	brcc	.+16     	; 0x560 <__fp_round+0x20>
 550:	bf 2b       	or	r27, r31
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0x18>
 554:	60 ff       	sbrs	r22, 0
 556:	04 c0       	rjmp	.+8      	; 0x560 <__fp_round+0x20>
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__fp_split3>:
 562:	57 fd       	sbrc	r21, 7
 564:	90 58       	subi	r25, 0x80	; 128
 566:	44 0f       	add	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	59 f0       	breq	.+22     	; 0x582 <__fp_splitA+0x10>
 56c:	5f 3f       	cpi	r21, 0xFF	; 255
 56e:	71 f0       	breq	.+28     	; 0x58c <__fp_splitA+0x1a>
 570:	47 95       	ror	r20

00000572 <__fp_splitA>:
 572:	88 0f       	add	r24, r24
 574:	97 fb       	bst	r25, 7
 576:	99 1f       	adc	r25, r25
 578:	61 f0       	breq	.+24     	; 0x592 <__fp_splitA+0x20>
 57a:	9f 3f       	cpi	r25, 0xFF	; 255
 57c:	79 f0       	breq	.+30     	; 0x59c <__fp_splitA+0x2a>
 57e:	87 95       	ror	r24
 580:	08 95       	ret
 582:	12 16       	cp	r1, r18
 584:	13 06       	cpc	r1, r19
 586:	14 06       	cpc	r1, r20
 588:	55 1f       	adc	r21, r21
 58a:	f2 cf       	rjmp	.-28     	; 0x570 <__fp_split3+0xe>
 58c:	46 95       	lsr	r20
 58e:	f1 df       	rcall	.-30     	; 0x572 <__fp_splitA>
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <__fp_splitA+0x30>
 592:	16 16       	cp	r1, r22
 594:	17 06       	cpc	r1, r23
 596:	18 06       	cpc	r1, r24
 598:	99 1f       	adc	r25, r25
 59a:	f1 cf       	rjmp	.-30     	; 0x57e <__fp_splitA+0xc>
 59c:	86 95       	lsr	r24
 59e:	71 05       	cpc	r23, r1
 5a0:	61 05       	cpc	r22, r1
 5a2:	08 94       	sec
 5a4:	08 95       	ret

000005a6 <__fp_zero>:
 5a6:	e8 94       	clt

000005a8 <__fp_szero>:
 5a8:	bb 27       	eor	r27, r27
 5aa:	66 27       	eor	r22, r22
 5ac:	77 27       	eor	r23, r23
 5ae:	cb 01       	movw	r24, r22
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <__gesf2>:
 5b4:	8a df       	rcall	.-236    	; 0x4ca <__fp_cmp>
 5b6:	08 f4       	brcc	.+2      	; 0x5ba <__gesf2+0x6>
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__mulsf3>:
 5bc:	0a d0       	rcall	.+20     	; 0x5d2 <__mulsf3x>
 5be:	c0 cf       	rjmp	.-128    	; 0x540 <__fp_round>
 5c0:	b1 df       	rcall	.-158    	; 0x524 <__fp_pscA>
 5c2:	28 f0       	brcs	.+10     	; 0x5ce <__mulsf3+0x12>
 5c4:	b6 df       	rcall	.-148    	; 0x532 <__fp_pscB>
 5c6:	18 f0       	brcs	.+6      	; 0x5ce <__mulsf3+0x12>
 5c8:	95 23       	and	r25, r21
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__mulsf3+0x12>
 5cc:	a2 cf       	rjmp	.-188    	; 0x512 <__fp_inf>
 5ce:	a7 cf       	rjmp	.-178    	; 0x51e <__fp_nan>
 5d0:	eb cf       	rjmp	.-42     	; 0x5a8 <__fp_szero>

000005d2 <__mulsf3x>:
 5d2:	c7 df       	rcall	.-114    	; 0x562 <__fp_split3>
 5d4:	a8 f3       	brcs	.-22     	; 0x5c0 <__mulsf3+0x4>

000005d6 <__mulsf3_pse>:
 5d6:	99 23       	and	r25, r25
 5d8:	d9 f3       	breq	.-10     	; 0x5d0 <__mulsf3+0x14>
 5da:	55 23       	and	r21, r21
 5dc:	c9 f3       	breq	.-14     	; 0x5d0 <__mulsf3+0x14>
 5de:	95 0f       	add	r25, r21
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	55 1f       	adc	r21, r21
 5e4:	aa 27       	eor	r26, r26
 5e6:	ee 27       	eor	r30, r30
 5e8:	ff 27       	eor	r31, r31
 5ea:	bb 27       	eor	r27, r27
 5ec:	00 24       	eor	r0, r0
 5ee:	08 94       	sec
 5f0:	67 95       	ror	r22
 5f2:	20 f4       	brcc	.+8      	; 0x5fc <__mulsf3_pse+0x26>
 5f4:	e2 0f       	add	r30, r18
 5f6:	f3 1f       	adc	r31, r19
 5f8:	b4 1f       	adc	r27, r20
 5fa:	0a 1e       	adc	r0, r26
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	44 1f       	adc	r20, r20
 602:	aa 1f       	adc	r26, r26
 604:	66 95       	lsr	r22
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__mulsf3_pse+0x1c>
 608:	77 95       	ror	r23
 60a:	30 f4       	brcc	.+12     	; 0x618 <__mulsf3_pse+0x42>
 60c:	f3 0f       	add	r31, r19
 60e:	b4 1f       	adc	r27, r20
 610:	0a 1e       	adc	r0, r26
 612:	12 1e       	adc	r1, r18
 614:	08 f4       	brcc	.+2      	; 0x618 <__mulsf3_pse+0x42>
 616:	63 95       	inc	r22
 618:	33 0f       	add	r19, r19
 61a:	44 1f       	adc	r20, r20
 61c:	aa 1f       	adc	r26, r26
 61e:	22 1f       	adc	r18, r18
 620:	76 95       	lsr	r23
 622:	99 f7       	brne	.-26     	; 0x60a <__mulsf3_pse+0x34>
 624:	87 95       	ror	r24
 626:	20 f4       	brcc	.+8      	; 0x630 <__mulsf3_pse+0x5a>
 628:	b4 0f       	add	r27, r20
 62a:	0a 1e       	adc	r0, r26
 62c:	12 1e       	adc	r1, r18
 62e:	63 1f       	adc	r22, r19
 630:	44 0f       	add	r20, r20
 632:	aa 1f       	adc	r26, r26
 634:	22 1f       	adc	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	86 95       	lsr	r24
 63a:	a9 f7       	brne	.-22     	; 0x626 <__mulsf3_pse+0x50>
 63c:	86 2f       	mov	r24, r22
 63e:	71 2d       	mov	r23, r1
 640:	60 2d       	mov	r22, r0
 642:	11 24       	eor	r1, r1
 644:	9f 57       	subi	r25, 0x7F	; 127
 646:	50 40       	sbci	r21, 0x00	; 0
 648:	8a f0       	brmi	.+34     	; 0x66c <__mulsf3_pse+0x96>
 64a:	e1 f0       	breq	.+56     	; 0x684 <__mulsf3_pse+0xae>
 64c:	88 23       	and	r24, r24
 64e:	4a f0       	brmi	.+18     	; 0x662 <__mulsf3_pse+0x8c>
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	bb 1f       	adc	r27, r27
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	a9 f7       	brne	.-22     	; 0x64c <__mulsf3_pse+0x76>
 662:	9e 3f       	cpi	r25, 0xFE	; 254
 664:	51 05       	cpc	r21, r1
 666:	70 f0       	brcs	.+28     	; 0x684 <__mulsf3_pse+0xae>
 668:	54 cf       	rjmp	.-344    	; 0x512 <__fp_inf>
 66a:	9e cf       	rjmp	.-196    	; 0x5a8 <__fp_szero>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	ec f3       	brlt	.-6      	; 0x66a <__mulsf3_pse+0x94>
 670:	98 3e       	cpi	r25, 0xE8	; 232
 672:	dc f3       	brlt	.-10     	; 0x66a <__mulsf3_pse+0x94>
 674:	86 95       	lsr	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	f7 95       	ror	r31
 67e:	e7 95       	ror	r30
 680:	9f 5f       	subi	r25, 0xFF	; 255
 682:	c1 f7       	brne	.-16     	; 0x674 <__mulsf3_pse+0x9e>
 684:	fe 2b       	or	r31, r30
 686:	88 0f       	add	r24, r24
 688:	91 1d       	adc	r25, r1
 68a:	96 95       	lsr	r25
 68c:	87 95       	ror	r24
 68e:	97 f9       	bld	r25, 7
 690:	08 95       	ret

00000692 <__udivmodsi4>:
 692:	a1 e2       	ldi	r26, 0x21	; 33
 694:	1a 2e       	mov	r1, r26
 696:	aa 1b       	sub	r26, r26
 698:	bb 1b       	sub	r27, r27
 69a:	fd 01       	movw	r30, r26
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <__udivmodsi4_ep>

0000069e <__udivmodsi4_loop>:
 69e:	aa 1f       	adc	r26, r26
 6a0:	bb 1f       	adc	r27, r27
 6a2:	ee 1f       	adc	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	a2 17       	cp	r26, r18
 6a8:	b3 07       	cpc	r27, r19
 6aa:	e4 07       	cpc	r30, r20
 6ac:	f5 07       	cpc	r31, r21
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <__udivmodsi4_ep>
 6b0:	a2 1b       	sub	r26, r18
 6b2:	b3 0b       	sbc	r27, r19
 6b4:	e4 0b       	sbc	r30, r20
 6b6:	f5 0b       	sbc	r31, r21

000006b8 <__udivmodsi4_ep>:
 6b8:	66 1f       	adc	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	1a 94       	dec	r1
 6c2:	69 f7       	brne	.-38     	; 0x69e <__udivmodsi4_loop>
 6c4:	60 95       	com	r22
 6c6:	70 95       	com	r23
 6c8:	80 95       	com	r24
 6ca:	90 95       	com	r25
 6cc:	9b 01       	movw	r18, r22
 6ce:	ac 01       	movw	r20, r24
 6d0:	bd 01       	movw	r22, r26
 6d2:	cf 01       	movw	r24, r30
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
