
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000764  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000007f8  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001393  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	fc d0       	rcall	.+504    	; 0x234 <main>
  3c:	91 c3       	rjmp	.+1826   	; 0x760 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
uint16_t getAverage(uint16_t * arr, uint8_t size);
void initMotorDriverIO(void);
void initTimer0PWM(void);
void initPCInterrupts(void);

ISR(PCINT0_vect) {
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	2f 93       	push	r18
  4c:	8f 93       	push	r24
  4e:	9f 93       	push	r25
  50:	af 93       	push	r26
  52:	bf 93       	push	r27

  uint8_t MSB = bit_is_set(PINB,ENCODER_A); //MSB = most significant bit
  54:	26 b3       	in	r18, 0x16	; 22
  uint8_t LSB = bit_is_set(PINB,ENCODER_B); //LSB = least significant bit
  56:	86 b3       	in	r24, 0x16	; 22
void initTimer0PWM(void);
void initPCInterrupts(void);

ISR(PCINT0_vect) {

  uint8_t MSB = bit_is_set(PINB,ENCODER_A); //MSB = most significant bit
  58:	22 70       	andi	r18, 0x02	; 2
  uint8_t LSB = bit_is_set(PINB,ENCODER_B); //LSB = least significant bit

  uint8_t encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
  5a:	22 0f       	add	r18, r18
void initPCInterrupts(void);

ISR(PCINT0_vect) {

  uint8_t MSB = bit_is_set(PINB,ENCODER_A); //MSB = most significant bit
  uint8_t LSB = bit_is_set(PINB,ENCODER_B); //LSB = least significant bit
  5c:	84 70       	andi	r24, 0x04	; 4

  uint8_t encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
  5e:	28 2b       	or	r18, r24
  uint8_t sum  = (last_encoded << 2) | encoded; //adding it to the previous encoded value
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	88 0f       	add	r24, r24
  66:	88 0f       	add	r24, r24
  68:	82 2b       	or	r24, r18

  if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoder_count ++;
  6a:	84 30       	cpi	r24, 0x04	; 4
  6c:	61 f4       	brne	.+24     	; 0x86 <__vector_2+0x46>
  6e:	80 91 61 00 	lds	r24, 0x0061
  72:	90 91 62 00 	lds	r25, 0x0062
  76:	a0 91 63 00 	lds	r26, 0x0063
  7a:	b0 91 64 00 	lds	r27, 0x0064
  7e:	01 96       	adiw	r24, 0x01	; 1
  80:	a1 1d       	adc	r26, r1
  82:	b1 1d       	adc	r27, r1
  84:	0d c0       	rjmp	.+26     	; 0xa0 <__vector_2+0x60>
  if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoder_count --;
  86:	88 30       	cpi	r24, 0x08	; 8
  88:	99 f4       	brne	.+38     	; 0xb0 <__vector_2+0x70>
  8a:	80 91 61 00 	lds	r24, 0x0061
  8e:	90 91 62 00 	lds	r25, 0x0062
  92:	a0 91 63 00 	lds	r26, 0x0063
  96:	b0 91 64 00 	lds	r27, 0x0064
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	a1 09       	sbc	r26, r1
  9e:	b1 09       	sbc	r27, r1
  a0:	80 93 61 00 	sts	0x0061, r24
  a4:	90 93 62 00 	sts	0x0062, r25
  a8:	a0 93 63 00 	sts	0x0063, r26
  ac:	b0 93 64 00 	sts	0x0064, r27

  last_encoded = encoded; //store this value for next time
  b0:	20 93 60 00 	sts	0x0060, r18
  
  return;
}
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <initADC>:
}

void initADC(void) {
  //initialize ADC (set ref voltage, prescaler, and enable)
  //updated for attiny85  
  ADMUX &= ~(1 << REFS1);
  c8:	3f 98       	cbi	0x07, 7	; 7
  ADMUX &= ~(1 << REFS0);
  ca:	3e 98       	cbi	0x07, 6	; 7
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1);    // ADC clock prescaler /8
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	86 b9       	out	0x06, r24	; 6
  ADCSRA |= (1 << ADEN);               			// enable ADC
  d2:	37 9a       	sbi	0x06, 7	; 6
  d4:	08 95       	ret

000000d6 <readADC>:
}

uint16_t readADC(uint8_t channel) {
  //read ADC value from channel (ADC0 to ADC 5)
  //works for attiny85
  ADMUX = (0b11110000 & ADMUX) | channel;
  d6:	97 b1       	in	r25, 0x07	; 7
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	98 2b       	or	r25, r24
  dc:	97 b9       	out	0x07, r25	; 7
  ADCSRA |= (1 << ADSC);
  de:	36 9a       	sbi	0x06, 6	; 6
  loop_until_bit_is_clear(ADCSRA, ADSC);
  e0:	36 99       	sbic	0x06, 6	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <readADC+0xa>
  return (ADC);
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
}
  e8:	08 95       	ret

000000ea <initValues>:
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	26 17       	cp	r18, r22
  ee:	31 f0       	breq	.+12     	; 0xfc <initValues+0x12>
     *arr = value;
  f0:	fc 01       	movw	r30, r24
  f2:	41 93       	st	Z+, r20
  f4:	51 93       	st	Z+, r21
  f6:	cf 01       	movw	r24, r30
void initValues(uint16_t * arr, uint8_t size, uint16_t value){
  
  uint8_t i;
  
  //copy 'value' into each element of array
  for(i=0;i<size;i++){
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	f8 cf       	rjmp	.-16     	; 0xec <initValues+0x2>
     *arr = value;
     arr++;
  }
}
  fc:	08 95       	ret

000000fe <storeNewADC>:

void storeNewADC(uint16_t * arr, uint8_t size, uint8_t channel){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
  
  uint8_t i;
  arr = arr + (size-1);
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	eb 01       	movw	r28, r22
 106:	c1 50       	subi	r28, 0x01	; 1
 108:	d0 48       	sbci	r29, 0x80	; 128
 10a:	cc 0f       	add	r28, r28
 10c:	dd 1f       	adc	r29, r29
 10e:	c8 0f       	add	r28, r24
 110:	d9 1f       	adc	r29, r25
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	61 50       	subi	r22, 0x01	; 1
 116:	71 09       	sbc	r23, r1
 118:	29 2f       	mov	r18, r25
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	26 17       	cp	r18, r22
 11e:	37 07       	cpc	r19, r23
 120:	44 f4       	brge	.+16     	; 0x132 <storeNewADC+0x34>
 122:	fe 01       	movw	r30, r28
    *arr = *(arr-1);
 124:	32 91       	ld	r19, -Z
 126:	22 91       	ld	r18, -Z
 128:	39 83       	std	Y+1, r19	; 0x01
 12a:	28 83       	st	Y, r18
  
  uint8_t i;
  arr = arr + (size-1);
  
  //starting with last element of array, store value from the previous element
  for (i=0;i<(size-1);i++){
 12c:	9f 5f       	subi	r25, 0xFF	; 255
    *arr = *(arr-1);
    arr--;
 12e:	ef 01       	movw	r28, r30
 130:	f3 cf       	rjmp	.-26     	; 0x118 <storeNewADC+0x1a>
  }
  
  //read ADC for newest value into array
  *arr = readADC(channel);
 132:	84 2f       	mov	r24, r20
 134:	d0 df       	rcall	.-96     	; 0xd6 <readADC>
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	88 83       	st	Y, r24
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <getAverage>:

uint16_t getAverage(uint16_t * arr, uint8_t size){
 140:	fc 01       	movw	r30, r24
 142:	36 2f       	mov	r19, r22
  
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	cb 01       	movw	r24, r22
      
  //sum all elements in array
  for(i=0;i<size;i++){
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	23 17       	cp	r18, r19
 14e:	41 f0       	breq	.+16     	; 0x160 <getAverage+0x20>
    sum = sum + *arr;
 150:	41 91       	ld	r20, Z+
 152:	51 91       	ld	r21, Z+
 154:	64 0f       	add	r22, r20
 156:	75 1f       	adc	r23, r21
 158:	81 1d       	adc	r24, r1
 15a:	91 1d       	adc	r25, r1
  uint8_t i;
  uint16_t avg;
  uint32_t sum = 0;
      
  //sum all elements in array
  for(i=0;i<size;i++){
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <getAverage+0xc>
    sum = sum + *arr;
    arr++;
  }
  
  //calculate avg and return 
  avg = sum / size;
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	da d2       	rcall	.+1460   	; 0x71c <__udivmodsi4>
  return avg;
}
 168:	c9 01       	movw	r24, r18
 16a:	08 95       	ret

0000016c <initTimer0PWM>:

void initTimer0PWM(void){
  /* Set up Timer0 (8bit) */
  //changed for attiny85
  //Use Mode 3, FastPWM
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 16c:	8a b5       	in	r24, 0x2a	; 42
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	8a bd       	out	0x2a, r24	; 42

  //Clear at match, set at bottom
  TCCR0A |= (1 << COM0A1);
 172:	8a b5       	in	r24, 0x2a	; 42
 174:	80 68       	ori	r24, 0x80	; 128
 176:	8a bd       	out	0x2a, r24	; 42
  
  // No prescale, gives freq = ~4kHz
  TCCR0B |= (1<<CS00);
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	83 bf       	out	0x33, r24	; 51
  
  //set pins for output
  DDRB |= (1 << DRIVER_PWM);
 17e:	b8 9a       	sbi	0x17, 0	; 23
 180:	08 95       	ret

00000182 <initMotorDriverIO>:
}

void initMotorDriverIO(void){
  //set for output
  DDRB |= (1<<DRIVER_A);
 182:	bd 9a       	sbi	0x17, 5	; 23
  DDRB |= (1<<DRIVER_B);
 184:	bb 9a       	sbi	0x17, 3	; 23
  //init to zero
  pin_lo('B',DRIVER_A);
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	29 d0       	rcall	.+82     	; 0x1e2 <pin_lo>
  pin_lo('B',DRIVER_B);
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	24 c0       	rjmp	.+72     	; 0x1e2 <pin_lo>

0000019a <initPCInterrupts>:

}
//removed motor calculations

void initPCInterrupts(void){
  DDRB &= ~(1<<ENCODER_A);
 19a:	b9 98       	cbi	0x17, 1	; 23
  DDRB &= ~(1<<ENCODER_B);
 19c:	ba 98       	cbi	0x17, 2	; 23
  //PORTB |= (1<<ENCODER_A);
  //PORTB |= (1<<ENCODER_B);
  GIMSK |= (1<<PCIE);
 19e:	8b b7       	in	r24, 0x3b	; 59
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	8b bf       	out	0x3b, r24	; 59
  PCMSK |= (1<<PCINT1) | (1<<PCINT2);
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	86 60       	ori	r24, 0x06	; 6
 1a8:	85 bb       	out	0x15, r24	; 21
  sei();
 1aa:	78 94       	sei
 1ac:	08 95       	ret

000001ae <toggle>:

void toggle(char port, int bit)
{
    if(port == 'A'){
      //PORTA ^= (1<<bit);
    }else if (port == 'B'){
 1ae:	82 34       	cpi	r24, 0x42	; 66
 1b0:	51 f4       	brne	.+20     	; 0x1c6 <toggle+0x18>
      PORTB ^= (1<<bit);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	06 2e       	mov	r0, r22
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <toggle+0x10>
 1bc:	88 0f       	add	r24, r24
 1be:	0a 94       	dec	r0
 1c0:	ea f7       	brpl	.-6      	; 0x1bc <toggle+0xe>
 1c2:	28 27       	eor	r18, r24
 1c4:	28 bb       	out	0x18, r18	; 24
 1c6:	08 95       	ret

000001c8 <pin_hi>:

void pin_hi(char port, int bit)
{
    if(port == 'A'){
      //PORTA |= (1<<bit);
    }else if (port == 'B'){
 1c8:	82 34       	cpi	r24, 0x42	; 66
 1ca:	51 f4       	brne	.+20     	; 0x1e0 <pin_hi+0x18>
      PORTB |= (1<<bit);
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	06 2e       	mov	r0, r22
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <pin_hi+0x10>
 1d6:	88 0f       	add	r24, r24
 1d8:	0a 94       	dec	r0
 1da:	ea f7       	brpl	.-6      	; 0x1d6 <pin_hi+0xe>
 1dc:	28 2b       	or	r18, r24
 1de:	28 bb       	out	0x18, r18	; 24
 1e0:	08 95       	ret

000001e2 <pin_lo>:

void pin_lo(char port, int bit)
{
    if(port == 'A'){
      //PORTA &= ~(1<<bit);
    }else if (port == 'B'){
 1e2:	82 34       	cpi	r24, 0x42	; 66
 1e4:	59 f4       	brne	.+22     	; 0x1fc <pin_lo+0x1a>
      PORTB &= ~(1<<bit);
 1e6:	28 b3       	in	r18, 0x18	; 24
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	06 2e       	mov	r0, r22
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <pin_lo+0x10>
 1f0:	88 0f       	add	r24, r24
 1f2:	0a 94       	dec	r0
 1f4:	ea f7       	brpl	.-6      	; 0x1f0 <pin_lo+0xe>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	08 95       	ret

000001fe <set_as_input>:

void set_as_input(char port, int bit)
{
    if(port == 'A'){
      //DDRA &= ~(1<<bit);
    }else if (port == 'B'){
 1fe:	82 34       	cpi	r24, 0x42	; 66
 200:	59 f4       	brne	.+22     	; 0x218 <set_as_input+0x1a>
      DDRB &= ~(1<<bit);
 202:	27 b3       	in	r18, 0x17	; 23
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	06 2e       	mov	r0, r22
 20a:	01 c0       	rjmp	.+2      	; 0x20e <set_as_input+0x10>
 20c:	88 0f       	add	r24, r24
 20e:	0a 94       	dec	r0
 210:	ea f7       	brpl	.-6      	; 0x20c <set_as_input+0xe>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	87 bb       	out	0x17, r24	; 23
 218:	08 95       	ret

0000021a <set_as_output>:
 21a:	82 34       	cpi	r24, 0x42	; 66
 21c:	51 f4       	brne	.+20     	; 0x232 <set_as_output+0x18>
 21e:	27 b3       	in	r18, 0x17	; 23
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	06 2e       	mov	r0, r22
 226:	01 c0       	rjmp	.+2      	; 0x22a <set_as_output+0x10>
 228:	88 0f       	add	r24, r24
 22a:	0a 94       	dec	r0
 22c:	ea f7       	brpl	.-6      	; 0x228 <set_as_output+0xe>
 22e:	28 2b       	or	r18, r24
 230:	27 bb       	out	0x17, r18	; 23
 232:	08 95       	ret

00000234 <main>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	c0 54       	subi	r28, 0x40	; 64
 23e:	d1 09       	sbc	r29, r1
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	3e df       	rcall	.-388    	; 0xc8 <initADC>
 24c:	9a df       	rcall	.-204    	; 0x182 <initMotorDriverIO>
 24e:	8e df       	rcall	.-228    	; 0x16c <initTimer0PWM>
 250:	a4 df       	rcall	.-184    	; 0x19a <initPCInterrupts>
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	60 e2       	ldi	r22, 0x20	; 32
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	46 df       	rcall	.-372    	; 0xea <initValues>
 25e:	1f ef       	ldi	r17, 0xFF	; 255
 260:	42 e0       	ldi	r20, 0x02	; 2
 262:	60 e2       	ldi	r22, 0x20	; 32
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	4a df       	rcall	.-364    	; 0xfe <storeNewADC>
 26a:	60 e2       	ldi	r22, 0x20	; 32
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	67 df       	rcall	.-306    	; 0x140 <getAverage>
 272:	f8 94       	cli
 274:	c0 90 61 00 	lds	r12, 0x0061
 278:	d0 90 62 00 	lds	r13, 0x0062
 27c:	e0 90 63 00 	lds	r14, 0x0063
 280:	f0 90 64 00 	lds	r15, 0x0064
 284:	78 94       	sei
 286:	bc 01       	movw	r22, r24
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	26 d1       	rcall	.+588    	; 0x4da <__floatunsisf>
 28e:	2b ec       	ldi	r18, 0xCB	; 203
 290:	3b e2       	ldi	r19, 0x2B	; 43
 292:	4f ea       	ldi	r20, 0xAF	; 175
 294:	52 e4       	ldi	r21, 0x42	; 66
 296:	d7 d1       	rcall	.+942    	; 0x646 <__mulsf3>
 298:	ef d0       	rcall	.+478    	; 0x478 <__fixsfsi>
 29a:	6c 19       	sub	r22, r12
 29c:	7d 09       	sbc	r23, r13
 29e:	8e 09       	sbc	r24, r14
 2a0:	9f 09       	sbc	r25, r15
 2a2:	1d d1       	rcall	.+570    	; 0x4de <__floatsisf>
 2a4:	6b 01       	movw	r12, r22
 2a6:	7c 01       	movw	r14, r24
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e4       	ldi	r19, 0x40	; 64
 2ac:	43 e0       	ldi	r20, 0x03	; 3
 2ae:	55 e4       	ldi	r21, 0x45	; 69
 2b0:	c6 d1       	rcall	.+908    	; 0x63e <__gesf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	14 f4       	brge	.+4      	; 0x2ba <__stack+0x5b>
 2b6:	19 bd       	out	0x29, r17	; 41
 2b8:	34 c0       	rjmp	.+104    	; 0x322 <__stack+0xc3>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e4       	ldi	r19, 0x40	; 64
 2be:	43 e0       	ldi	r20, 0x03	; 3
 2c0:	55 e4       	ldi	r21, 0x45	; 69
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	6c d0       	rcall	.+216    	; 0x3a0 <__cmpsf2>
 2c8:	18 16       	cp	r1, r24
 2ca:	c4 f0       	brlt	.+48     	; 0x2fc <__stack+0x9d>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	4a e7       	ldi	r20, 0x7A	; 122
 2d2:	53 e4       	ldi	r21, 0x43	; 67
 2d4:	c7 01       	movw	r24, r14
 2d6:	b6 01       	movw	r22, r12
 2d8:	b2 d1       	rcall	.+868    	; 0x63e <__gesf2>
 2da:	18 16       	cp	r1, r24
 2dc:	7c f4       	brge	.+30     	; 0x2fc <__stack+0x9d>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e4       	ldi	r19, 0x40	; 64
 2e2:	43 e0       	ldi	r20, 0x03	; 3
 2e4:	55 e4       	ldi	r21, 0x45	; 69
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	5e d0       	rcall	.+188    	; 0x3a8 <__divsf3>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4f e7       	ldi	r20, 0x7F	; 127
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	a8 d1       	rcall	.+848    	; 0x646 <__mulsf3>
 2f6:	c5 d0       	rcall	.+394    	; 0x482 <__fixunssfsi>
 2f8:	69 bd       	out	0x29, r22	; 41
 2fa:	13 c0       	rjmp	.+38     	; 0x322 <__stack+0xc3>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	4a e7       	ldi	r20, 0x7A	; 122
 302:	53 e4       	ldi	r21, 0x43	; 67
 304:	c7 01       	movw	r24, r14
 306:	b6 01       	movw	r22, r12
 308:	4b d0       	rcall	.+150    	; 0x3a0 <__cmpsf2>
 30a:	18 16       	cp	r1, r24
 30c:	94 f0       	brlt	.+36     	; 0x332 <__stack+0xd3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	4a e7       	ldi	r20, 0x7A	; 122
 314:	53 ec       	ldi	r21, 0xC3	; 195
 316:	c7 01       	movw	r24, r14
 318:	b6 01       	movw	r22, r12
 31a:	91 d1       	rcall	.+802    	; 0x63e <__gesf2>
 31c:	87 fd       	sbrc	r24, 7
 31e:	09 c0       	rjmp	.+18     	; 0x332 <__stack+0xd3>
 320:	19 bc       	out	0x29, r1	; 41
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	4e df       	rcall	.-356    	; 0x1c8 <pin_hi>
 32c:	63 e0       	ldi	r22, 0x03	; 3
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	33 c0       	rjmp	.+102    	; 0x398 <__stack+0x139>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	4a e7       	ldi	r20, 0x7A	; 122
 338:	53 ec       	ldi	r21, 0xC3	; 195
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	30 d0       	rcall	.+96     	; 0x3a0 <__cmpsf2>
 340:	87 ff       	sbrs	r24, 7
 342:	19 c0       	rjmp	.+50     	; 0x376 <__stack+0x117>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e4       	ldi	r19, 0x40	; 64
 348:	43 e0       	ldi	r20, 0x03	; 3
 34a:	55 ec       	ldi	r21, 0xC5	; 197
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	76 d1       	rcall	.+748    	; 0x63e <__gesf2>
 352:	87 fd       	sbrc	r24, 7
 354:	10 c0       	rjmp	.+32     	; 0x376 <__stack+0x117>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e4       	ldi	r19, 0x40	; 64
 35a:	43 e0       	ldi	r20, 0x03	; 3
 35c:	55 e4       	ldi	r21, 0x45	; 69
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	22 d0       	rcall	.+68     	; 0x3a8 <__divsf3>
 364:	90 58       	subi	r25, 0x80	; 128
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	4f e7       	ldi	r20, 0x7F	; 127
 36c:	53 e4       	ldi	r21, 0x43	; 67
 36e:	6b d1       	rcall	.+726    	; 0x646 <__mulsf3>
 370:	88 d0       	rcall	.+272    	; 0x482 <__fixunssfsi>
 372:	69 bd       	out	0x29, r22	; 41
 374:	0a c0       	rjmp	.+20     	; 0x38a <__stack+0x12b>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e4       	ldi	r19, 0x40	; 64
 37a:	43 e0       	ldi	r20, 0x03	; 3
 37c:	55 ec       	ldi	r21, 0xC5	; 197
 37e:	c7 01       	movw	r24, r14
 380:	b6 01       	movw	r22, r12
 382:	0e d0       	rcall	.+28     	; 0x3a0 <__cmpsf2>
 384:	87 ff       	sbrs	r24, 7
 386:	6c cf       	rjmp	.-296    	; 0x260 <__stack+0x1>
 388:	19 bd       	out	0x29, r17	; 41
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	82 e4       	ldi	r24, 0x42	; 66
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	1a df       	rcall	.-460    	; 0x1c8 <pin_hi>
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	82 e4       	ldi	r24, 0x42	; 66
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	22 df       	rcall	.-444    	; 0x1e2 <pin_lo>
 39e:	60 cf       	rjmp	.-320    	; 0x260 <__stack+0x1>

000003a0 <__cmpsf2>:
 3a0:	d9 d0       	rcall	.+434    	; 0x554 <__fp_cmp>
 3a2:	08 f4       	brcc	.+2      	; 0x3a6 <__cmpsf2+0x6>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	08 95       	ret

000003a8 <__divsf3>:
 3a8:	0c d0       	rcall	.+24     	; 0x3c2 <__divsf3x>
 3aa:	0f c1       	rjmp	.+542    	; 0x5ca <__fp_round>
 3ac:	07 d1       	rcall	.+526    	; 0x5bc <__fp_pscB>
 3ae:	40 f0       	brcs	.+16     	; 0x3c0 <__divsf3+0x18>
 3b0:	fe d0       	rcall	.+508    	; 0x5ae <__fp_pscA>
 3b2:	30 f0       	brcs	.+12     	; 0x3c0 <__divsf3+0x18>
 3b4:	21 f4       	brne	.+8      	; 0x3be <__divsf3+0x16>
 3b6:	5f 3f       	cpi	r21, 0xFF	; 255
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <__divsf3+0x18>
 3ba:	f0 c0       	rjmp	.+480    	; 0x59c <__fp_inf>
 3bc:	51 11       	cpse	r21, r1
 3be:	39 c1       	rjmp	.+626    	; 0x632 <__fp_szero>
 3c0:	f3 c0       	rjmp	.+486    	; 0x5a8 <__fp_nan>

000003c2 <__divsf3x>:
 3c2:	14 d1       	rcall	.+552    	; 0x5ec <__fp_split3>
 3c4:	98 f3       	brcs	.-26     	; 0x3ac <__divsf3+0x4>

000003c6 <__divsf3_pse>:
 3c6:	99 23       	and	r25, r25
 3c8:	c9 f3       	breq	.-14     	; 0x3bc <__divsf3+0x14>
 3ca:	55 23       	and	r21, r21
 3cc:	b1 f3       	breq	.-20     	; 0x3ba <__divsf3+0x12>
 3ce:	95 1b       	sub	r25, r21
 3d0:	55 0b       	sbc	r21, r21
 3d2:	bb 27       	eor	r27, r27
 3d4:	aa 27       	eor	r26, r26
 3d6:	62 17       	cp	r22, r18
 3d8:	73 07       	cpc	r23, r19
 3da:	84 07       	cpc	r24, r20
 3dc:	38 f0       	brcs	.+14     	; 0x3ec <__divsf3_pse+0x26>
 3de:	9f 5f       	subi	r25, 0xFF	; 255
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	44 1f       	adc	r20, r20
 3e8:	aa 1f       	adc	r26, r26
 3ea:	a9 f3       	breq	.-22     	; 0x3d6 <__divsf3_pse+0x10>
 3ec:	33 d0       	rcall	.+102    	; 0x454 <__divsf3_pse+0x8e>
 3ee:	0e 2e       	mov	r0, r30
 3f0:	3a f0       	brmi	.+14     	; 0x400 <__divsf3_pse+0x3a>
 3f2:	e0 e8       	ldi	r30, 0x80	; 128
 3f4:	30 d0       	rcall	.+96     	; 0x456 <__divsf3_pse+0x90>
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	50 40       	sbci	r21, 0x00	; 0
 3fa:	e6 95       	lsr	r30
 3fc:	00 1c       	adc	r0, r0
 3fe:	ca f7       	brpl	.-14     	; 0x3f2 <__divsf3_pse+0x2c>
 400:	29 d0       	rcall	.+82     	; 0x454 <__divsf3_pse+0x8e>
 402:	fe 2f       	mov	r31, r30
 404:	27 d0       	rcall	.+78     	; 0x454 <__divsf3_pse+0x8e>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	bb 1f       	adc	r27, r27
 40e:	26 17       	cp	r18, r22
 410:	37 07       	cpc	r19, r23
 412:	48 07       	cpc	r20, r24
 414:	ab 07       	cpc	r26, r27
 416:	b0 e8       	ldi	r27, 0x80	; 128
 418:	09 f0       	breq	.+2      	; 0x41c <__divsf3_pse+0x56>
 41a:	bb 0b       	sbc	r27, r27
 41c:	80 2d       	mov	r24, r0
 41e:	bf 01       	movw	r22, r30
 420:	ff 27       	eor	r31, r31
 422:	93 58       	subi	r25, 0x83	; 131
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	2a f0       	brmi	.+10     	; 0x432 <__divsf3_pse+0x6c>
 428:	9e 3f       	cpi	r25, 0xFE	; 254
 42a:	51 05       	cpc	r21, r1
 42c:	68 f0       	brcs	.+26     	; 0x448 <__divsf3_pse+0x82>
 42e:	b6 c0       	rjmp	.+364    	; 0x59c <__fp_inf>
 430:	00 c1       	rjmp	.+512    	; 0x632 <__fp_szero>
 432:	5f 3f       	cpi	r21, 0xFF	; 255
 434:	ec f3       	brlt	.-6      	; 0x430 <__divsf3_pse+0x6a>
 436:	98 3e       	cpi	r25, 0xE8	; 232
 438:	dc f3       	brlt	.-10     	; 0x430 <__divsf3_pse+0x6a>
 43a:	86 95       	lsr	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b7 95       	ror	r27
 442:	f7 95       	ror	r31
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	c9 f7       	brne	.-14     	; 0x43a <__divsf3_pse+0x74>
 448:	88 0f       	add	r24, r24
 44a:	91 1d       	adc	r25, r1
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret
 454:	e1 e0       	ldi	r30, 0x01	; 1
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	bb 1f       	adc	r27, r27
 45e:	62 17       	cp	r22, r18
 460:	73 07       	cpc	r23, r19
 462:	84 07       	cpc	r24, r20
 464:	ba 07       	cpc	r27, r26
 466:	20 f0       	brcs	.+8      	; 0x470 <__divsf3_pse+0xaa>
 468:	62 1b       	sub	r22, r18
 46a:	73 0b       	sbc	r23, r19
 46c:	84 0b       	sbc	r24, r20
 46e:	ba 0b       	sbc	r27, r26
 470:	ee 1f       	adc	r30, r30
 472:	88 f7       	brcc	.-30     	; 0x456 <__divsf3_pse+0x90>
 474:	e0 95       	com	r30
 476:	08 95       	ret

00000478 <__fixsfsi>:
 478:	04 d0       	rcall	.+8      	; 0x482 <__fixunssfsi>
 47a:	68 94       	set
 47c:	b1 11       	cpse	r27, r1
 47e:	d9 c0       	rjmp	.+434    	; 0x632 <__fp_szero>
 480:	08 95       	ret

00000482 <__fixunssfsi>:
 482:	bc d0       	rcall	.+376    	; 0x5fc <__fp_splitA>
 484:	88 f0       	brcs	.+34     	; 0x4a8 <__fixunssfsi+0x26>
 486:	9f 57       	subi	r25, 0x7F	; 127
 488:	90 f0       	brcs	.+36     	; 0x4ae <__fixunssfsi+0x2c>
 48a:	b9 2f       	mov	r27, r25
 48c:	99 27       	eor	r25, r25
 48e:	b7 51       	subi	r27, 0x17	; 23
 490:	a0 f0       	brcs	.+40     	; 0x4ba <__fixunssfsi+0x38>
 492:	d1 f0       	breq	.+52     	; 0x4c8 <__fixunssfsi+0x46>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	1a f0       	brmi	.+6      	; 0x4a4 <__fixunssfsi+0x22>
 49e:	ba 95       	dec	r27
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__fixunssfsi+0x12>
 4a2:	12 c0       	rjmp	.+36     	; 0x4c8 <__fixunssfsi+0x46>
 4a4:	b1 30       	cpi	r27, 0x01	; 1
 4a6:	81 f0       	breq	.+32     	; 0x4c8 <__fixunssfsi+0x46>
 4a8:	c3 d0       	rcall	.+390    	; 0x630 <__fp_zero>
 4aa:	b1 e0       	ldi	r27, 0x01	; 1
 4ac:	08 95       	ret
 4ae:	c0 c0       	rjmp	.+384    	; 0x630 <__fp_zero>
 4b0:	67 2f       	mov	r22, r23
 4b2:	78 2f       	mov	r23, r24
 4b4:	88 27       	eor	r24, r24
 4b6:	b8 5f       	subi	r27, 0xF8	; 248
 4b8:	39 f0       	breq	.+14     	; 0x4c8 <__fixunssfsi+0x46>
 4ba:	b9 3f       	cpi	r27, 0xF9	; 249
 4bc:	cc f3       	brlt	.-14     	; 0x4b0 <__fixunssfsi+0x2e>
 4be:	86 95       	lsr	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b3 95       	inc	r27
 4c6:	d9 f7       	brne	.-10     	; 0x4be <__fixunssfsi+0x3c>
 4c8:	3e f4       	brtc	.+14     	; 0x4d8 <__fixunssfsi+0x56>
 4ca:	90 95       	com	r25
 4cc:	80 95       	com	r24
 4ce:	70 95       	com	r23
 4d0:	61 95       	neg	r22
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	08 95       	ret

000004da <__floatunsisf>:
 4da:	e8 94       	clt
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <__floatsisf+0x12>

000004de <__floatsisf>:
 4de:	97 fb       	bst	r25, 7
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__floatsisf+0x12>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	99 23       	and	r25, r25
 4f2:	a9 f0       	breq	.+42     	; 0x51e <__floatsisf+0x40>
 4f4:	f9 2f       	mov	r31, r25
 4f6:	96 e9       	ldi	r25, 0x96	; 150
 4f8:	bb 27       	eor	r27, r27
 4fa:	93 95       	inc	r25
 4fc:	f6 95       	lsr	r31
 4fe:	87 95       	ror	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f1 11       	cpse	r31, r1
 508:	f8 cf       	rjmp	.-16     	; 0x4fa <__floatsisf+0x1c>
 50a:	fa f4       	brpl	.+62     	; 0x54a <__floatsisf+0x6c>
 50c:	bb 0f       	add	r27, r27
 50e:	11 f4       	brne	.+4      	; 0x514 <__floatsisf+0x36>
 510:	60 ff       	sbrs	r22, 0
 512:	1b c0       	rjmp	.+54     	; 0x54a <__floatsisf+0x6c>
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	16 c0       	rjmp	.+44     	; 0x54a <__floatsisf+0x6c>
 51e:	88 23       	and	r24, r24
 520:	11 f0       	breq	.+4      	; 0x526 <__floatsisf+0x48>
 522:	96 e9       	ldi	r25, 0x96	; 150
 524:	11 c0       	rjmp	.+34     	; 0x548 <__floatsisf+0x6a>
 526:	77 23       	and	r23, r23
 528:	21 f0       	breq	.+8      	; 0x532 <__floatsisf+0x54>
 52a:	9e e8       	ldi	r25, 0x8E	; 142
 52c:	87 2f       	mov	r24, r23
 52e:	76 2f       	mov	r23, r22
 530:	05 c0       	rjmp	.+10     	; 0x53c <__floatsisf+0x5e>
 532:	66 23       	and	r22, r22
 534:	71 f0       	breq	.+28     	; 0x552 <__floatsisf+0x74>
 536:	96 e8       	ldi	r25, 0x86	; 134
 538:	86 2f       	mov	r24, r22
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	2a f0       	brmi	.+10     	; 0x54a <__floatsisf+0x6c>
 540:	9a 95       	dec	r25
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	da f7       	brpl	.-10     	; 0x540 <__floatsisf+0x62>
 54a:	88 0f       	add	r24, r24
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	97 f9       	bld	r25, 7
 552:	08 95       	ret

00000554 <__fp_cmp>:
 554:	99 0f       	add	r25, r25
 556:	00 08       	sbc	r0, r0
 558:	55 0f       	add	r21, r21
 55a:	aa 0b       	sbc	r26, r26
 55c:	e0 e8       	ldi	r30, 0x80	; 128
 55e:	fe ef       	ldi	r31, 0xFE	; 254
 560:	16 16       	cp	r1, r22
 562:	17 06       	cpc	r1, r23
 564:	e8 07       	cpc	r30, r24
 566:	f9 07       	cpc	r31, r25
 568:	c0 f0       	brcs	.+48     	; 0x59a <__fp_cmp+0x46>
 56a:	12 16       	cp	r1, r18
 56c:	13 06       	cpc	r1, r19
 56e:	e4 07       	cpc	r30, r20
 570:	f5 07       	cpc	r31, r21
 572:	98 f0       	brcs	.+38     	; 0x59a <__fp_cmp+0x46>
 574:	62 1b       	sub	r22, r18
 576:	73 0b       	sbc	r23, r19
 578:	84 0b       	sbc	r24, r20
 57a:	95 0b       	sbc	r25, r21
 57c:	39 f4       	brne	.+14     	; 0x58c <__fp_cmp+0x38>
 57e:	0a 26       	eor	r0, r26
 580:	61 f0       	breq	.+24     	; 0x59a <__fp_cmp+0x46>
 582:	23 2b       	or	r18, r19
 584:	24 2b       	or	r18, r20
 586:	25 2b       	or	r18, r21
 588:	21 f4       	brne	.+8      	; 0x592 <__fp_cmp+0x3e>
 58a:	08 95       	ret
 58c:	0a 26       	eor	r0, r26
 58e:	09 f4       	brne	.+2      	; 0x592 <__fp_cmp+0x3e>
 590:	a1 40       	sbci	r26, 0x01	; 1
 592:	a6 95       	lsr	r26
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	81 1d       	adc	r24, r1
 598:	81 1d       	adc	r24, r1
 59a:	08 95       	ret

0000059c <__fp_inf>:
 59c:	97 f9       	bld	r25, 7
 59e:	9f 67       	ori	r25, 0x7F	; 127
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <__fp_nan>:
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	08 95       	ret

000005ae <__fp_pscA>:
 5ae:	00 24       	eor	r0, r0
 5b0:	0a 94       	dec	r0
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	18 06       	cpc	r1, r24
 5b8:	09 06       	cpc	r0, r25
 5ba:	08 95       	ret

000005bc <__fp_pscB>:
 5bc:	00 24       	eor	r0, r0
 5be:	0a 94       	dec	r0
 5c0:	12 16       	cp	r1, r18
 5c2:	13 06       	cpc	r1, r19
 5c4:	14 06       	cpc	r1, r20
 5c6:	05 06       	cpc	r0, r21
 5c8:	08 95       	ret

000005ca <__fp_round>:
 5ca:	09 2e       	mov	r0, r25
 5cc:	03 94       	inc	r0
 5ce:	00 0c       	add	r0, r0
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <__fp_round+0xc>
 5d2:	88 23       	and	r24, r24
 5d4:	52 f0       	brmi	.+20     	; 0x5ea <__fp_round+0x20>
 5d6:	bb 0f       	add	r27, r27
 5d8:	40 f4       	brcc	.+16     	; 0x5ea <__fp_round+0x20>
 5da:	bf 2b       	or	r27, r31
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_round+0x18>
 5de:	60 ff       	sbrs	r22, 0
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__fp_round+0x20>
 5e2:	6f 5f       	subi	r22, 0xFF	; 255
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__fp_split3>:
 5ec:	57 fd       	sbrc	r21, 7
 5ee:	90 58       	subi	r25, 0x80	; 128
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	59 f0       	breq	.+22     	; 0x60c <__fp_splitA+0x10>
 5f6:	5f 3f       	cpi	r21, 0xFF	; 255
 5f8:	71 f0       	breq	.+28     	; 0x616 <__fp_splitA+0x1a>
 5fa:	47 95       	ror	r20

000005fc <__fp_splitA>:
 5fc:	88 0f       	add	r24, r24
 5fe:	97 fb       	bst	r25, 7
 600:	99 1f       	adc	r25, r25
 602:	61 f0       	breq	.+24     	; 0x61c <__fp_splitA+0x20>
 604:	9f 3f       	cpi	r25, 0xFF	; 255
 606:	79 f0       	breq	.+30     	; 0x626 <__fp_splitA+0x2a>
 608:	87 95       	ror	r24
 60a:	08 95       	ret
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	14 06       	cpc	r1, r20
 612:	55 1f       	adc	r21, r21
 614:	f2 cf       	rjmp	.-28     	; 0x5fa <__fp_split3+0xe>
 616:	46 95       	lsr	r20
 618:	f1 df       	rcall	.-30     	; 0x5fc <__fp_splitA>
 61a:	08 c0       	rjmp	.+16     	; 0x62c <__fp_splitA+0x30>
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	99 1f       	adc	r25, r25
 624:	f1 cf       	rjmp	.-30     	; 0x608 <__fp_splitA+0xc>
 626:	86 95       	lsr	r24
 628:	71 05       	cpc	r23, r1
 62a:	61 05       	cpc	r22, r1
 62c:	08 94       	sec
 62e:	08 95       	ret

00000630 <__fp_zero>:
 630:	e8 94       	clt

00000632 <__fp_szero>:
 632:	bb 27       	eor	r27, r27
 634:	66 27       	eor	r22, r22
 636:	77 27       	eor	r23, r23
 638:	cb 01       	movw	r24, r22
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__gesf2>:
 63e:	8a df       	rcall	.-236    	; 0x554 <__fp_cmp>
 640:	08 f4       	brcc	.+2      	; 0x644 <__gesf2+0x6>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	08 95       	ret

00000646 <__mulsf3>:
 646:	0a d0       	rcall	.+20     	; 0x65c <__mulsf3x>
 648:	c0 cf       	rjmp	.-128    	; 0x5ca <__fp_round>
 64a:	b1 df       	rcall	.-158    	; 0x5ae <__fp_pscA>
 64c:	28 f0       	brcs	.+10     	; 0x658 <__mulsf3+0x12>
 64e:	b6 df       	rcall	.-148    	; 0x5bc <__fp_pscB>
 650:	18 f0       	brcs	.+6      	; 0x658 <__mulsf3+0x12>
 652:	95 23       	and	r25, r21
 654:	09 f0       	breq	.+2      	; 0x658 <__mulsf3+0x12>
 656:	a2 cf       	rjmp	.-188    	; 0x59c <__fp_inf>
 658:	a7 cf       	rjmp	.-178    	; 0x5a8 <__fp_nan>
 65a:	eb cf       	rjmp	.-42     	; 0x632 <__fp_szero>

0000065c <__mulsf3x>:
 65c:	c7 df       	rcall	.-114    	; 0x5ec <__fp_split3>
 65e:	a8 f3       	brcs	.-22     	; 0x64a <__mulsf3+0x4>

00000660 <__mulsf3_pse>:
 660:	99 23       	and	r25, r25
 662:	d9 f3       	breq	.-10     	; 0x65a <__mulsf3+0x14>
 664:	55 23       	and	r21, r21
 666:	c9 f3       	breq	.-14     	; 0x65a <__mulsf3+0x14>
 668:	95 0f       	add	r25, r21
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	55 1f       	adc	r21, r21
 66e:	aa 27       	eor	r26, r26
 670:	ee 27       	eor	r30, r30
 672:	ff 27       	eor	r31, r31
 674:	bb 27       	eor	r27, r27
 676:	00 24       	eor	r0, r0
 678:	08 94       	sec
 67a:	67 95       	ror	r22
 67c:	20 f4       	brcc	.+8      	; 0x686 <__mulsf3_pse+0x26>
 67e:	e2 0f       	add	r30, r18
 680:	f3 1f       	adc	r31, r19
 682:	b4 1f       	adc	r27, r20
 684:	0a 1e       	adc	r0, r26
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	44 1f       	adc	r20, r20
 68c:	aa 1f       	adc	r26, r26
 68e:	66 95       	lsr	r22
 690:	a9 f7       	brne	.-22     	; 0x67c <__mulsf3_pse+0x1c>
 692:	77 95       	ror	r23
 694:	30 f4       	brcc	.+12     	; 0x6a2 <__mulsf3_pse+0x42>
 696:	f3 0f       	add	r31, r19
 698:	b4 1f       	adc	r27, r20
 69a:	0a 1e       	adc	r0, r26
 69c:	12 1e       	adc	r1, r18
 69e:	08 f4       	brcc	.+2      	; 0x6a2 <__mulsf3_pse+0x42>
 6a0:	63 95       	inc	r22
 6a2:	33 0f       	add	r19, r19
 6a4:	44 1f       	adc	r20, r20
 6a6:	aa 1f       	adc	r26, r26
 6a8:	22 1f       	adc	r18, r18
 6aa:	76 95       	lsr	r23
 6ac:	99 f7       	brne	.-26     	; 0x694 <__mulsf3_pse+0x34>
 6ae:	87 95       	ror	r24
 6b0:	20 f4       	brcc	.+8      	; 0x6ba <__mulsf3_pse+0x5a>
 6b2:	b4 0f       	add	r27, r20
 6b4:	0a 1e       	adc	r0, r26
 6b6:	12 1e       	adc	r1, r18
 6b8:	63 1f       	adc	r22, r19
 6ba:	44 0f       	add	r20, r20
 6bc:	aa 1f       	adc	r26, r26
 6be:	22 1f       	adc	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	86 95       	lsr	r24
 6c4:	a9 f7       	brne	.-22     	; 0x6b0 <__mulsf3_pse+0x50>
 6c6:	86 2f       	mov	r24, r22
 6c8:	71 2d       	mov	r23, r1
 6ca:	60 2d       	mov	r22, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	9f 57       	subi	r25, 0x7F	; 127
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	8a f0       	brmi	.+34     	; 0x6f6 <__mulsf3_pse+0x96>
 6d4:	e1 f0       	breq	.+56     	; 0x70e <__mulsf3_pse+0xae>
 6d6:	88 23       	and	r24, r24
 6d8:	4a f0       	brmi	.+18     	; 0x6ec <__mulsf3_pse+0x8c>
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	bb 1f       	adc	r27, r27
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__mulsf3_pse+0x76>
 6ec:	9e 3f       	cpi	r25, 0xFE	; 254
 6ee:	51 05       	cpc	r21, r1
 6f0:	70 f0       	brcs	.+28     	; 0x70e <__mulsf3_pse+0xae>
 6f2:	54 cf       	rjmp	.-344    	; 0x59c <__fp_inf>
 6f4:	9e cf       	rjmp	.-196    	; 0x632 <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	ec f3       	brlt	.-6      	; 0x6f4 <__mulsf3_pse+0x94>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	dc f3       	brlt	.-10     	; 0x6f4 <__mulsf3_pse+0x94>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	e7 95       	ror	r30
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	c1 f7       	brne	.-16     	; 0x6fe <__mulsf3_pse+0x9e>
 70e:	fe 2b       	or	r31, r30
 710:	88 0f       	add	r24, r24
 712:	91 1d       	adc	r25, r1
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <__udivmodsi4>:
 71c:	a1 e2       	ldi	r26, 0x21	; 33
 71e:	1a 2e       	mov	r1, r26
 720:	aa 1b       	sub	r26, r26
 722:	bb 1b       	sub	r27, r27
 724:	fd 01       	movw	r30, r26
 726:	0d c0       	rjmp	.+26     	; 0x742 <__udivmodsi4_ep>

00000728 <__udivmodsi4_loop>:
 728:	aa 1f       	adc	r26, r26
 72a:	bb 1f       	adc	r27, r27
 72c:	ee 1f       	adc	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	a2 17       	cp	r26, r18
 732:	b3 07       	cpc	r27, r19
 734:	e4 07       	cpc	r30, r20
 736:	f5 07       	cpc	r31, r21
 738:	20 f0       	brcs	.+8      	; 0x742 <__udivmodsi4_ep>
 73a:	a2 1b       	sub	r26, r18
 73c:	b3 0b       	sbc	r27, r19
 73e:	e4 0b       	sbc	r30, r20
 740:	f5 0b       	sbc	r31, r21

00000742 <__udivmodsi4_ep>:
 742:	66 1f       	adc	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	1a 94       	dec	r1
 74c:	69 f7       	brne	.-38     	; 0x728 <__udivmodsi4_loop>
 74e:	60 95       	com	r22
 750:	70 95       	com	r23
 752:	80 95       	com	r24
 754:	90 95       	com	r25
 756:	9b 01       	movw	r18, r22
 758:	ac 01       	movw	r20, r24
 75a:	bd 01       	movw	r22, r26
 75c:	cf 01       	movw	r24, r30
 75e:	08 95       	ret

00000760 <_exit>:
 760:	f8 94       	cli

00000762 <__stop_program>:
 762:	ff cf       	rjmp	.-2      	; 0x762 <__stop_program>
